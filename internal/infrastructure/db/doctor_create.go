// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctorschedule"
	"github.com/google/uuid"
)

// DoctorCreate is the builder for creating a Doctor entity.
type DoctorCreate struct {
	config
	mutation *DoctorMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dc *DoctorCreate) SetName(s string) *DoctorCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetSpecialization sets the "specialization" field.
func (dc *DoctorCreate) SetSpecialization(s string) *DoctorCreate {
	dc.mutation.SetSpecialization(s)
	return dc
}

// SetLicenseNumber sets the "license_number" field.
func (dc *DoctorCreate) SetLicenseNumber(s string) *DoctorCreate {
	dc.mutation.SetLicenseNumber(s)
	return dc
}

// SetNillableLicenseNumber sets the "license_number" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableLicenseNumber(s *string) *DoctorCreate {
	if s != nil {
		dc.SetLicenseNumber(*s)
	}
	return dc
}

// SetEmail sets the "email" field.
func (dc *DoctorCreate) SetEmail(s string) *DoctorCreate {
	dc.mutation.SetEmail(s)
	return dc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableEmail(s *string) *DoctorCreate {
	if s != nil {
		dc.SetEmail(*s)
	}
	return dc
}

// SetPhone sets the "phone" field.
func (dc *DoctorCreate) SetPhone(s string) *DoctorCreate {
	dc.mutation.SetPhone(s)
	return dc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (dc *DoctorCreate) SetNillablePhone(s *string) *DoctorCreate {
	if s != nil {
		dc.SetPhone(*s)
	}
	return dc
}

// SetBio sets the "bio" field.
func (dc *DoctorCreate) SetBio(s string) *DoctorCreate {
	dc.mutation.SetBio(s)
	return dc
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableBio(s *string) *DoctorCreate {
	if s != nil {
		dc.SetBio(*s)
	}
	return dc
}

// SetQualifications sets the "qualifications" field.
func (dc *DoctorCreate) SetQualifications(s []string) *DoctorCreate {
	dc.mutation.SetQualifications(s)
	return dc
}

// SetAvailability sets the "availability" field.
func (dc *DoctorCreate) SetAvailability(m map[string]interface{}) *DoctorCreate {
	dc.mutation.SetAvailability(m)
	return dc
}

// SetConsultationDuration sets the "consultation_duration" field.
func (dc *DoctorCreate) SetConsultationDuration(i int) *DoctorCreate {
	dc.mutation.SetConsultationDuration(i)
	return dc
}

// SetNillableConsultationDuration sets the "consultation_duration" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableConsultationDuration(i *int) *DoctorCreate {
	if i != nil {
		dc.SetConsultationDuration(*i)
	}
	return dc
}

// SetConsultationFee sets the "consultation_fee" field.
func (dc *DoctorCreate) SetConsultationFee(f float64) *DoctorCreate {
	dc.mutation.SetConsultationFee(f)
	return dc
}

// SetNillableConsultationFee sets the "consultation_fee" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableConsultationFee(f *float64) *DoctorCreate {
	if f != nil {
		dc.SetConsultationFee(*f)
	}
	return dc
}

// SetActive sets the "active" field.
func (dc *DoctorCreate) SetActive(b bool) *DoctorCreate {
	dc.mutation.SetActive(b)
	return dc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableActive(b *bool) *DoctorCreate {
	if b != nil {
		dc.SetActive(*b)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DoctorCreate) SetCreatedAt(t time.Time) *DoctorCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableCreatedAt(t *time.Time) *DoctorCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DoctorCreate) SetUpdatedAt(t time.Time) *DoctorCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableUpdatedAt(t *time.Time) *DoctorCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DoctorCreate) SetID(u uuid.UUID) *DoctorCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableID(u *uuid.UUID) *DoctorCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (dc *DoctorCreate) SetClinicID(id uuid.UUID) *DoctorCreate {
	dc.mutation.SetClinicID(id)
	return dc
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (dc *DoctorCreate) SetNillableClinicID(id *uuid.UUID) *DoctorCreate {
	if id != nil {
		dc = dc.SetClinicID(*id)
	}
	return dc
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (dc *DoctorCreate) SetClinic(c *Clinic) *DoctorCreate {
	return dc.SetClinicID(c.ID)
}

// AddAppointmentIDs adds the "appointments" edge to the Appointment entity by IDs.
func (dc *DoctorCreate) AddAppointmentIDs(ids ...uuid.UUID) *DoctorCreate {
	dc.mutation.AddAppointmentIDs(ids...)
	return dc
}

// AddAppointments adds the "appointments" edges to the Appointment entity.
func (dc *DoctorCreate) AddAppointments(a ...*Appointment) *DoctorCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dc.AddAppointmentIDs(ids...)
}

// AddScheduleIDs adds the "schedules" edge to the DoctorSchedule entity by IDs.
func (dc *DoctorCreate) AddScheduleIDs(ids ...uuid.UUID) *DoctorCreate {
	dc.mutation.AddScheduleIDs(ids...)
	return dc
}

// AddSchedules adds the "schedules" edges to the DoctorSchedule entity.
func (dc *DoctorCreate) AddSchedules(d ...*DoctorSchedule) *DoctorCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddScheduleIDs(ids...)
}

// Mutation returns the DoctorMutation object of the builder.
func (dc *DoctorCreate) Mutation() *DoctorMutation {
	return dc.mutation
}

// Save creates the Doctor in the database.
func (dc *DoctorCreate) Save(ctx context.Context) (*Doctor, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DoctorCreate) SaveX(ctx context.Context) *Doctor {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DoctorCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DoctorCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DoctorCreate) defaults() {
	if _, ok := dc.mutation.ConsultationDuration(); !ok {
		v := doctor.DefaultConsultationDuration
		dc.mutation.SetConsultationDuration(v)
	}
	if _, ok := dc.mutation.ConsultationFee(); !ok {
		v := doctor.DefaultConsultationFee
		dc.mutation.SetConsultationFee(v)
	}
	if _, ok := dc.mutation.Active(); !ok {
		v := doctor.DefaultActive
		dc.mutation.SetActive(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := doctor.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := doctor.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := doctor.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DoctorCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Doctor.name"`)}
	}
	if _, ok := dc.mutation.Specialization(); !ok {
		return &ValidationError{Name: "specialization", err: errors.New(`db: missing required field "Doctor.specialization"`)}
	}
	if _, ok := dc.mutation.Availability(); !ok {
		return &ValidationError{Name: "availability", err: errors.New(`db: missing required field "Doctor.availability"`)}
	}
	if _, ok := dc.mutation.ConsultationDuration(); !ok {
		return &ValidationError{Name: "consultation_duration", err: errors.New(`db: missing required field "Doctor.consultation_duration"`)}
	}
	if _, ok := dc.mutation.ConsultationFee(); !ok {
		return &ValidationError{Name: "consultation_fee", err: errors.New(`db: missing required field "Doctor.consultation_fee"`)}
	}
	if _, ok := dc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`db: missing required field "Doctor.active"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Doctor.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Doctor.updated_at"`)}
	}
	return nil
}

func (dc *DoctorCreate) sqlSave(ctx context.Context) (*Doctor, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DoctorCreate) createSpec() (*Doctor, *sqlgraph.CreateSpec) {
	var (
		_node = &Doctor{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(doctor.Table, sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(doctor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Specialization(); ok {
		_spec.SetField(doctor.FieldSpecialization, field.TypeString, value)
		_node.Specialization = value
	}
	if value, ok := dc.mutation.LicenseNumber(); ok {
		_spec.SetField(doctor.FieldLicenseNumber, field.TypeString, value)
		_node.LicenseNumber = value
	}
	if value, ok := dc.mutation.Email(); ok {
		_spec.SetField(doctor.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := dc.mutation.Phone(); ok {
		_spec.SetField(doctor.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := dc.mutation.Bio(); ok {
		_spec.SetField(doctor.FieldBio, field.TypeString, value)
		_node.Bio = value
	}
	if value, ok := dc.mutation.Qualifications(); ok {
		_spec.SetField(doctor.FieldQualifications, field.TypeJSON, value)
		_node.Qualifications = value
	}
	if value, ok := dc.mutation.Availability(); ok {
		_spec.SetField(doctor.FieldAvailability, field.TypeJSON, value)
		_node.Availability = value
	}
	if value, ok := dc.mutation.ConsultationDuration(); ok {
		_spec.SetField(doctor.FieldConsultationDuration, field.TypeInt, value)
		_node.ConsultationDuration = value
	}
	if value, ok := dc.mutation.ConsultationFee(); ok {
		_spec.SetField(doctor.FieldConsultationFee, field.TypeFloat64, value)
		_node.ConsultationFee = value
	}
	if value, ok := dc.mutation.Active(); ok {
		_spec.SetField(doctor.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(doctor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(doctor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.ClinicTable,
			Columns: []string{doctor.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clinic_doctors = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.AppointmentsTable,
			Columns: []string{doctor.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.SchedulesTable,
			Columns: []string{doctor.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctorschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DoctorCreateBulk is the builder for creating many Doctor entities in bulk.
type DoctorCreateBulk struct {
	config
	err      error
	builders []*DoctorCreate
}

// Save creates the Doctor entities in the database.
func (dcb *DoctorCreateBulk) Save(ctx context.Context) ([]*Doctor, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Doctor, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DoctorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DoctorCreateBulk) SaveX(ctx context.Context) []*Doctor {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DoctorCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DoctorCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
