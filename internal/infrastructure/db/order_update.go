// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderitem"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderstatushistory"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetOrderNumber sets the "order_number" field.
func (ou *OrderUpdate) SetOrderNumber(s string) *OrderUpdate {
	ou.mutation.SetOrderNumber(s)
	return ou
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOrderNumber(*s)
	}
	return ou
}

// SetOrderType sets the "order_type" field.
func (ou *OrderUpdate) SetOrderType(ot order.OrderType) *OrderUpdate {
	ou.mutation.SetOrderType(ot)
	return ou
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderType(ot *order.OrderType) *OrderUpdate {
	if ot != nil {
		ou.SetOrderType(*ot)
	}
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetSubtotal sets the "subtotal" field.
func (ou *OrderUpdate) SetSubtotal(f float64) *OrderUpdate {
	ou.mutation.ResetSubtotal()
	ou.mutation.SetSubtotal(f)
	return ou
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSubtotal(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetSubtotal(*f)
	}
	return ou
}

// AddSubtotal adds f to the "subtotal" field.
func (ou *OrderUpdate) AddSubtotal(f float64) *OrderUpdate {
	ou.mutation.AddSubtotal(f)
	return ou
}

// SetTaxAmount sets the "tax_amount" field.
func (ou *OrderUpdate) SetTaxAmount(f float64) *OrderUpdate {
	ou.mutation.ResetTaxAmount()
	ou.mutation.SetTaxAmount(f)
	return ou
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTaxAmount(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTaxAmount(*f)
	}
	return ou
}

// AddTaxAmount adds f to the "tax_amount" field.
func (ou *OrderUpdate) AddTaxAmount(f float64) *OrderUpdate {
	ou.mutation.AddTaxAmount(f)
	return ou
}

// SetDiscountAmount sets the "discount_amount" field.
func (ou *OrderUpdate) SetDiscountAmount(f float64) *OrderUpdate {
	ou.mutation.ResetDiscountAmount()
	ou.mutation.SetDiscountAmount(f)
	return ou
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDiscountAmount(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetDiscountAmount(*f)
	}
	return ou
}

// AddDiscountAmount adds f to the "discount_amount" field.
func (ou *OrderUpdate) AddDiscountAmount(f float64) *OrderUpdate {
	ou.mutation.AddDiscountAmount(f)
	return ou
}

// SetShippingCost sets the "shipping_cost" field.
func (ou *OrderUpdate) SetShippingCost(f float64) *OrderUpdate {
	ou.mutation.ResetShippingCost()
	ou.mutation.SetShippingCost(f)
	return ou
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCost(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetShippingCost(*f)
	}
	return ou
}

// AddShippingCost adds f to the "shipping_cost" field.
func (ou *OrderUpdate) AddShippingCost(f float64) *OrderUpdate {
	ou.mutation.AddShippingCost(f)
	return ou
}

// SetTotalAmount sets the "total_amount" field.
func (ou *OrderUpdate) SetTotalAmount(f float64) *OrderUpdate {
	ou.mutation.ResetTotalAmount()
	ou.mutation.SetTotalAmount(f)
	return ou
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTotalAmount(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTotalAmount(*f)
	}
	return ou
}

// AddTotalAmount adds f to the "total_amount" field.
func (ou *OrderUpdate) AddTotalAmount(f float64) *OrderUpdate {
	ou.mutation.AddTotalAmount(f)
	return ou
}

// SetCurrency sets the "currency" field.
func (ou *OrderUpdate) SetCurrency(s string) *OrderUpdate {
	ou.mutation.SetCurrency(s)
	return ou
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCurrency(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCurrency(*s)
	}
	return ou
}

// SetPaymentStatus sets the "payment_status" field.
func (ou *OrderUpdate) SetPaymentStatus(os order.PaymentStatus) *OrderUpdate {
	ou.mutation.SetPaymentStatus(os)
	return ou
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentStatus(os *order.PaymentStatus) *OrderUpdate {
	if os != nil {
		ou.SetPaymentStatus(*os)
	}
	return ou
}

// SetPaymentMethod sets the "payment_method" field.
func (ou *OrderUpdate) SetPaymentMethod(om order.PaymentMethod) *OrderUpdate {
	ou.mutation.SetPaymentMethod(om)
	return ou
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentMethod(om *order.PaymentMethod) *OrderUpdate {
	if om != nil {
		ou.SetPaymentMethod(*om)
	}
	return ou
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (ou *OrderUpdate) ClearPaymentMethod() *OrderUpdate {
	ou.mutation.ClearPaymentMethod()
	return ou
}

// SetShippingAddress sets the "shipping_address" field.
func (ou *OrderUpdate) SetShippingAddress(m map[string]interface{}) *OrderUpdate {
	ou.mutation.SetShippingAddress(m)
	return ou
}

// ClearShippingAddress clears the value of the "shipping_address" field.
func (ou *OrderUpdate) ClearShippingAddress() *OrderUpdate {
	ou.mutation.ClearShippingAddress()
	return ou
}

// SetBillingAddress sets the "billing_address" field.
func (ou *OrderUpdate) SetBillingAddress(m map[string]interface{}) *OrderUpdate {
	ou.mutation.SetBillingAddress(m)
	return ou
}

// ClearBillingAddress clears the value of the "billing_address" field.
func (ou *OrderUpdate) ClearBillingAddress() *OrderUpdate {
	ou.mutation.ClearBillingAddress()
	return ou
}

// SetDeliveryMethod sets the "delivery_method" field.
func (ou *OrderUpdate) SetDeliveryMethod(om order.DeliveryMethod) *OrderUpdate {
	ou.mutation.SetDeliveryMethod(om)
	return ou
}

// SetNillableDeliveryMethod sets the "delivery_method" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveryMethod(om *order.DeliveryMethod) *OrderUpdate {
	if om != nil {
		ou.SetDeliveryMethod(*om)
	}
	return ou
}

// SetExpectedDeliveryDate sets the "expected_delivery_date" field.
func (ou *OrderUpdate) SetExpectedDeliveryDate(t time.Time) *OrderUpdate {
	ou.mutation.SetExpectedDeliveryDate(t)
	return ou
}

// SetNillableExpectedDeliveryDate sets the "expected_delivery_date" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableExpectedDeliveryDate(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetExpectedDeliveryDate(*t)
	}
	return ou
}

// ClearExpectedDeliveryDate clears the value of the "expected_delivery_date" field.
func (ou *OrderUpdate) ClearExpectedDeliveryDate() *OrderUpdate {
	ou.mutation.ClearExpectedDeliveryDate()
	return ou
}

// SetDeliveredAt sets the "delivered_at" field.
func (ou *OrderUpdate) SetDeliveredAt(t time.Time) *OrderUpdate {
	ou.mutation.SetDeliveredAt(t)
	return ou
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveredAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDeliveredAt(*t)
	}
	return ou
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (ou *OrderUpdate) ClearDeliveredAt() *OrderUpdate {
	ou.mutation.ClearDeliveredAt()
	return ou
}

// SetNotes sets the "notes" field.
func (ou *OrderUpdate) SetNotes(s string) *OrderUpdate {
	ou.mutation.SetNotes(s)
	return ou
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNotes(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNotes(*s)
	}
	return ou
}

// ClearNotes clears the value of the "notes" field.
func (ou *OrderUpdate) ClearNotes() *OrderUpdate {
	ou.mutation.ClearNotes()
	return ou
}

// SetCancellationReason sets the "cancellation_reason" field.
func (ou *OrderUpdate) SetCancellationReason(s string) *OrderUpdate {
	ou.mutation.SetCancellationReason(s)
	return ou
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCancellationReason(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCancellationReason(*s)
	}
	return ou
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (ou *OrderUpdate) ClearCancellationReason() *OrderUpdate {
	ou.mutation.ClearCancellationReason()
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (ou *OrderUpdate) SetClinicID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetClinicID(id)
	return ou
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableClinicID(id *uuid.UUID) *OrderUpdate {
	if id != nil {
		ou = ou.SetClinicID(*id)
	}
	return ou
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ou *OrderUpdate) SetClinic(c *Clinic) *OrderUpdate {
	return ou.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (ou *OrderUpdate) SetPatientID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetPatientID(id)
	return ou
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillablePatientID(id *uuid.UUID) *OrderUpdate {
	if id != nil {
		ou = ou.SetPatientID(*id)
	}
	return ou
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ou *OrderUpdate) SetPatient(p *Patient) *OrderUpdate {
	return ou.SetPatientID(p.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ou *OrderUpdate) AddOrderItemIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.AddOrderItemIDs(ids...)
	return ou
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ou *OrderUpdate) AddOrderItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderItemIDs(ids...)
}

// AddOrderStatusHistoryIDs adds the "order_status_history" edge to the OrderStatusHistory entity by IDs.
func (ou *OrderUpdate) AddOrderStatusHistoryIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.AddOrderStatusHistoryIDs(ids...)
	return ou
}

// AddOrderStatusHistory adds the "order_status_history" edges to the OrderStatusHistory entity.
func (ou *OrderUpdate) AddOrderStatusHistory(o ...*OrderStatusHistory) *OrderUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderStatusHistoryIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (ou *OrderUpdate) ClearClinic() *OrderUpdate {
	ou.mutation.ClearClinic()
	return ou
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (ou *OrderUpdate) ClearPatient() *OrderUpdate {
	ou.mutation.ClearPatient()
	return ou
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ou *OrderUpdate) ClearOrderItems() *OrderUpdate {
	ou.mutation.ClearOrderItems()
	return ou
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ou *OrderUpdate) RemoveOrderItemIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.RemoveOrderItemIDs(ids...)
	return ou
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ou *OrderUpdate) RemoveOrderItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderItemIDs(ids...)
}

// ClearOrderStatusHistory clears all "order_status_history" edges to the OrderStatusHistory entity.
func (ou *OrderUpdate) ClearOrderStatusHistory() *OrderUpdate {
	ou.mutation.ClearOrderStatusHistory()
	return ou
}

// RemoveOrderStatusHistoryIDs removes the "order_status_history" edge to OrderStatusHistory entities by IDs.
func (ou *OrderUpdate) RemoveOrderStatusHistoryIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.RemoveOrderStatusHistoryIDs(ids...)
	return ou
}

// RemoveOrderStatusHistory removes "order_status_history" edges to OrderStatusHistory entities.
func (ou *OrderUpdate) RemoveOrderStatusHistory(o ...*OrderStatusHistory) *OrderUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderStatusHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.OrderType(); ok {
		if err := order.OrderTypeValidator(v); err != nil {
			return &ValidationError{Name: "order_type", err: fmt.Errorf(`db: validator failed for field "Order.order_type": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PaymentStatus(); ok {
		if err := order.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`db: validator failed for field "Order.payment_status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`db: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DeliveryMethod(); ok {
		if err := order.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`db: validator failed for field "Order.delivery_method": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OrderNumber(); ok {
		_spec.SetField(order.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := ou.mutation.OrderType(); ok {
		_spec.SetField(order.FieldOrderType, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.Subtotal(); ok {
		_spec.SetField(order.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedSubtotal(); ok {
		_spec.AddField(order.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.TaxAmount(); ok {
		_spec.SetField(order.FieldTaxAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTaxAmount(); ok {
		_spec.AddField(order.FieldTaxAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.DiscountAmount(); ok {
		_spec.SetField(order.FieldDiscountAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedDiscountAmount(); ok {
		_spec.AddField(order.FieldDiscountAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.ShippingCost(); ok {
		_spec.SetField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedShippingCost(); ok {
		_spec.AddField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Currency(); ok {
		_spec.SetField(order.FieldCurrency, field.TypeString, value)
	}
	if value, ok := ou.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeEnum, value)
	}
	if ou.mutation.PaymentMethodCleared() {
		_spec.ClearField(order.FieldPaymentMethod, field.TypeEnum)
	}
	if value, ok := ou.mutation.ShippingAddress(); ok {
		_spec.SetField(order.FieldShippingAddress, field.TypeJSON, value)
	}
	if ou.mutation.ShippingAddressCleared() {
		_spec.ClearField(order.FieldShippingAddress, field.TypeJSON)
	}
	if value, ok := ou.mutation.BillingAddress(); ok {
		_spec.SetField(order.FieldBillingAddress, field.TypeJSON, value)
	}
	if ou.mutation.BillingAddressCleared() {
		_spec.ClearField(order.FieldBillingAddress, field.TypeJSON)
	}
	if value, ok := ou.mutation.DeliveryMethod(); ok {
		_spec.SetField(order.FieldDeliveryMethod, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.ExpectedDeliveryDate(); ok {
		_spec.SetField(order.FieldExpectedDeliveryDate, field.TypeTime, value)
	}
	if ou.mutation.ExpectedDeliveryDateCleared() {
		_spec.ClearField(order.FieldExpectedDeliveryDate, field.TypeTime)
	}
	if value, ok := ou.mutation.DeliveredAt(); ok {
		_spec.SetField(order.FieldDeliveredAt, field.TypeTime, value)
	}
	if ou.mutation.DeliveredAtCleared() {
		_spec.ClearField(order.FieldDeliveredAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Notes(); ok {
		_spec.SetField(order.FieldNotes, field.TypeString, value)
	}
	if ou.mutation.NotesCleared() {
		_spec.ClearField(order.FieldNotes, field.TypeString)
	}
	if value, ok := ou.mutation.CancellationReason(); ok {
		_spec.SetField(order.FieldCancellationReason, field.TypeString, value)
	}
	if ou.mutation.CancellationReasonCleared() {
		_spec.ClearField(order.FieldCancellationReason, field.TypeString)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ClinicTable,
			Columns: []string{order.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ClinicTable,
			Columns: []string{order.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PatientTable,
			Columns: []string{order.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PatientTable,
			Columns: []string{order.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ou.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderStatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderStatusHistoryTable,
			Columns: []string{order.OrderStatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderStatusHistoryIDs(); len(nodes) > 0 && !ou.mutation.OrderStatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderStatusHistoryTable,
			Columns: []string{order.OrderStatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderStatusHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderStatusHistoryTable,
			Columns: []string{order.OrderStatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetOrderNumber sets the "order_number" field.
func (ouo *OrderUpdateOne) SetOrderNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderNumber(s)
	return ouo
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOrderNumber(*s)
	}
	return ouo
}

// SetOrderType sets the "order_type" field.
func (ouo *OrderUpdateOne) SetOrderType(ot order.OrderType) *OrderUpdateOne {
	ouo.mutation.SetOrderType(ot)
	return ouo
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderType(ot *order.OrderType) *OrderUpdateOne {
	if ot != nil {
		ouo.SetOrderType(*ot)
	}
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetSubtotal sets the "subtotal" field.
func (ouo *OrderUpdateOne) SetSubtotal(f float64) *OrderUpdateOne {
	ouo.mutation.ResetSubtotal()
	ouo.mutation.SetSubtotal(f)
	return ouo
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSubtotal(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetSubtotal(*f)
	}
	return ouo
}

// AddSubtotal adds f to the "subtotal" field.
func (ouo *OrderUpdateOne) AddSubtotal(f float64) *OrderUpdateOne {
	ouo.mutation.AddSubtotal(f)
	return ouo
}

// SetTaxAmount sets the "tax_amount" field.
func (ouo *OrderUpdateOne) SetTaxAmount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTaxAmount()
	ouo.mutation.SetTaxAmount(f)
	return ouo
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTaxAmount(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTaxAmount(*f)
	}
	return ouo
}

// AddTaxAmount adds f to the "tax_amount" field.
func (ouo *OrderUpdateOne) AddTaxAmount(f float64) *OrderUpdateOne {
	ouo.mutation.AddTaxAmount(f)
	return ouo
}

// SetDiscountAmount sets the "discount_amount" field.
func (ouo *OrderUpdateOne) SetDiscountAmount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetDiscountAmount()
	ouo.mutation.SetDiscountAmount(f)
	return ouo
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDiscountAmount(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetDiscountAmount(*f)
	}
	return ouo
}

// AddDiscountAmount adds f to the "discount_amount" field.
func (ouo *OrderUpdateOne) AddDiscountAmount(f float64) *OrderUpdateOne {
	ouo.mutation.AddDiscountAmount(f)
	return ouo
}

// SetShippingCost sets the "shipping_cost" field.
func (ouo *OrderUpdateOne) SetShippingCost(f float64) *OrderUpdateOne {
	ouo.mutation.ResetShippingCost()
	ouo.mutation.SetShippingCost(f)
	return ouo
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCost(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetShippingCost(*f)
	}
	return ouo
}

// AddShippingCost adds f to the "shipping_cost" field.
func (ouo *OrderUpdateOne) AddShippingCost(f float64) *OrderUpdateOne {
	ouo.mutation.AddShippingCost(f)
	return ouo
}

// SetTotalAmount sets the "total_amount" field.
func (ouo *OrderUpdateOne) SetTotalAmount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotalAmount()
	ouo.mutation.SetTotalAmount(f)
	return ouo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTotalAmount(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTotalAmount(*f)
	}
	return ouo
}

// AddTotalAmount adds f to the "total_amount" field.
func (ouo *OrderUpdateOne) AddTotalAmount(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotalAmount(f)
	return ouo
}

// SetCurrency sets the "currency" field.
func (ouo *OrderUpdateOne) SetCurrency(s string) *OrderUpdateOne {
	ouo.mutation.SetCurrency(s)
	return ouo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCurrency(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCurrency(*s)
	}
	return ouo
}

// SetPaymentStatus sets the "payment_status" field.
func (ouo *OrderUpdateOne) SetPaymentStatus(os order.PaymentStatus) *OrderUpdateOne {
	ouo.mutation.SetPaymentStatus(os)
	return ouo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentStatus(os *order.PaymentStatus) *OrderUpdateOne {
	if os != nil {
		ouo.SetPaymentStatus(*os)
	}
	return ouo
}

// SetPaymentMethod sets the "payment_method" field.
func (ouo *OrderUpdateOne) SetPaymentMethod(om order.PaymentMethod) *OrderUpdateOne {
	ouo.mutation.SetPaymentMethod(om)
	return ouo
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentMethod(om *order.PaymentMethod) *OrderUpdateOne {
	if om != nil {
		ouo.SetPaymentMethod(*om)
	}
	return ouo
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (ouo *OrderUpdateOne) ClearPaymentMethod() *OrderUpdateOne {
	ouo.mutation.ClearPaymentMethod()
	return ouo
}

// SetShippingAddress sets the "shipping_address" field.
func (ouo *OrderUpdateOne) SetShippingAddress(m map[string]interface{}) *OrderUpdateOne {
	ouo.mutation.SetShippingAddress(m)
	return ouo
}

// ClearShippingAddress clears the value of the "shipping_address" field.
func (ouo *OrderUpdateOne) ClearShippingAddress() *OrderUpdateOne {
	ouo.mutation.ClearShippingAddress()
	return ouo
}

// SetBillingAddress sets the "billing_address" field.
func (ouo *OrderUpdateOne) SetBillingAddress(m map[string]interface{}) *OrderUpdateOne {
	ouo.mutation.SetBillingAddress(m)
	return ouo
}

// ClearBillingAddress clears the value of the "billing_address" field.
func (ouo *OrderUpdateOne) ClearBillingAddress() *OrderUpdateOne {
	ouo.mutation.ClearBillingAddress()
	return ouo
}

// SetDeliveryMethod sets the "delivery_method" field.
func (ouo *OrderUpdateOne) SetDeliveryMethod(om order.DeliveryMethod) *OrderUpdateOne {
	ouo.mutation.SetDeliveryMethod(om)
	return ouo
}

// SetNillableDeliveryMethod sets the "delivery_method" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveryMethod(om *order.DeliveryMethod) *OrderUpdateOne {
	if om != nil {
		ouo.SetDeliveryMethod(*om)
	}
	return ouo
}

// SetExpectedDeliveryDate sets the "expected_delivery_date" field.
func (ouo *OrderUpdateOne) SetExpectedDeliveryDate(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetExpectedDeliveryDate(t)
	return ouo
}

// SetNillableExpectedDeliveryDate sets the "expected_delivery_date" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableExpectedDeliveryDate(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetExpectedDeliveryDate(*t)
	}
	return ouo
}

// ClearExpectedDeliveryDate clears the value of the "expected_delivery_date" field.
func (ouo *OrderUpdateOne) ClearExpectedDeliveryDate() *OrderUpdateOne {
	ouo.mutation.ClearExpectedDeliveryDate()
	return ouo
}

// SetDeliveredAt sets the "delivered_at" field.
func (ouo *OrderUpdateOne) SetDeliveredAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDeliveredAt(t)
	return ouo
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveredAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDeliveredAt(*t)
	}
	return ouo
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (ouo *OrderUpdateOne) ClearDeliveredAt() *OrderUpdateOne {
	ouo.mutation.ClearDeliveredAt()
	return ouo
}

// SetNotes sets the "notes" field.
func (ouo *OrderUpdateOne) SetNotes(s string) *OrderUpdateOne {
	ouo.mutation.SetNotes(s)
	return ouo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNotes(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNotes(*s)
	}
	return ouo
}

// ClearNotes clears the value of the "notes" field.
func (ouo *OrderUpdateOne) ClearNotes() *OrderUpdateOne {
	ouo.mutation.ClearNotes()
	return ouo
}

// SetCancellationReason sets the "cancellation_reason" field.
func (ouo *OrderUpdateOne) SetCancellationReason(s string) *OrderUpdateOne {
	ouo.mutation.SetCancellationReason(s)
	return ouo
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCancellationReason(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCancellationReason(*s)
	}
	return ouo
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (ouo *OrderUpdateOne) ClearCancellationReason() *OrderUpdateOne {
	ouo.mutation.ClearCancellationReason()
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (ouo *OrderUpdateOne) SetClinicID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetClinicID(id)
	return ouo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableClinicID(id *uuid.UUID) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetClinicID(*id)
	}
	return ouo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ouo *OrderUpdateOne) SetClinic(c *Clinic) *OrderUpdateOne {
	return ouo.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (ouo *OrderUpdateOne) SetPatientID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetPatientID(id)
	return ouo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePatientID(id *uuid.UUID) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetPatientID(*id)
	}
	return ouo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ouo *OrderUpdateOne) SetPatient(p *Patient) *OrderUpdateOne {
	return ouo.SetPatientID(p.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ouo *OrderUpdateOne) AddOrderItemIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.AddOrderItemIDs(ids...)
	return ouo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) AddOrderItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderItemIDs(ids...)
}

// AddOrderStatusHistoryIDs adds the "order_status_history" edge to the OrderStatusHistory entity by IDs.
func (ouo *OrderUpdateOne) AddOrderStatusHistoryIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.AddOrderStatusHistoryIDs(ids...)
	return ouo
}

// AddOrderStatusHistory adds the "order_status_history" edges to the OrderStatusHistory entity.
func (ouo *OrderUpdateOne) AddOrderStatusHistory(o ...*OrderStatusHistory) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderStatusHistoryIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (ouo *OrderUpdateOne) ClearClinic() *OrderUpdateOne {
	ouo.mutation.ClearClinic()
	return ouo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (ouo *OrderUpdateOne) ClearPatient() *OrderUpdateOne {
	ouo.mutation.ClearPatient()
	return ouo
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) ClearOrderItems() *OrderUpdateOne {
	ouo.mutation.ClearOrderItems()
	return ouo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderItemIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.RemoveOrderItemIDs(ids...)
	return ouo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ouo *OrderUpdateOne) RemoveOrderItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderItemIDs(ids...)
}

// ClearOrderStatusHistory clears all "order_status_history" edges to the OrderStatusHistory entity.
func (ouo *OrderUpdateOne) ClearOrderStatusHistory() *OrderUpdateOne {
	ouo.mutation.ClearOrderStatusHistory()
	return ouo
}

// RemoveOrderStatusHistoryIDs removes the "order_status_history" edge to OrderStatusHistory entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderStatusHistoryIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.RemoveOrderStatusHistoryIDs(ids...)
	return ouo
}

// RemoveOrderStatusHistory removes "order_status_history" edges to OrderStatusHistory entities.
func (ouo *OrderUpdateOne) RemoveOrderStatusHistory(o ...*OrderStatusHistory) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderStatusHistoryIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.OrderType(); ok {
		if err := order.OrderTypeValidator(v); err != nil {
			return &ValidationError{Name: "order_type", err: fmt.Errorf(`db: validator failed for field "Order.order_type": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PaymentStatus(); ok {
		if err := order.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`db: validator failed for field "Order.payment_status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`db: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DeliveryMethod(); ok {
		if err := order.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`db: validator failed for field "Order.delivery_method": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.OrderNumber(); ok {
		_spec.SetField(order.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := ouo.mutation.OrderType(); ok {
		_spec.SetField(order.FieldOrderType, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.Subtotal(); ok {
		_spec.SetField(order.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedSubtotal(); ok {
		_spec.AddField(order.FieldSubtotal, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.TaxAmount(); ok {
		_spec.SetField(order.FieldTaxAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTaxAmount(); ok {
		_spec.AddField(order.FieldTaxAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.DiscountAmount(); ok {
		_spec.SetField(order.FieldDiscountAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedDiscountAmount(); ok {
		_spec.AddField(order.FieldDiscountAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.ShippingCost(); ok {
		_spec.SetField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedShippingCost(); ok {
		_spec.AddField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Currency(); ok {
		_spec.SetField(order.FieldCurrency, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeEnum, value)
	}
	if ouo.mutation.PaymentMethodCleared() {
		_spec.ClearField(order.FieldPaymentMethod, field.TypeEnum)
	}
	if value, ok := ouo.mutation.ShippingAddress(); ok {
		_spec.SetField(order.FieldShippingAddress, field.TypeJSON, value)
	}
	if ouo.mutation.ShippingAddressCleared() {
		_spec.ClearField(order.FieldShippingAddress, field.TypeJSON)
	}
	if value, ok := ouo.mutation.BillingAddress(); ok {
		_spec.SetField(order.FieldBillingAddress, field.TypeJSON, value)
	}
	if ouo.mutation.BillingAddressCleared() {
		_spec.ClearField(order.FieldBillingAddress, field.TypeJSON)
	}
	if value, ok := ouo.mutation.DeliveryMethod(); ok {
		_spec.SetField(order.FieldDeliveryMethod, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.ExpectedDeliveryDate(); ok {
		_spec.SetField(order.FieldExpectedDeliveryDate, field.TypeTime, value)
	}
	if ouo.mutation.ExpectedDeliveryDateCleared() {
		_spec.ClearField(order.FieldExpectedDeliveryDate, field.TypeTime)
	}
	if value, ok := ouo.mutation.DeliveredAt(); ok {
		_spec.SetField(order.FieldDeliveredAt, field.TypeTime, value)
	}
	if ouo.mutation.DeliveredAtCleared() {
		_spec.ClearField(order.FieldDeliveredAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Notes(); ok {
		_spec.SetField(order.FieldNotes, field.TypeString, value)
	}
	if ouo.mutation.NotesCleared() {
		_spec.ClearField(order.FieldNotes, field.TypeString)
	}
	if value, ok := ouo.mutation.CancellationReason(); ok {
		_spec.SetField(order.FieldCancellationReason, field.TypeString, value)
	}
	if ouo.mutation.CancellationReasonCleared() {
		_spec.ClearField(order.FieldCancellationReason, field.TypeString)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ClinicTable,
			Columns: []string{order.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ClinicTable,
			Columns: []string{order.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PatientTable,
			Columns: []string{order.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PatientTable,
			Columns: []string{order.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ouo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderStatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderStatusHistoryTable,
			Columns: []string{order.OrderStatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderStatusHistoryIDs(); len(nodes) > 0 && !ouo.mutation.OrderStatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderStatusHistoryTable,
			Columns: []string{order.OrderStatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderStatusHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderStatusHistoryTable,
			Columns: []string{order.OrderStatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
