// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctorschedule"
	"github.com/google/uuid"
)

// DoctorSchedule is the model entity for the DoctorSchedule schema.
type DoctorSchedule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Available holds the value of the "available" field.
	Available bool `json:"available,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DoctorScheduleQuery when eager-loading is set.
	Edges            DoctorScheduleEdges `json:"edges"`
	doctor_schedules *uuid.UUID
	selectValues     sql.SelectValues
}

// DoctorScheduleEdges holds the relations/edges for other nodes in the graph.
type DoctorScheduleEdges struct {
	// Doctor holds the value of the doctor edge.
	Doctor *Doctor `json:"doctor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorScheduleEdges) DoctorOrErr() (*Doctor, error) {
	if e.Doctor != nil {
		return e.Doctor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: doctor.Label}
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DoctorSchedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case doctorschedule.FieldAvailable:
			values[i] = new(sql.NullBool)
		case doctorschedule.FieldNotes:
			values[i] = new(sql.NullString)
		case doctorschedule.FieldDate, doctorschedule.FieldStartTime, doctorschedule.FieldEndTime, doctorschedule.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case doctorschedule.FieldID:
			values[i] = new(uuid.UUID)
		case doctorschedule.ForeignKeys[0]: // doctor_schedules
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DoctorSchedule fields.
func (ds *DoctorSchedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case doctorschedule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ds.ID = *value
			}
		case doctorschedule.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ds.Date = value.Time
			}
		case doctorschedule.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ds.StartTime = value.Time
			}
		case doctorschedule.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ds.EndTime = value.Time
			}
		case doctorschedule.FieldAvailable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field available", values[i])
			} else if value.Valid {
				ds.Available = value.Bool
			}
		case doctorschedule.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				ds.Notes = value.String
			}
		case doctorschedule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ds.CreatedAt = value.Time
			}
		case doctorschedule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field doctor_schedules", values[i])
			} else if value.Valid {
				ds.doctor_schedules = new(uuid.UUID)
				*ds.doctor_schedules = *value.S.(*uuid.UUID)
			}
		default:
			ds.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DoctorSchedule.
// This includes values selected through modifiers, order, etc.
func (ds *DoctorSchedule) Value(name string) (ent.Value, error) {
	return ds.selectValues.Get(name)
}

// QueryDoctor queries the "doctor" edge of the DoctorSchedule entity.
func (ds *DoctorSchedule) QueryDoctor() *DoctorQuery {
	return NewDoctorScheduleClient(ds.config).QueryDoctor(ds)
}

// Update returns a builder for updating this DoctorSchedule.
// Note that you need to call DoctorSchedule.Unwrap() before calling this method if this DoctorSchedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (ds *DoctorSchedule) Update() *DoctorScheduleUpdateOne {
	return NewDoctorScheduleClient(ds.config).UpdateOne(ds)
}

// Unwrap unwraps the DoctorSchedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ds *DoctorSchedule) Unwrap() *DoctorSchedule {
	_tx, ok := ds.config.driver.(*txDriver)
	if !ok {
		panic("db: DoctorSchedule is not a transactional entity")
	}
	ds.config.driver = _tx.drv
	return ds
}

// String implements the fmt.Stringer.
func (ds *DoctorSchedule) String() string {
	var builder strings.Builder
	builder.WriteString("DoctorSchedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ds.ID))
	builder.WriteString("date=")
	builder.WriteString(ds.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(ds.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(ds.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("available=")
	builder.WriteString(fmt.Sprintf("%v", ds.Available))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(ds.Notes)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ds.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DoctorSchedules is a parsable slice of DoctorSchedule.
type DoctorSchedules []*DoctorSchedule
