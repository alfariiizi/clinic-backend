// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinicuser"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// ClinicUserQuery is the builder for querying ClinicUser entities.
type ClinicUserQuery struct {
	config
	ctx        *QueryContext
	order      []clinicuser.OrderOption
	inters     []Interceptor
	predicates []predicate.ClinicUser
	withClinic *ClinicQuery
	withUser   *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClinicUserQuery builder.
func (cuq *ClinicUserQuery) Where(ps ...predicate.ClinicUser) *ClinicUserQuery {
	cuq.predicates = append(cuq.predicates, ps...)
	return cuq
}

// Limit the number of records to be returned by this query.
func (cuq *ClinicUserQuery) Limit(limit int) *ClinicUserQuery {
	cuq.ctx.Limit = &limit
	return cuq
}

// Offset to start from.
func (cuq *ClinicUserQuery) Offset(offset int) *ClinicUserQuery {
	cuq.ctx.Offset = &offset
	return cuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cuq *ClinicUserQuery) Unique(unique bool) *ClinicUserQuery {
	cuq.ctx.Unique = &unique
	return cuq
}

// Order specifies how the records should be ordered.
func (cuq *ClinicUserQuery) Order(o ...clinicuser.OrderOption) *ClinicUserQuery {
	cuq.order = append(cuq.order, o...)
	return cuq
}

// QueryClinic chains the current query on the "clinic" edge.
func (cuq *ClinicUserQuery) QueryClinic() *ClinicQuery {
	query := (&ClinicClient{config: cuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinicuser.Table, clinicuser.FieldID, selector),
			sqlgraph.To(clinic.Table, clinic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clinicuser.ClinicTable, clinicuser.ClinicColumn),
		)
		fromU = sqlgraph.SetNeighbors(cuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (cuq *ClinicUserQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: cuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinicuser.Table, clinicuser.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clinicuser.UserTable, clinicuser.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(cuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ClinicUser entity from the query.
// Returns a *NotFoundError when no ClinicUser was found.
func (cuq *ClinicUserQuery) First(ctx context.Context) (*ClinicUser, error) {
	nodes, err := cuq.Limit(1).All(setContextOp(ctx, cuq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{clinicuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cuq *ClinicUserQuery) FirstX(ctx context.Context) *ClinicUser {
	node, err := cuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ClinicUser ID from the query.
// Returns a *NotFoundError when no ClinicUser ID was found.
func (cuq *ClinicUserQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cuq.Limit(1).IDs(setContextOp(ctx, cuq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{clinicuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cuq *ClinicUserQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ClinicUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ClinicUser entity is found.
// Returns a *NotFoundError when no ClinicUser entities are found.
func (cuq *ClinicUserQuery) Only(ctx context.Context) (*ClinicUser, error) {
	nodes, err := cuq.Limit(2).All(setContextOp(ctx, cuq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{clinicuser.Label}
	default:
		return nil, &NotSingularError{clinicuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cuq *ClinicUserQuery) OnlyX(ctx context.Context) *ClinicUser {
	node, err := cuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ClinicUser ID in the query.
// Returns a *NotSingularError when more than one ClinicUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (cuq *ClinicUserQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cuq.Limit(2).IDs(setContextOp(ctx, cuq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{clinicuser.Label}
	default:
		err = &NotSingularError{clinicuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cuq *ClinicUserQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ClinicUsers.
func (cuq *ClinicUserQuery) All(ctx context.Context) ([]*ClinicUser, error) {
	ctx = setContextOp(ctx, cuq.ctx, ent.OpQueryAll)
	if err := cuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ClinicUser, *ClinicUserQuery]()
	return withInterceptors[[]*ClinicUser](ctx, cuq, qr, cuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cuq *ClinicUserQuery) AllX(ctx context.Context) []*ClinicUser {
	nodes, err := cuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ClinicUser IDs.
func (cuq *ClinicUserQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if cuq.ctx.Unique == nil && cuq.path != nil {
		cuq.Unique(true)
	}
	ctx = setContextOp(ctx, cuq.ctx, ent.OpQueryIDs)
	if err = cuq.Select(clinicuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cuq *ClinicUserQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cuq *ClinicUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cuq.ctx, ent.OpQueryCount)
	if err := cuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cuq, querierCount[*ClinicUserQuery](), cuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cuq *ClinicUserQuery) CountX(ctx context.Context) int {
	count, err := cuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cuq *ClinicUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cuq.ctx, ent.OpQueryExist)
	switch _, err := cuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cuq *ClinicUserQuery) ExistX(ctx context.Context) bool {
	exist, err := cuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClinicUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cuq *ClinicUserQuery) Clone() *ClinicUserQuery {
	if cuq == nil {
		return nil
	}
	return &ClinicUserQuery{
		config:     cuq.config,
		ctx:        cuq.ctx.Clone(),
		order:      append([]clinicuser.OrderOption{}, cuq.order...),
		inters:     append([]Interceptor{}, cuq.inters...),
		predicates: append([]predicate.ClinicUser{}, cuq.predicates...),
		withClinic: cuq.withClinic.Clone(),
		withUser:   cuq.withUser.Clone(),
		// clone intermediate query.
		sql:  cuq.sql.Clone(),
		path: cuq.path,
	}
}

// WithClinic tells the query-builder to eager-load the nodes that are connected to
// the "clinic" edge. The optional arguments are used to configure the query builder of the edge.
func (cuq *ClinicUserQuery) WithClinic(opts ...func(*ClinicQuery)) *ClinicUserQuery {
	query := (&ClinicClient{config: cuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cuq.withClinic = query
	return cuq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (cuq *ClinicUserQuery) WithUser(opts ...func(*UserQuery)) *ClinicUserQuery {
	query := (&UserClient{config: cuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cuq.withUser = query
	return cuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ClinicID uuid.UUID `json:"clinic_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ClinicUser.Query().
//		GroupBy(clinicuser.FieldClinicID).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (cuq *ClinicUserQuery) GroupBy(field string, fields ...string) *ClinicUserGroupBy {
	cuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClinicUserGroupBy{build: cuq}
	grbuild.flds = &cuq.ctx.Fields
	grbuild.label = clinicuser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ClinicID uuid.UUID `json:"clinic_id,omitempty"`
//	}
//
//	client.ClinicUser.Query().
//		Select(clinicuser.FieldClinicID).
//		Scan(ctx, &v)
func (cuq *ClinicUserQuery) Select(fields ...string) *ClinicUserSelect {
	cuq.ctx.Fields = append(cuq.ctx.Fields, fields...)
	sbuild := &ClinicUserSelect{ClinicUserQuery: cuq}
	sbuild.label = clinicuser.Label
	sbuild.flds, sbuild.scan = &cuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClinicUserSelect configured with the given aggregations.
func (cuq *ClinicUserQuery) Aggregate(fns ...AggregateFunc) *ClinicUserSelect {
	return cuq.Select().Aggregate(fns...)
}

func (cuq *ClinicUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cuq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cuq); err != nil {
				return err
			}
		}
	}
	for _, f := range cuq.ctx.Fields {
		if !clinicuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if cuq.path != nil {
		prev, err := cuq.path(ctx)
		if err != nil {
			return err
		}
		cuq.sql = prev
	}
	return nil
}

func (cuq *ClinicUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ClinicUser, error) {
	var (
		nodes       = []*ClinicUser{}
		_spec       = cuq.querySpec()
		loadedTypes = [2]bool{
			cuq.withClinic != nil,
			cuq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ClinicUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ClinicUser{config: cuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cuq.withClinic; query != nil {
		if err := cuq.loadClinic(ctx, query, nodes, nil,
			func(n *ClinicUser, e *Clinic) { n.Edges.Clinic = e }); err != nil {
			return nil, err
		}
	}
	if query := cuq.withUser; query != nil {
		if err := cuq.loadUser(ctx, query, nodes, nil,
			func(n *ClinicUser, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cuq *ClinicUserQuery) loadClinic(ctx context.Context, query *ClinicQuery, nodes []*ClinicUser, init func(*ClinicUser), assign func(*ClinicUser, *Clinic)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ClinicUser)
	for i := range nodes {
		fk := nodes[i].ClinicID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(clinic.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "clinic_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cuq *ClinicUserQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ClinicUser, init func(*ClinicUser), assign func(*ClinicUser, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ClinicUser)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cuq *ClinicUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cuq.querySpec()
	_spec.Node.Columns = cuq.ctx.Fields
	if len(cuq.ctx.Fields) > 0 {
		_spec.Unique = cuq.ctx.Unique != nil && *cuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cuq.driver, _spec)
}

func (cuq *ClinicUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(clinicuser.Table, clinicuser.Columns, sqlgraph.NewFieldSpec(clinicuser.FieldID, field.TypeUUID))
	_spec.From = cuq.sql
	if unique := cuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cuq.path != nil {
		_spec.Unique = true
	}
	if fields := cuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clinicuser.FieldID)
		for i := range fields {
			if fields[i] != clinicuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cuq.withClinic != nil {
			_spec.Node.AddColumnOnce(clinicuser.FieldClinicID)
		}
		if cuq.withUser != nil {
			_spec.Node.AddColumnOnce(clinicuser.FieldUserID)
		}
	}
	if ps := cuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cuq *ClinicUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cuq.driver.Dialect())
	t1 := builder.Table(clinicuser.Table)
	columns := cuq.ctx.Fields
	if len(columns) == 0 {
		columns = clinicuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cuq.sql != nil {
		selector = cuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cuq.ctx.Unique != nil && *cuq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cuq.predicates {
		p(selector)
	}
	for _, p := range cuq.order {
		p(selector)
	}
	if offset := cuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClinicUserGroupBy is the group-by builder for ClinicUser entities.
type ClinicUserGroupBy struct {
	selector
	build *ClinicUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cugb *ClinicUserGroupBy) Aggregate(fns ...AggregateFunc) *ClinicUserGroupBy {
	cugb.fns = append(cugb.fns, fns...)
	return cugb
}

// Scan applies the selector query and scans the result into the given value.
func (cugb *ClinicUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cugb.build.ctx, ent.OpQueryGroupBy)
	if err := cugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClinicUserQuery, *ClinicUserGroupBy](ctx, cugb.build, cugb, cugb.build.inters, v)
}

func (cugb *ClinicUserGroupBy) sqlScan(ctx context.Context, root *ClinicUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cugb.fns))
	for _, fn := range cugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cugb.flds)+len(cugb.fns))
		for _, f := range *cugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClinicUserSelect is the builder for selecting fields of ClinicUser entities.
type ClinicUserSelect struct {
	*ClinicUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cus *ClinicUserSelect) Aggregate(fns ...AggregateFunc) *ClinicUserSelect {
	cus.fns = append(cus.fns, fns...)
	return cus
}

// Scan applies the selector query and scans the result into the given value.
func (cus *ClinicUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cus.ctx, ent.OpQuerySelect)
	if err := cus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClinicUserQuery, *ClinicUserSelect](ctx, cus.ClinicUserQuery, cus, cus.inters, v)
}

func (cus *ClinicUserSelect) sqlScan(ctx context.Context, root *ClinicUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cus.fns))
	for _, fn := range cus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
