// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/google/uuid"
)

// Clinic is the model entity for the Clinic schema.
type Clinic struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// teeth, skincare, general, etc
	Type string `json:"type,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// BusinessHours holds the value of the "business_hours" field.
	BusinessHours map[string]interface{} `json:"business_hours,omitempty"`
	// WhatsappNumber holds the value of the "whatsapp_number" field.
	WhatsappNumber string `json:"whatsapp_number,omitempty"`
	// SubscriptionPlan holds the value of the "subscription_plan" field.
	SubscriptionPlan string `json:"subscription_plan,omitempty"`
	// array of enabled feature names
	EnabledFeatures []string `json:"enabled_features,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClinicQuery when eager-loading is set.
	Edges        ClinicEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClinicEdges holds the relations/edges for other nodes in the graph.
type ClinicEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Patients holds the value of the patients edge.
	Patients []*Patient `json:"patients,omitempty"`
	// Doctors holds the value of the doctors edge.
	Doctors []*Doctor `json:"doctors,omitempty"`
	// Services holds the value of the services edge.
	Services []*Service `json:"services,omitempty"`
	// Appointments holds the value of the appointments edge.
	Appointments []*Appointment `json:"appointments,omitempty"`
	// ChatThreads holds the value of the chat_threads edge.
	ChatThreads []*ChatThread `json:"chat_threads,omitempty"`
	// KnowledgeBase holds the value of the knowledge_base edge.
	KnowledgeBase []*KnowledgeBase `json:"knowledge_base,omitempty"`
	// BillingRecords holds the value of the billing_records edge.
	BillingRecords []*BillingRecord `json:"billing_records,omitempty"`
	// Documents holds the value of the documents edge.
	Documents []*Document `json:"documents,omitempty"`
	// Products holds the value of the products edge.
	Products []*Product `json:"products,omitempty"`
	// ProductCategories holds the value of the product_categories edge.
	ProductCategories []*ProductCategory `json:"product_categories,omitempty"`
	// InventoryMovements holds the value of the inventory_movements edge.
	InventoryMovements []*InventoryMovement `json:"inventory_movements,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// PatientsOrErr returns the Patients value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) PatientsOrErr() ([]*Patient, error) {
	if e.loadedTypes[1] {
		return e.Patients, nil
	}
	return nil, &NotLoadedError{edge: "patients"}
}

// DoctorsOrErr returns the Doctors value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) DoctorsOrErr() ([]*Doctor, error) {
	if e.loadedTypes[2] {
		return e.Doctors, nil
	}
	return nil, &NotLoadedError{edge: "doctors"}
}

// ServicesOrErr returns the Services value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) ServicesOrErr() ([]*Service, error) {
	if e.loadedTypes[3] {
		return e.Services, nil
	}
	return nil, &NotLoadedError{edge: "services"}
}

// AppointmentsOrErr returns the Appointments value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) AppointmentsOrErr() ([]*Appointment, error) {
	if e.loadedTypes[4] {
		return e.Appointments, nil
	}
	return nil, &NotLoadedError{edge: "appointments"}
}

// ChatThreadsOrErr returns the ChatThreads value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) ChatThreadsOrErr() ([]*ChatThread, error) {
	if e.loadedTypes[5] {
		return e.ChatThreads, nil
	}
	return nil, &NotLoadedError{edge: "chat_threads"}
}

// KnowledgeBaseOrErr returns the KnowledgeBase value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) KnowledgeBaseOrErr() ([]*KnowledgeBase, error) {
	if e.loadedTypes[6] {
		return e.KnowledgeBase, nil
	}
	return nil, &NotLoadedError{edge: "knowledge_base"}
}

// BillingRecordsOrErr returns the BillingRecords value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) BillingRecordsOrErr() ([]*BillingRecord, error) {
	if e.loadedTypes[7] {
		return e.BillingRecords, nil
	}
	return nil, &NotLoadedError{edge: "billing_records"}
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) DocumentsOrErr() ([]*Document, error) {
	if e.loadedTypes[8] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) ProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[9] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// ProductCategoriesOrErr returns the ProductCategories value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) ProductCategoriesOrErr() ([]*ProductCategory, error) {
	if e.loadedTypes[10] {
		return e.ProductCategories, nil
	}
	return nil, &NotLoadedError{edge: "product_categories"}
}

// InventoryMovementsOrErr returns the InventoryMovements value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) InventoryMovementsOrErr() ([]*InventoryMovement, error) {
	if e.loadedTypes[11] {
		return e.InventoryMovements, nil
	}
	return nil, &NotLoadedError{edge: "inventory_movements"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[12] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Clinic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clinic.FieldBusinessHours, clinic.FieldEnabledFeatures:
			values[i] = new([]byte)
		case clinic.FieldActive:
			values[i] = new(sql.NullBool)
		case clinic.FieldName, clinic.FieldType, clinic.FieldPhone, clinic.FieldEmail, clinic.FieldAddress, clinic.FieldWhatsappNumber, clinic.FieldSubscriptionPlan:
			values[i] = new(sql.NullString)
		case clinic.FieldCreatedAt, clinic.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case clinic.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Clinic fields.
func (c *Clinic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clinic.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case clinic.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case clinic.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case clinic.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				c.Phone = value.String
			}
		case clinic.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				c.Email = value.String
			}
		case clinic.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				c.Address = value.String
			}
		case clinic.FieldBusinessHours:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field business_hours", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.BusinessHours); err != nil {
					return fmt.Errorf("unmarshal field business_hours: %w", err)
				}
			}
		case clinic.FieldWhatsappNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whatsapp_number", values[i])
			} else if value.Valid {
				c.WhatsappNumber = value.String
			}
		case clinic.FieldSubscriptionPlan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_plan", values[i])
			} else if value.Valid {
				c.SubscriptionPlan = value.String
			}
		case clinic.FieldEnabledFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field enabled_features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.EnabledFeatures); err != nil {
					return fmt.Errorf("unmarshal field enabled_features: %w", err)
				}
			}
		case clinic.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				c.Active = value.Bool
			}
		case clinic.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case clinic.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Clinic.
// This includes values selected through modifiers, order, etc.
func (c *Clinic) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Clinic entity.
func (c *Clinic) QueryUsers() *UserQuery {
	return NewClinicClient(c.config).QueryUsers(c)
}

// QueryPatients queries the "patients" edge of the Clinic entity.
func (c *Clinic) QueryPatients() *PatientQuery {
	return NewClinicClient(c.config).QueryPatients(c)
}

// QueryDoctors queries the "doctors" edge of the Clinic entity.
func (c *Clinic) QueryDoctors() *DoctorQuery {
	return NewClinicClient(c.config).QueryDoctors(c)
}

// QueryServices queries the "services" edge of the Clinic entity.
func (c *Clinic) QueryServices() *ServiceQuery {
	return NewClinicClient(c.config).QueryServices(c)
}

// QueryAppointments queries the "appointments" edge of the Clinic entity.
func (c *Clinic) QueryAppointments() *AppointmentQuery {
	return NewClinicClient(c.config).QueryAppointments(c)
}

// QueryChatThreads queries the "chat_threads" edge of the Clinic entity.
func (c *Clinic) QueryChatThreads() *ChatThreadQuery {
	return NewClinicClient(c.config).QueryChatThreads(c)
}

// QueryKnowledgeBase queries the "knowledge_base" edge of the Clinic entity.
func (c *Clinic) QueryKnowledgeBase() *KnowledgeBaseQuery {
	return NewClinicClient(c.config).QueryKnowledgeBase(c)
}

// QueryBillingRecords queries the "billing_records" edge of the Clinic entity.
func (c *Clinic) QueryBillingRecords() *BillingRecordQuery {
	return NewClinicClient(c.config).QueryBillingRecords(c)
}

// QueryDocuments queries the "documents" edge of the Clinic entity.
func (c *Clinic) QueryDocuments() *DocumentQuery {
	return NewClinicClient(c.config).QueryDocuments(c)
}

// QueryProducts queries the "products" edge of the Clinic entity.
func (c *Clinic) QueryProducts() *ProductQuery {
	return NewClinicClient(c.config).QueryProducts(c)
}

// QueryProductCategories queries the "product_categories" edge of the Clinic entity.
func (c *Clinic) QueryProductCategories() *ProductCategoryQuery {
	return NewClinicClient(c.config).QueryProductCategories(c)
}

// QueryInventoryMovements queries the "inventory_movements" edge of the Clinic entity.
func (c *Clinic) QueryInventoryMovements() *InventoryMovementQuery {
	return NewClinicClient(c.config).QueryInventoryMovements(c)
}

// QueryOrders queries the "orders" edge of the Clinic entity.
func (c *Clinic) QueryOrders() *OrderQuery {
	return NewClinicClient(c.config).QueryOrders(c)
}

// Update returns a builder for updating this Clinic.
// Note that you need to call Clinic.Unwrap() before calling this method if this Clinic
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Clinic) Update() *ClinicUpdateOne {
	return NewClinicClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Clinic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Clinic) Unwrap() *Clinic {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("db: Clinic is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Clinic) String() string {
	var builder strings.Builder
	builder.WriteString("Clinic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(c.Type)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(c.Phone)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(c.Email)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(c.Address)
	builder.WriteString(", ")
	builder.WriteString("business_hours=")
	builder.WriteString(fmt.Sprintf("%v", c.BusinessHours))
	builder.WriteString(", ")
	builder.WriteString("whatsapp_number=")
	builder.WriteString(c.WhatsappNumber)
	builder.WriteString(", ")
	builder.WriteString("subscription_plan=")
	builder.WriteString(c.SubscriptionPlan)
	builder.WriteString(", ")
	builder.WriteString("enabled_features=")
	builder.WriteString(fmt.Sprintf("%v", c.EnabledFeatures))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", c.Active))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Clinics is a parsable slice of Clinic.
type Clinics []*Clinic
