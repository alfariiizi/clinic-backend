// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/inventorymovement"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/google/uuid"
)

// InventoryMovement is the model entity for the InventoryMovement schema.
type InventoryMovement struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type inventorymovement.Type `json:"type,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// order ID, adjustment ID, etc
	ReferenceID string `json:"reference_id,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// user who made the movement
	PerformedBy string `json:"performed_by,omitempty"`
	// MovementDate holds the value of the "movement_date" field.
	MovementDate time.Time `json:"movement_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InventoryMovementQuery when eager-loading is set.
	Edges                       InventoryMovementEdges `json:"edges"`
	clinic_inventory_movements  *uuid.UUID
	product_inventory_movements *uuid.UUID
	selectValues                sql.SelectValues
}

// InventoryMovementEdges holds the relations/edges for other nodes in the graph.
type InventoryMovementEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryMovementEdges) ClinicOrErr() (*Clinic, error) {
	if e.Clinic != nil {
		return e.Clinic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: clinic.Label}
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryMovementEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InventoryMovement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventorymovement.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case inventorymovement.FieldType, inventorymovement.FieldReferenceID, inventorymovement.FieldNotes, inventorymovement.FieldPerformedBy:
			values[i] = new(sql.NullString)
		case inventorymovement.FieldMovementDate, inventorymovement.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case inventorymovement.FieldID:
			values[i] = new(uuid.UUID)
		case inventorymovement.ForeignKeys[0]: // clinic_inventory_movements
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case inventorymovement.ForeignKeys[1]: // product_inventory_movements
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InventoryMovement fields.
func (im *InventoryMovement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inventorymovement.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				im.ID = *value
			}
		case inventorymovement.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				im.Type = inventorymovement.Type(value.String)
			}
		case inventorymovement.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				im.Quantity = int(value.Int64)
			}
		case inventorymovement.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				im.ReferenceID = value.String
			}
		case inventorymovement.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				im.Notes = value.String
			}
		case inventorymovement.FieldPerformedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field performed_by", values[i])
			} else if value.Valid {
				im.PerformedBy = value.String
			}
		case inventorymovement.FieldMovementDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field movement_date", values[i])
			} else if value.Valid {
				im.MovementDate = value.Time
			}
		case inventorymovement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				im.CreatedAt = value.Time
			}
		case inventorymovement.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_inventory_movements", values[i])
			} else if value.Valid {
				im.clinic_inventory_movements = new(uuid.UUID)
				*im.clinic_inventory_movements = *value.S.(*uuid.UUID)
			}
		case inventorymovement.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field product_inventory_movements", values[i])
			} else if value.Valid {
				im.product_inventory_movements = new(uuid.UUID)
				*im.product_inventory_movements = *value.S.(*uuid.UUID)
			}
		default:
			im.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InventoryMovement.
// This includes values selected through modifiers, order, etc.
func (im *InventoryMovement) Value(name string) (ent.Value, error) {
	return im.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the InventoryMovement entity.
func (im *InventoryMovement) QueryClinic() *ClinicQuery {
	return NewInventoryMovementClient(im.config).QueryClinic(im)
}

// QueryProduct queries the "product" edge of the InventoryMovement entity.
func (im *InventoryMovement) QueryProduct() *ProductQuery {
	return NewInventoryMovementClient(im.config).QueryProduct(im)
}

// Update returns a builder for updating this InventoryMovement.
// Note that you need to call InventoryMovement.Unwrap() before calling this method if this InventoryMovement
// was returned from a transaction, and the transaction was committed or rolled back.
func (im *InventoryMovement) Update() *InventoryMovementUpdateOne {
	return NewInventoryMovementClient(im.config).UpdateOne(im)
}

// Unwrap unwraps the InventoryMovement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (im *InventoryMovement) Unwrap() *InventoryMovement {
	_tx, ok := im.config.driver.(*txDriver)
	if !ok {
		panic("db: InventoryMovement is not a transactional entity")
	}
	im.config.driver = _tx.drv
	return im
}

// String implements the fmt.Stringer.
func (im *InventoryMovement) String() string {
	var builder strings.Builder
	builder.WriteString("InventoryMovement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", im.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", im.Type))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", im.Quantity))
	builder.WriteString(", ")
	builder.WriteString("reference_id=")
	builder.WriteString(im.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(im.Notes)
	builder.WriteString(", ")
	builder.WriteString("performed_by=")
	builder.WriteString(im.PerformedBy)
	builder.WriteString(", ")
	builder.WriteString("movement_date=")
	builder.WriteString(im.MovementDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(im.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// InventoryMovements is a parsable slice of InventoryMovement.
type InventoryMovements []*InventoryMovement
