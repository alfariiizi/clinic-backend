// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/billingrecord"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/google/uuid"
)

// BillingRecordCreate is the builder for creating a BillingRecord entity.
type BillingRecordCreate struct {
	config
	mutation *BillingRecordMutation
	hooks    []Hook
}

// SetInvoiceNumber sets the "invoice_number" field.
func (brc *BillingRecordCreate) SetInvoiceNumber(s string) *BillingRecordCreate {
	brc.mutation.SetInvoiceNumber(s)
	return brc
}

// SetAmount sets the "amount" field.
func (brc *BillingRecordCreate) SetAmount(f float64) *BillingRecordCreate {
	brc.mutation.SetAmount(f)
	return brc
}

// SetTaxAmount sets the "tax_amount" field.
func (brc *BillingRecordCreate) SetTaxAmount(f float64) *BillingRecordCreate {
	brc.mutation.SetTaxAmount(f)
	return brc
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillableTaxAmount(f *float64) *BillingRecordCreate {
	if f != nil {
		brc.SetTaxAmount(*f)
	}
	return brc
}

// SetDiscountAmount sets the "discount_amount" field.
func (brc *BillingRecordCreate) SetDiscountAmount(f float64) *BillingRecordCreate {
	brc.mutation.SetDiscountAmount(f)
	return brc
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillableDiscountAmount(f *float64) *BillingRecordCreate {
	if f != nil {
		brc.SetDiscountAmount(*f)
	}
	return brc
}

// SetTotalAmount sets the "total_amount" field.
func (brc *BillingRecordCreate) SetTotalAmount(f float64) *BillingRecordCreate {
	brc.mutation.SetTotalAmount(f)
	return brc
}

// SetCurrency sets the "currency" field.
func (brc *BillingRecordCreate) SetCurrency(s string) *BillingRecordCreate {
	brc.mutation.SetCurrency(s)
	return brc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillableCurrency(s *string) *BillingRecordCreate {
	if s != nil {
		brc.SetCurrency(*s)
	}
	return brc
}

// SetPaymentMethod sets the "payment_method" field.
func (brc *BillingRecordCreate) SetPaymentMethod(bm billingrecord.PaymentMethod) *BillingRecordCreate {
	brc.mutation.SetPaymentMethod(bm)
	return brc
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillablePaymentMethod(bm *billingrecord.PaymentMethod) *BillingRecordCreate {
	if bm != nil {
		brc.SetPaymentMethod(*bm)
	}
	return brc
}

// SetPaymentStatus sets the "payment_status" field.
func (brc *BillingRecordCreate) SetPaymentStatus(bs billingrecord.PaymentStatus) *BillingRecordCreate {
	brc.mutation.SetPaymentStatus(bs)
	return brc
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillablePaymentStatus(bs *billingrecord.PaymentStatus) *BillingRecordCreate {
	if bs != nil {
		brc.SetPaymentStatus(*bs)
	}
	return brc
}

// SetLineItems sets the "line_items" field.
func (brc *BillingRecordCreate) SetLineItems(m []map[string]interface{}) *BillingRecordCreate {
	brc.mutation.SetLineItems(m)
	return brc
}

// SetDueDate sets the "due_date" field.
func (brc *BillingRecordCreate) SetDueDate(t time.Time) *BillingRecordCreate {
	brc.mutation.SetDueDate(t)
	return brc
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillableDueDate(t *time.Time) *BillingRecordCreate {
	if t != nil {
		brc.SetDueDate(*t)
	}
	return brc
}

// SetPaidAt sets the "paid_at" field.
func (brc *BillingRecordCreate) SetPaidAt(t time.Time) *BillingRecordCreate {
	brc.mutation.SetPaidAt(t)
	return brc
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillablePaidAt(t *time.Time) *BillingRecordCreate {
	if t != nil {
		brc.SetPaidAt(*t)
	}
	return brc
}

// SetNotes sets the "notes" field.
func (brc *BillingRecordCreate) SetNotes(s string) *BillingRecordCreate {
	brc.mutation.SetNotes(s)
	return brc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillableNotes(s *string) *BillingRecordCreate {
	if s != nil {
		brc.SetNotes(*s)
	}
	return brc
}

// SetCreatedAt sets the "created_at" field.
func (brc *BillingRecordCreate) SetCreatedAt(t time.Time) *BillingRecordCreate {
	brc.mutation.SetCreatedAt(t)
	return brc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillableCreatedAt(t *time.Time) *BillingRecordCreate {
	if t != nil {
		brc.SetCreatedAt(*t)
	}
	return brc
}

// SetUpdatedAt sets the "updated_at" field.
func (brc *BillingRecordCreate) SetUpdatedAt(t time.Time) *BillingRecordCreate {
	brc.mutation.SetUpdatedAt(t)
	return brc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillableUpdatedAt(t *time.Time) *BillingRecordCreate {
	if t != nil {
		brc.SetUpdatedAt(*t)
	}
	return brc
}

// SetID sets the "id" field.
func (brc *BillingRecordCreate) SetID(u uuid.UUID) *BillingRecordCreate {
	brc.mutation.SetID(u)
	return brc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (brc *BillingRecordCreate) SetNillableID(u *uuid.UUID) *BillingRecordCreate {
	if u != nil {
		brc.SetID(*u)
	}
	return brc
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (brc *BillingRecordCreate) SetClinicID(id uuid.UUID) *BillingRecordCreate {
	brc.mutation.SetClinicID(id)
	return brc
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (brc *BillingRecordCreate) SetNillableClinicID(id *uuid.UUID) *BillingRecordCreate {
	if id != nil {
		brc = brc.SetClinicID(*id)
	}
	return brc
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (brc *BillingRecordCreate) SetClinic(c *Clinic) *BillingRecordCreate {
	return brc.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (brc *BillingRecordCreate) SetPatientID(id uuid.UUID) *BillingRecordCreate {
	brc.mutation.SetPatientID(id)
	return brc
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (brc *BillingRecordCreate) SetNillablePatientID(id *uuid.UUID) *BillingRecordCreate {
	if id != nil {
		brc = brc.SetPatientID(*id)
	}
	return brc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (brc *BillingRecordCreate) SetPatient(p *Patient) *BillingRecordCreate {
	return brc.SetPatientID(p.ID)
}

// Mutation returns the BillingRecordMutation object of the builder.
func (brc *BillingRecordCreate) Mutation() *BillingRecordMutation {
	return brc.mutation
}

// Save creates the BillingRecord in the database.
func (brc *BillingRecordCreate) Save(ctx context.Context) (*BillingRecord, error) {
	brc.defaults()
	return withHooks(ctx, brc.sqlSave, brc.mutation, brc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BillingRecordCreate) SaveX(ctx context.Context) *BillingRecord {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BillingRecordCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BillingRecordCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (brc *BillingRecordCreate) defaults() {
	if _, ok := brc.mutation.TaxAmount(); !ok {
		v := billingrecord.DefaultTaxAmount
		brc.mutation.SetTaxAmount(v)
	}
	if _, ok := brc.mutation.DiscountAmount(); !ok {
		v := billingrecord.DefaultDiscountAmount
		brc.mutation.SetDiscountAmount(v)
	}
	if _, ok := brc.mutation.Currency(); !ok {
		v := billingrecord.DefaultCurrency
		brc.mutation.SetCurrency(v)
	}
	if _, ok := brc.mutation.PaymentStatus(); !ok {
		v := billingrecord.DefaultPaymentStatus
		brc.mutation.SetPaymentStatus(v)
	}
	if _, ok := brc.mutation.CreatedAt(); !ok {
		v := billingrecord.DefaultCreatedAt()
		brc.mutation.SetCreatedAt(v)
	}
	if _, ok := brc.mutation.UpdatedAt(); !ok {
		v := billingrecord.DefaultUpdatedAt()
		brc.mutation.SetUpdatedAt(v)
	}
	if _, ok := brc.mutation.ID(); !ok {
		v := billingrecord.DefaultID()
		brc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BillingRecordCreate) check() error {
	if _, ok := brc.mutation.InvoiceNumber(); !ok {
		return &ValidationError{Name: "invoice_number", err: errors.New(`db: missing required field "BillingRecord.invoice_number"`)}
	}
	if _, ok := brc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`db: missing required field "BillingRecord.amount"`)}
	}
	if _, ok := brc.mutation.TaxAmount(); !ok {
		return &ValidationError{Name: "tax_amount", err: errors.New(`db: missing required field "BillingRecord.tax_amount"`)}
	}
	if _, ok := brc.mutation.DiscountAmount(); !ok {
		return &ValidationError{Name: "discount_amount", err: errors.New(`db: missing required field "BillingRecord.discount_amount"`)}
	}
	if _, ok := brc.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`db: missing required field "BillingRecord.total_amount"`)}
	}
	if _, ok := brc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "BillingRecord.currency"`)}
	}
	if v, ok := brc.mutation.PaymentMethod(); ok {
		if err := billingrecord.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`db: validator failed for field "BillingRecord.payment_method": %w`, err)}
		}
	}
	if _, ok := brc.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`db: missing required field "BillingRecord.payment_status"`)}
	}
	if v, ok := brc.mutation.PaymentStatus(); ok {
		if err := billingrecord.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`db: validator failed for field "BillingRecord.payment_status": %w`, err)}
		}
	}
	if _, ok := brc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingRecord.created_at"`)}
	}
	if _, ok := brc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingRecord.updated_at"`)}
	}
	return nil
}

func (brc *BillingRecordCreate) sqlSave(ctx context.Context) (*BillingRecord, error) {
	if err := brc.check(); err != nil {
		return nil, err
	}
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	brc.mutation.id = &_node.ID
	brc.mutation.done = true
	return _node, nil
}

func (brc *BillingRecordCreate) createSpec() (*BillingRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingRecord{config: brc.config}
		_spec = sqlgraph.NewCreateSpec(billingrecord.Table, sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID))
	)
	if id, ok := brc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := brc.mutation.InvoiceNumber(); ok {
		_spec.SetField(billingrecord.FieldInvoiceNumber, field.TypeString, value)
		_node.InvoiceNumber = value
	}
	if value, ok := brc.mutation.Amount(); ok {
		_spec.SetField(billingrecord.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := brc.mutation.TaxAmount(); ok {
		_spec.SetField(billingrecord.FieldTaxAmount, field.TypeFloat64, value)
		_node.TaxAmount = value
	}
	if value, ok := brc.mutation.DiscountAmount(); ok {
		_spec.SetField(billingrecord.FieldDiscountAmount, field.TypeFloat64, value)
		_node.DiscountAmount = value
	}
	if value, ok := brc.mutation.TotalAmount(); ok {
		_spec.SetField(billingrecord.FieldTotalAmount, field.TypeFloat64, value)
		_node.TotalAmount = value
	}
	if value, ok := brc.mutation.Currency(); ok {
		_spec.SetField(billingrecord.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := brc.mutation.PaymentMethod(); ok {
		_spec.SetField(billingrecord.FieldPaymentMethod, field.TypeEnum, value)
		_node.PaymentMethod = value
	}
	if value, ok := brc.mutation.PaymentStatus(); ok {
		_spec.SetField(billingrecord.FieldPaymentStatus, field.TypeEnum, value)
		_node.PaymentStatus = value
	}
	if value, ok := brc.mutation.LineItems(); ok {
		_spec.SetField(billingrecord.FieldLineItems, field.TypeJSON, value)
		_node.LineItems = value
	}
	if value, ok := brc.mutation.DueDate(); ok {
		_spec.SetField(billingrecord.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := brc.mutation.PaidAt(); ok {
		_spec.SetField(billingrecord.FieldPaidAt, field.TypeTime, value)
		_node.PaidAt = value
	}
	if value, ok := brc.mutation.Notes(); ok {
		_spec.SetField(billingrecord.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := brc.mutation.CreatedAt(); ok {
		_spec.SetField(billingrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := brc.mutation.UpdatedAt(); ok {
		_spec.SetField(billingrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := brc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.ClinicTable,
			Columns: []string{billingrecord.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clinic_billing_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := brc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.PatientTable,
			Columns: []string{billingrecord.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.patient_billing_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BillingRecordCreateBulk is the builder for creating many BillingRecord entities in bulk.
type BillingRecordCreateBulk struct {
	config
	err      error
	builders []*BillingRecordCreate
}

// Save creates the BillingRecord entities in the database.
func (brcb *BillingRecordCreateBulk) Save(ctx context.Context) ([]*BillingRecord, error) {
	if brcb.err != nil {
		return nil, brcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BillingRecord, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BillingRecordCreateBulk) SaveX(ctx context.Context) []*BillingRecord {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BillingRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BillingRecordCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}
