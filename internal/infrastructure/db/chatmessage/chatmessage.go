// Code generated by ent, DO NOT EDIT.

package chatmessage

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the chatmessage type in the database.
	Label = "chat_message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWhatsappMessageID holds the string denoting the whatsapp_message_id field in the database.
	FieldWhatsappMessageID = "whatsapp_message_id"
	// FieldSenderType holds the string denoting the sender_type field in the database.
	FieldSenderType = "sender_type"
	// FieldMessageType holds the string denoting the message_type field in the database.
	FieldMessageType = "message_type"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldAiToolCall holds the string denoting the ai_tool_call field in the database.
	FieldAiToolCall = "ai_tool_call"
	// FieldAiToolResult holds the string denoting the ai_tool_result field in the database.
	FieldAiToolResult = "ai_tool_result"
	// FieldIsRead holds the string denoting the is_read field in the database.
	FieldIsRead = "is_read"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeThread holds the string denoting the thread edge name in mutations.
	EdgeThread = "thread"
	// Table holds the table name of the chatmessage in the database.
	Table = "chat_messages"
	// ThreadTable is the table that holds the thread relation/edge.
	ThreadTable = "chat_messages"
	// ThreadInverseTable is the table name for the ChatThread entity.
	// It exists in this package in order to avoid circular dependency with the "chatthread" package.
	ThreadInverseTable = "chat_threads"
	// ThreadColumn is the table column denoting the thread relation/edge.
	ThreadColumn = "chat_thread_messages"
)

// Columns holds all SQL columns for chatmessage fields.
var Columns = []string{
	FieldID,
	FieldWhatsappMessageID,
	FieldSenderType,
	FieldMessageType,
	FieldContent,
	FieldMetadata,
	FieldAiToolCall,
	FieldAiToolResult,
	FieldIsRead,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chat_messages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"chat_thread_messages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsRead holds the default value on creation for the "is_read" field.
	DefaultIsRead bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// SenderType defines the type for the "sender_type" enum field.
type SenderType string

// SenderType values.
const (
	SenderTypePATIENT SenderType = "PATIENT"
	SenderTypeAI      SenderType = "AI"
	SenderTypeSTAFF   SenderType = "STAFF"
	SenderTypeDOCTOR  SenderType = "DOCTOR"
)

func (st SenderType) String() string {
	return string(st)
}

// SenderTypeValidator is a validator for the "sender_type" field enum values. It is called by the builders before save.
func SenderTypeValidator(st SenderType) error {
	switch st {
	case SenderTypePATIENT, SenderTypeAI, SenderTypeSTAFF, SenderTypeDOCTOR:
		return nil
	default:
		return fmt.Errorf("chatmessage: invalid enum value for sender_type field: %q", st)
	}
}

// MessageType defines the type for the "message_type" enum field.
type MessageType string

// MessageTypeTEXT is the default value of the MessageType enum.
const DefaultMessageType = MessageTypeTEXT

// MessageType values.
const (
	MessageTypeTEXT     MessageType = "TEXT"
	MessageTypeIMAGE    MessageType = "IMAGE"
	MessageTypeDOCUMENT MessageType = "DOCUMENT"
	MessageTypeAUDIO    MessageType = "AUDIO"
	MessageTypeLOCATION MessageType = "LOCATION"
)

func (mt MessageType) String() string {
	return string(mt)
}

// MessageTypeValidator is a validator for the "message_type" field enum values. It is called by the builders before save.
func MessageTypeValidator(mt MessageType) error {
	switch mt {
	case MessageTypeTEXT, MessageTypeIMAGE, MessageTypeDOCUMENT, MessageTypeAUDIO, MessageTypeLOCATION:
		return nil
	default:
		return fmt.Errorf("chatmessage: invalid enum value for message_type field: %q", mt)
	}
}

// OrderOption defines the ordering options for the ChatMessage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWhatsappMessageID orders the results by the whatsapp_message_id field.
func ByWhatsappMessageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhatsappMessageID, opts...).ToFunc()
}

// BySenderType orders the results by the sender_type field.
func BySenderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSenderType, opts...).ToFunc()
}

// ByMessageType orders the results by the message_type field.
func ByMessageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageType, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByAiToolCall orders the results by the ai_tool_call field.
func ByAiToolCall(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAiToolCall, opts...).ToFunc()
}

// ByIsRead orders the results by the is_read field.
func ByIsRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRead, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByThreadField orders the results by thread field.
func ByThreadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newThreadStep(), sql.OrderByField(field, opts...))
	}
}
func newThreadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ThreadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ThreadTable, ThreadColumn),
	)
}
