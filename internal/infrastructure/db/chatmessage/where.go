// Code generated by ent, DO NOT EDIT.

package chatmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldID, id))
}

// WhatsappMessageID applies equality check predicate on the "whatsapp_message_id" field. It's identical to WhatsappMessageIDEQ.
func WhatsappMessageID(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldWhatsappMessageID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldContent, v))
}

// AiToolCall applies equality check predicate on the "ai_tool_call" field. It's identical to AiToolCallEQ.
func AiToolCall(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldAiToolCall, v))
}

// IsRead applies equality check predicate on the "is_read" field. It's identical to IsReadEQ.
func IsRead(v bool) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldIsRead, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// WhatsappMessageIDEQ applies the EQ predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDNEQ applies the NEQ predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDNEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDIn applies the In predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldWhatsappMessageID, vs...))
}

// WhatsappMessageIDNotIn applies the NotIn predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDNotIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldWhatsappMessageID, vs...))
}

// WhatsappMessageIDGT applies the GT predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDGT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDGTE applies the GTE predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDGTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDLT applies the LT predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDLT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDLTE applies the LTE predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDLTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDContains applies the Contains predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDContains(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContains(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDHasPrefix applies the HasPrefix predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDHasPrefix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasPrefix(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDHasSuffix applies the HasSuffix predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDHasSuffix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasSuffix(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDIsNil applies the IsNil predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDIsNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIsNull(FieldWhatsappMessageID))
}

// WhatsappMessageIDNotNil applies the NotNil predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDNotNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotNull(FieldWhatsappMessageID))
}

// WhatsappMessageIDEqualFold applies the EqualFold predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDEqualFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEqualFold(FieldWhatsappMessageID, v))
}

// WhatsappMessageIDContainsFold applies the ContainsFold predicate on the "whatsapp_message_id" field.
func WhatsappMessageIDContainsFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContainsFold(FieldWhatsappMessageID, v))
}

// SenderTypeEQ applies the EQ predicate on the "sender_type" field.
func SenderTypeEQ(v SenderType) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldSenderType, v))
}

// SenderTypeNEQ applies the NEQ predicate on the "sender_type" field.
func SenderTypeNEQ(v SenderType) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldSenderType, v))
}

// SenderTypeIn applies the In predicate on the "sender_type" field.
func SenderTypeIn(vs ...SenderType) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldSenderType, vs...))
}

// SenderTypeNotIn applies the NotIn predicate on the "sender_type" field.
func SenderTypeNotIn(vs ...SenderType) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldSenderType, vs...))
}

// MessageTypeEQ applies the EQ predicate on the "message_type" field.
func MessageTypeEQ(v MessageType) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldMessageType, v))
}

// MessageTypeNEQ applies the NEQ predicate on the "message_type" field.
func MessageTypeNEQ(v MessageType) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldMessageType, v))
}

// MessageTypeIn applies the In predicate on the "message_type" field.
func MessageTypeIn(vs ...MessageType) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldMessageType, vs...))
}

// MessageTypeNotIn applies the NotIn predicate on the "message_type" field.
func MessageTypeNotIn(vs ...MessageType) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldMessageType, vs...))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContainsFold(FieldContent, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotNull(FieldMetadata))
}

// AiToolCallEQ applies the EQ predicate on the "ai_tool_call" field.
func AiToolCallEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldAiToolCall, v))
}

// AiToolCallNEQ applies the NEQ predicate on the "ai_tool_call" field.
func AiToolCallNEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldAiToolCall, v))
}

// AiToolCallIn applies the In predicate on the "ai_tool_call" field.
func AiToolCallIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldAiToolCall, vs...))
}

// AiToolCallNotIn applies the NotIn predicate on the "ai_tool_call" field.
func AiToolCallNotIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldAiToolCall, vs...))
}

// AiToolCallGT applies the GT predicate on the "ai_tool_call" field.
func AiToolCallGT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldAiToolCall, v))
}

// AiToolCallGTE applies the GTE predicate on the "ai_tool_call" field.
func AiToolCallGTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldAiToolCall, v))
}

// AiToolCallLT applies the LT predicate on the "ai_tool_call" field.
func AiToolCallLT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldAiToolCall, v))
}

// AiToolCallLTE applies the LTE predicate on the "ai_tool_call" field.
func AiToolCallLTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldAiToolCall, v))
}

// AiToolCallContains applies the Contains predicate on the "ai_tool_call" field.
func AiToolCallContains(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContains(FieldAiToolCall, v))
}

// AiToolCallHasPrefix applies the HasPrefix predicate on the "ai_tool_call" field.
func AiToolCallHasPrefix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasPrefix(FieldAiToolCall, v))
}

// AiToolCallHasSuffix applies the HasSuffix predicate on the "ai_tool_call" field.
func AiToolCallHasSuffix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasSuffix(FieldAiToolCall, v))
}

// AiToolCallIsNil applies the IsNil predicate on the "ai_tool_call" field.
func AiToolCallIsNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIsNull(FieldAiToolCall))
}

// AiToolCallNotNil applies the NotNil predicate on the "ai_tool_call" field.
func AiToolCallNotNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotNull(FieldAiToolCall))
}

// AiToolCallEqualFold applies the EqualFold predicate on the "ai_tool_call" field.
func AiToolCallEqualFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEqualFold(FieldAiToolCall, v))
}

// AiToolCallContainsFold applies the ContainsFold predicate on the "ai_tool_call" field.
func AiToolCallContainsFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContainsFold(FieldAiToolCall, v))
}

// AiToolResultIsNil applies the IsNil predicate on the "ai_tool_result" field.
func AiToolResultIsNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIsNull(FieldAiToolResult))
}

// AiToolResultNotNil applies the NotNil predicate on the "ai_tool_result" field.
func AiToolResultNotNil() predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotNull(FieldAiToolResult))
}

// IsReadEQ applies the EQ predicate on the "is_read" field.
func IsReadEQ(v bool) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldIsRead, v))
}

// IsReadNEQ applies the NEQ predicate on the "is_read" field.
func IsReadNEQ(v bool) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldIsRead, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldCreatedAt, v))
}

// HasThread applies the HasEdge predicate on the "thread" edge.
func HasThread() predicate.ChatMessage {
	return predicate.ChatMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ThreadTable, ThreadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThreadWith applies the HasEdge predicate on the "thread" edge with a given conditions (other predicates).
func HasThreadWith(preds ...predicate.ChatThread) predicate.ChatMessage {
	return predicate.ChatMessage(func(s *sql.Selector) {
		step := newThreadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatMessage) predicate.ChatMessage {
	return predicate.ChatMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatMessage) predicate.ChatMessage {
	return predicate.ChatMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatMessage) predicate.ChatMessage {
	return predicate.ChatMessage(sql.NotPredicates(p))
}
