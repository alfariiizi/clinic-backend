// Code generated by ent, DO NOT EDIT.

package appointment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldID, id))
}

// AppointmentDate applies equality check predicate on the "appointment_date" field. It's identical to AppointmentDateEQ.
func AppointmentDate(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldAppointmentDate, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldEndTime, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldNotes, v))
}

// Symptoms applies equality check predicate on the "symptoms" field. It's identical to SymptomsEQ.
func Symptoms(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldSymptoms, v))
}

// Diagnosis applies equality check predicate on the "diagnosis" field. It's identical to DiagnosisEQ.
func Diagnosis(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldDiagnosis, v))
}

// TreatmentPlan applies equality check predicate on the "treatment_plan" field. It's identical to TreatmentPlanEQ.
func TreatmentPlan(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldTreatmentPlan, v))
}

// TotalCost applies equality check predicate on the "total_cost" field. It's identical to TotalCostEQ.
func TotalCost(v float64) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldTotalCost, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldUpdatedAt, v))
}

// AppointmentDateEQ applies the EQ predicate on the "appointment_date" field.
func AppointmentDateEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldAppointmentDate, v))
}

// AppointmentDateNEQ applies the NEQ predicate on the "appointment_date" field.
func AppointmentDateNEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldAppointmentDate, v))
}

// AppointmentDateIn applies the In predicate on the "appointment_date" field.
func AppointmentDateIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldAppointmentDate, vs...))
}

// AppointmentDateNotIn applies the NotIn predicate on the "appointment_date" field.
func AppointmentDateNotIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldAppointmentDate, vs...))
}

// AppointmentDateGT applies the GT predicate on the "appointment_date" field.
func AppointmentDateGT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldAppointmentDate, v))
}

// AppointmentDateGTE applies the GTE predicate on the "appointment_date" field.
func AppointmentDateGTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldAppointmentDate, v))
}

// AppointmentDateLT applies the LT predicate on the "appointment_date" field.
func AppointmentDateLT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldAppointmentDate, v))
}

// AppointmentDateLTE applies the LTE predicate on the "appointment_date" field.
func AppointmentDateLTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldAppointmentDate, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldEndTime, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldStatus, vs...))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldNotes, v))
}

// SymptomsEQ applies the EQ predicate on the "symptoms" field.
func SymptomsEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldSymptoms, v))
}

// SymptomsNEQ applies the NEQ predicate on the "symptoms" field.
func SymptomsNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldSymptoms, v))
}

// SymptomsIn applies the In predicate on the "symptoms" field.
func SymptomsIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldSymptoms, vs...))
}

// SymptomsNotIn applies the NotIn predicate on the "symptoms" field.
func SymptomsNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldSymptoms, vs...))
}

// SymptomsGT applies the GT predicate on the "symptoms" field.
func SymptomsGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldSymptoms, v))
}

// SymptomsGTE applies the GTE predicate on the "symptoms" field.
func SymptomsGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldSymptoms, v))
}

// SymptomsLT applies the LT predicate on the "symptoms" field.
func SymptomsLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldSymptoms, v))
}

// SymptomsLTE applies the LTE predicate on the "symptoms" field.
func SymptomsLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldSymptoms, v))
}

// SymptomsContains applies the Contains predicate on the "symptoms" field.
func SymptomsContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldSymptoms, v))
}

// SymptomsHasPrefix applies the HasPrefix predicate on the "symptoms" field.
func SymptomsHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldSymptoms, v))
}

// SymptomsHasSuffix applies the HasSuffix predicate on the "symptoms" field.
func SymptomsHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldSymptoms, v))
}

// SymptomsIsNil applies the IsNil predicate on the "symptoms" field.
func SymptomsIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldSymptoms))
}

// SymptomsNotNil applies the NotNil predicate on the "symptoms" field.
func SymptomsNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldSymptoms))
}

// SymptomsEqualFold applies the EqualFold predicate on the "symptoms" field.
func SymptomsEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldSymptoms, v))
}

// SymptomsContainsFold applies the ContainsFold predicate on the "symptoms" field.
func SymptomsContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldSymptoms, v))
}

// DiagnosisEQ applies the EQ predicate on the "diagnosis" field.
func DiagnosisEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldDiagnosis, v))
}

// DiagnosisNEQ applies the NEQ predicate on the "diagnosis" field.
func DiagnosisNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldDiagnosis, v))
}

// DiagnosisIn applies the In predicate on the "diagnosis" field.
func DiagnosisIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldDiagnosis, vs...))
}

// DiagnosisNotIn applies the NotIn predicate on the "diagnosis" field.
func DiagnosisNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldDiagnosis, vs...))
}

// DiagnosisGT applies the GT predicate on the "diagnosis" field.
func DiagnosisGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldDiagnosis, v))
}

// DiagnosisGTE applies the GTE predicate on the "diagnosis" field.
func DiagnosisGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldDiagnosis, v))
}

// DiagnosisLT applies the LT predicate on the "diagnosis" field.
func DiagnosisLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldDiagnosis, v))
}

// DiagnosisLTE applies the LTE predicate on the "diagnosis" field.
func DiagnosisLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldDiagnosis, v))
}

// DiagnosisContains applies the Contains predicate on the "diagnosis" field.
func DiagnosisContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldDiagnosis, v))
}

// DiagnosisHasPrefix applies the HasPrefix predicate on the "diagnosis" field.
func DiagnosisHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldDiagnosis, v))
}

// DiagnosisHasSuffix applies the HasSuffix predicate on the "diagnosis" field.
func DiagnosisHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldDiagnosis, v))
}

// DiagnosisIsNil applies the IsNil predicate on the "diagnosis" field.
func DiagnosisIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldDiagnosis))
}

// DiagnosisNotNil applies the NotNil predicate on the "diagnosis" field.
func DiagnosisNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldDiagnosis))
}

// DiagnosisEqualFold applies the EqualFold predicate on the "diagnosis" field.
func DiagnosisEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldDiagnosis, v))
}

// DiagnosisContainsFold applies the ContainsFold predicate on the "diagnosis" field.
func DiagnosisContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldDiagnosis, v))
}

// TreatmentPlanEQ applies the EQ predicate on the "treatment_plan" field.
func TreatmentPlanEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldTreatmentPlan, v))
}

// TreatmentPlanNEQ applies the NEQ predicate on the "treatment_plan" field.
func TreatmentPlanNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldTreatmentPlan, v))
}

// TreatmentPlanIn applies the In predicate on the "treatment_plan" field.
func TreatmentPlanIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldTreatmentPlan, vs...))
}

// TreatmentPlanNotIn applies the NotIn predicate on the "treatment_plan" field.
func TreatmentPlanNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldTreatmentPlan, vs...))
}

// TreatmentPlanGT applies the GT predicate on the "treatment_plan" field.
func TreatmentPlanGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldTreatmentPlan, v))
}

// TreatmentPlanGTE applies the GTE predicate on the "treatment_plan" field.
func TreatmentPlanGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldTreatmentPlan, v))
}

// TreatmentPlanLT applies the LT predicate on the "treatment_plan" field.
func TreatmentPlanLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldTreatmentPlan, v))
}

// TreatmentPlanLTE applies the LTE predicate on the "treatment_plan" field.
func TreatmentPlanLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldTreatmentPlan, v))
}

// TreatmentPlanContains applies the Contains predicate on the "treatment_plan" field.
func TreatmentPlanContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldTreatmentPlan, v))
}

// TreatmentPlanHasPrefix applies the HasPrefix predicate on the "treatment_plan" field.
func TreatmentPlanHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldTreatmentPlan, v))
}

// TreatmentPlanHasSuffix applies the HasSuffix predicate on the "treatment_plan" field.
func TreatmentPlanHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldTreatmentPlan, v))
}

// TreatmentPlanIsNil applies the IsNil predicate on the "treatment_plan" field.
func TreatmentPlanIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldTreatmentPlan))
}

// TreatmentPlanNotNil applies the NotNil predicate on the "treatment_plan" field.
func TreatmentPlanNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldTreatmentPlan))
}

// TreatmentPlanEqualFold applies the EqualFold predicate on the "treatment_plan" field.
func TreatmentPlanEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldTreatmentPlan, v))
}

// TreatmentPlanContainsFold applies the ContainsFold predicate on the "treatment_plan" field.
func TreatmentPlanContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldTreatmentPlan, v))
}

// PrescriptionsIsNil applies the IsNil predicate on the "prescriptions" field.
func PrescriptionsIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldPrescriptions))
}

// PrescriptionsNotNil applies the NotNil predicate on the "prescriptions" field.
func PrescriptionsNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldPrescriptions))
}

// TotalCostEQ applies the EQ predicate on the "total_cost" field.
func TotalCostEQ(v float64) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldTotalCost, v))
}

// TotalCostNEQ applies the NEQ predicate on the "total_cost" field.
func TotalCostNEQ(v float64) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldTotalCost, v))
}

// TotalCostIn applies the In predicate on the "total_cost" field.
func TotalCostIn(vs ...float64) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldTotalCost, vs...))
}

// TotalCostNotIn applies the NotIn predicate on the "total_cost" field.
func TotalCostNotIn(vs ...float64) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldTotalCost, vs...))
}

// TotalCostGT applies the GT predicate on the "total_cost" field.
func TotalCostGT(v float64) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldTotalCost, v))
}

// TotalCostGTE applies the GTE predicate on the "total_cost" field.
func TotalCostGTE(v float64) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldTotalCost, v))
}

// TotalCostLT applies the LT predicate on the "total_cost" field.
func TotalCostLT(v float64) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldTotalCost, v))
}

// TotalCostLTE applies the LTE predicate on the "total_cost" field.
func TotalCostLTE(v float64) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldTotalCost, v))
}

// TotalCostIsNil applies the IsNil predicate on the "total_cost" field.
func TotalCostIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldTotalCost))
}

// TotalCostNotNil applies the NotNil predicate on the "total_cost" field.
func TotalCostNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldTotalCost))
}

// PaymentStatusEQ applies the EQ predicate on the "payment_status" field.
func PaymentStatusEQ(v PaymentStatus) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldPaymentStatus, v))
}

// PaymentStatusNEQ applies the NEQ predicate on the "payment_status" field.
func PaymentStatusNEQ(v PaymentStatus) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldPaymentStatus, v))
}

// PaymentStatusIn applies the In predicate on the "payment_status" field.
func PaymentStatusIn(vs ...PaymentStatus) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldPaymentStatus, vs...))
}

// PaymentStatusNotIn applies the NotIn predicate on the "payment_status" field.
func PaymentStatusNotIn(vs ...PaymentStatus) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldPaymentStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.Doctor) predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := newDoctorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReminders applies the HasEdge predicate on the "reminders" edge.
func HasReminders() predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RemindersTable, RemindersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRemindersWith applies the HasEdge predicate on the "reminders" edge with a given conditions (other predicates).
func HasRemindersWith(preds ...predicate.AppointmentReminder) predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := newRemindersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.Appointment {
	return predicate.Appointment(func(s *sql.Selector) {
		step := newOrderItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Appointment) predicate.Appointment {
	return predicate.Appointment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Appointment) predicate.Appointment {
	return predicate.Appointment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Appointment) predicate.Appointment {
	return predicate.Appointment(sql.NotPredicates(p))
}
