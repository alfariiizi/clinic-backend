// Code generated by ent, DO NOT EDIT.

package appointment

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the appointment type in the database.
	Label = "appointment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAppointmentDate holds the string denoting the appointment_date field in the database.
	FieldAppointmentDate = "appointment_date"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldSymptoms holds the string denoting the symptoms field in the database.
	FieldSymptoms = "symptoms"
	// FieldDiagnosis holds the string denoting the diagnosis field in the database.
	FieldDiagnosis = "diagnosis"
	// FieldTreatmentPlan holds the string denoting the treatment_plan field in the database.
	FieldTreatmentPlan = "treatment_plan"
	// FieldPrescriptions holds the string denoting the prescriptions field in the database.
	FieldPrescriptions = "prescriptions"
	// FieldTotalCost holds the string denoting the total_cost field in the database.
	FieldTotalCost = "total_cost"
	// FieldPaymentStatus holds the string denoting the payment_status field in the database.
	FieldPaymentStatus = "payment_status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"
	// EdgeDoctor holds the string denoting the doctor edge name in mutations.
	EdgeDoctor = "doctor"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// EdgeReminders holds the string denoting the reminders edge name in mutations.
	EdgeReminders = "reminders"
	// EdgeOrderItems holds the string denoting the order_items edge name in mutations.
	EdgeOrderItems = "order_items"
	// Table holds the table name of the appointment in the database.
	Table = "appointments"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "appointments"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinics"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_appointments"
	// PatientTable is the table that holds the patient relation/edge.
	PatientTable = "appointments"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patients"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "patient_appointments"
	// DoctorTable is the table that holds the doctor relation/edge.
	DoctorTable = "appointments"
	// DoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	DoctorInverseTable = "doctors"
	// DoctorColumn is the table column denoting the doctor relation/edge.
	DoctorColumn = "doctor_appointments"
	// ServiceTable is the table that holds the service relation/edge.
	ServiceTable = "appointments"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_appointments"
	// RemindersTable is the table that holds the reminders relation/edge.
	RemindersTable = "appointment_reminders"
	// RemindersInverseTable is the table name for the AppointmentReminder entity.
	// It exists in this package in order to avoid circular dependency with the "appointmentreminder" package.
	RemindersInverseTable = "appointment_reminders"
	// RemindersColumn is the table column denoting the reminders relation/edge.
	RemindersColumn = "appointment_reminders"
	// OrderItemsTable is the table that holds the order_items relation/edge.
	OrderItemsTable = "order_items"
	// OrderItemsInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	OrderItemsInverseTable = "order_items"
	// OrderItemsColumn is the table column denoting the order_items relation/edge.
	OrderItemsColumn = "appointment_order_items"
)

// Columns holds all SQL columns for appointment fields.
var Columns = []string{
	FieldID,
	FieldAppointmentDate,
	FieldStartTime,
	FieldEndTime,
	FieldStatus,
	FieldNotes,
	FieldSymptoms,
	FieldDiagnosis,
	FieldTreatmentPlan,
	FieldPrescriptions,
	FieldTotalCost,
	FieldPaymentStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "appointments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"clinic_appointments",
	"doctor_appointments",
	"patient_appointments",
	"service_appointments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusSCHEDULED is the default value of the Status enum.
const DefaultStatus = StatusSCHEDULED

// Status values.
const (
	StatusSCHEDULED   Status = "SCHEDULED"
	StatusCONFIRMED   Status = "CONFIRMED"
	StatusIN_PROGRESS Status = "IN_PROGRESS"
	StatusCOMPLETED   Status = "COMPLETED"
	StatusCANCELLED   Status = "CANCELLED"
	StatusNO_SHOW     Status = "NO_SHOW"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSCHEDULED, StatusCONFIRMED, StatusIN_PROGRESS, StatusCOMPLETED, StatusCANCELLED, StatusNO_SHOW:
		return nil
	default:
		return fmt.Errorf("appointment: invalid enum value for status field: %q", s)
	}
}

// PaymentStatus defines the type for the "payment_status" enum field.
type PaymentStatus string

// PaymentStatusPENDING is the default value of the PaymentStatus enum.
const DefaultPaymentStatus = PaymentStatusPENDING

// PaymentStatus values.
const (
	PaymentStatusPENDING   PaymentStatus = "PENDING"
	PaymentStatusPAID      PaymentStatus = "PAID"
	PaymentStatusPARTIAL   PaymentStatus = "PARTIAL"
	PaymentStatusCANCELLED PaymentStatus = "CANCELLED"
)

func (ps PaymentStatus) String() string {
	return string(ps)
}

// PaymentStatusValidator is a validator for the "payment_status" field enum values. It is called by the builders before save.
func PaymentStatusValidator(ps PaymentStatus) error {
	switch ps {
	case PaymentStatusPENDING, PaymentStatusPAID, PaymentStatusPARTIAL, PaymentStatusCANCELLED:
		return nil
	default:
		return fmt.Errorf("appointment: invalid enum value for payment_status field: %q", ps)
	}
}

// OrderOption defines the ordering options for the Appointment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAppointmentDate orders the results by the appointment_date field.
func ByAppointmentDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppointmentDate, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// BySymptoms orders the results by the symptoms field.
func BySymptoms(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymptoms, opts...).ToFunc()
}

// ByDiagnosis orders the results by the diagnosis field.
func ByDiagnosis(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagnosis, opts...).ToFunc()
}

// ByTreatmentPlan orders the results by the treatment_plan field.
func ByTreatmentPlan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTreatmentPlan, opts...).ToFunc()
}

// ByTotalCost orders the results by the total_cost field.
func ByTotalCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalCost, opts...).ToFunc()
}

// ByPaymentStatus orders the results by the payment_status field.
func ByPaymentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// ByPatientField orders the results by patient field.
func ByPatientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientStep(), sql.OrderByField(field, opts...))
	}
}

// ByDoctorField orders the results by doctor field.
func ByDoctorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDoctorStep(), sql.OrderByField(field, opts...))
	}
}

// ByServiceField orders the results by service field.
func ByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByRemindersCount orders the results by reminders count.
func ByRemindersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRemindersStep(), opts...)
	}
}

// ByReminders orders the results by reminders terms.
func ByReminders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRemindersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderItemsCount orders the results by order_items count.
func ByOrderItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderItemsStep(), opts...)
	}
}

// ByOrderItems orders the results by order_items terms.
func ByOrderItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newPatientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
	)
}
func newDoctorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DoctorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
	)
}
func newServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
	)
}
func newRemindersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RemindersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RemindersTable, RemindersColumn),
	)
}
func newOrderItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
	)
}
