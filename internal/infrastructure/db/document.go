// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/document"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/google/uuid"
)

// Document is the model entity for the Document schema.
type Document struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type document.Type `json:"type,omitempty"`
	// FilePath holds the value of the "file_path" field.
	FilePath string `json:"file_path,omitempty"`
	// pdf, jpg, png, etc
	FileType string `json:"file_type,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize int64 `json:"file_size,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// DocumentDate holds the value of the "document_date" field.
	DocumentDate time.Time `json:"document_date,omitempty"`
	// IsConfidential holds the value of the "is_confidential" field.
	IsConfidential bool `json:"is_confidential,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DocumentQuery when eager-loading is set.
	Edges             DocumentEdges `json:"edges"`
	clinic_documents  *uuid.UUID
	patient_documents *uuid.UUID
	selectValues      sql.SelectValues
}

// DocumentEdges holds the relations/edges for other nodes in the graph.
type DocumentEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) ClinicOrErr() (*Clinic, error) {
	if e.Clinic != nil {
		return e.Clinic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: clinic.Label}
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) PatientOrErr() (*Patient, error) {
	if e.Patient != nil {
		return e.Patient, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: patient.Label}
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Document) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case document.FieldMetadata:
			values[i] = new([]byte)
		case document.FieldIsConfidential:
			values[i] = new(sql.NullBool)
		case document.FieldFileSize:
			values[i] = new(sql.NullInt64)
		case document.FieldName, document.FieldType, document.FieldFilePath, document.FieldFileType:
			values[i] = new(sql.NullString)
		case document.FieldDocumentDate, document.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case document.FieldID:
			values[i] = new(uuid.UUID)
		case document.ForeignKeys[0]: // clinic_documents
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case document.ForeignKeys[1]: // patient_documents
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Document fields.
func (d *Document) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case document.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case document.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case document.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				d.Type = document.Type(value.String)
			}
		case document.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				d.FilePath = value.String
			}
		case document.FieldFileType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				d.FileType = value.String
			}
		case document.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				d.FileSize = value.Int64
			}
		case document.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case document.FieldDocumentDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field document_date", values[i])
			} else if value.Valid {
				d.DocumentDate = value.Time
			}
		case document.FieldIsConfidential:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_confidential", values[i])
			} else if value.Valid {
				d.IsConfidential = value.Bool
			}
		case document.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case document.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_documents", values[i])
			} else if value.Valid {
				d.clinic_documents = new(uuid.UUID)
				*d.clinic_documents = *value.S.(*uuid.UUID)
			}
		case document.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field patient_documents", values[i])
			} else if value.Valid {
				d.patient_documents = new(uuid.UUID)
				*d.patient_documents = *value.S.(*uuid.UUID)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Document.
// This includes values selected through modifiers, order, etc.
func (d *Document) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the Document entity.
func (d *Document) QueryClinic() *ClinicQuery {
	return NewDocumentClient(d.config).QueryClinic(d)
}

// QueryPatient queries the "patient" edge of the Document entity.
func (d *Document) QueryPatient() *PatientQuery {
	return NewDocumentClient(d.config).QueryPatient(d)
}

// Update returns a builder for updating this Document.
// Note that you need to call Document.Unwrap() before calling this method if this Document
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Document) Update() *DocumentUpdateOne {
	return NewDocumentClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Document entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Document) Unwrap() *Document {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("db: Document is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Document) String() string {
	var builder strings.Builder
	builder.WriteString("Document(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", d.Type))
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(d.FilePath)
	builder.WriteString(", ")
	builder.WriteString("file_type=")
	builder.WriteString(d.FileType)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", d.FileSize))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", d.Metadata))
	builder.WriteString(", ")
	builder.WriteString("document_date=")
	builder.WriteString(d.DocumentDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_confidential=")
	builder.WriteString(fmt.Sprintf("%v", d.IsConfidential))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Documents is a parsable slice of Document.
type Documents []*Document
