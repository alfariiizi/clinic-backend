// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinicuser"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// ClinicUser is the model entity for the ClinicUser schema.
type ClinicUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ID of the clinic this user belongs to
	ClinicID uuid.UUID `json:"clinic_id,omitempty"`
	// ID of the user in the system
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClinicUserQuery when eager-loading is set.
	Edges        ClinicUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClinicUserEdges holds the relations/edges for other nodes in the graph.
type ClinicUserEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClinicUserEdges) ClinicOrErr() (*Clinic, error) {
	if e.Clinic != nil {
		return e.Clinic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: clinic.Label}
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClinicUserEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClinicUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clinicuser.FieldID, clinicuser.FieldClinicID, clinicuser.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClinicUser fields.
func (cu *ClinicUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clinicuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cu.ID = *value
			}
		case clinicuser.FieldClinicID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_id", values[i])
			} else if value != nil {
				cu.ClinicID = *value
			}
		case clinicuser.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				cu.UserID = *value
			}
		default:
			cu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClinicUser.
// This includes values selected through modifiers, order, etc.
func (cu *ClinicUser) Value(name string) (ent.Value, error) {
	return cu.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the ClinicUser entity.
func (cu *ClinicUser) QueryClinic() *ClinicQuery {
	return NewClinicUserClient(cu.config).QueryClinic(cu)
}

// QueryUser queries the "user" edge of the ClinicUser entity.
func (cu *ClinicUser) QueryUser() *UserQuery {
	return NewClinicUserClient(cu.config).QueryUser(cu)
}

// Update returns a builder for updating this ClinicUser.
// Note that you need to call ClinicUser.Unwrap() before calling this method if this ClinicUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *ClinicUser) Update() *ClinicUserUpdateOne {
	return NewClinicUserClient(cu.config).UpdateOne(cu)
}

// Unwrap unwraps the ClinicUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *ClinicUser) Unwrap() *ClinicUser {
	_tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("db: ClinicUser is not a transactional entity")
	}
	cu.config.driver = _tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *ClinicUser) String() string {
	var builder strings.Builder
	builder.WriteString("ClinicUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cu.ID))
	builder.WriteString("clinic_id=")
	builder.WriteString(fmt.Sprintf("%v", cu.ClinicID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cu.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// ClinicUsers is a parsable slice of ClinicUser.
type ClinicUsers []*ClinicUser
