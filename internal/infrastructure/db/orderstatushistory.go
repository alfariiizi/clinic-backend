// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderstatushistory"
	"github.com/google/uuid"
)

// OrderStatusHistory is the model entity for the OrderStatusHistory schema.
type OrderStatusHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// user who changed status
	ChangedBy string `json:"changed_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderStatusHistoryQuery when eager-loading is set.
	Edges                      OrderStatusHistoryEdges `json:"edges"`
	order_order_status_history *uuid.UUID
	selectValues               sql.SelectValues
}

// OrderStatusHistoryEdges holds the relations/edges for other nodes in the graph.
type OrderStatusHistoryEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderStatusHistoryEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderStatusHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderstatushistory.FieldStatus, orderstatushistory.FieldNotes, orderstatushistory.FieldChangedBy:
			values[i] = new(sql.NullString)
		case orderstatushistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case orderstatushistory.FieldID:
			values[i] = new(uuid.UUID)
		case orderstatushistory.ForeignKeys[0]: // order_order_status_history
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderStatusHistory fields.
func (osh *OrderStatusHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderstatushistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				osh.ID = *value
			}
		case orderstatushistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				osh.Status = value.String
			}
		case orderstatushistory.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				osh.Notes = value.String
			}
		case orderstatushistory.FieldChangedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field changed_by", values[i])
			} else if value.Valid {
				osh.ChangedBy = value.String
			}
		case orderstatushistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				osh.CreatedAt = value.Time
			}
		case orderstatushistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field order_order_status_history", values[i])
			} else if value.Valid {
				osh.order_order_status_history = new(uuid.UUID)
				*osh.order_order_status_history = *value.S.(*uuid.UUID)
			}
		default:
			osh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderStatusHistory.
// This includes values selected through modifiers, order, etc.
func (osh *OrderStatusHistory) Value(name string) (ent.Value, error) {
	return osh.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderStatusHistory entity.
func (osh *OrderStatusHistory) QueryOrder() *OrderQuery {
	return NewOrderStatusHistoryClient(osh.config).QueryOrder(osh)
}

// Update returns a builder for updating this OrderStatusHistory.
// Note that you need to call OrderStatusHistory.Unwrap() before calling this method if this OrderStatusHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (osh *OrderStatusHistory) Update() *OrderStatusHistoryUpdateOne {
	return NewOrderStatusHistoryClient(osh.config).UpdateOne(osh)
}

// Unwrap unwraps the OrderStatusHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (osh *OrderStatusHistory) Unwrap() *OrderStatusHistory {
	_tx, ok := osh.config.driver.(*txDriver)
	if !ok {
		panic("db: OrderStatusHistory is not a transactional entity")
	}
	osh.config.driver = _tx.drv
	return osh
}

// String implements the fmt.Stringer.
func (osh *OrderStatusHistory) String() string {
	var builder strings.Builder
	builder.WriteString("OrderStatusHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", osh.ID))
	builder.WriteString("status=")
	builder.WriteString(osh.Status)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(osh.Notes)
	builder.WriteString(", ")
	builder.WriteString("changed_by=")
	builder.WriteString(osh.ChangedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(osh.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderStatusHistories is a parsable slice of OrderStatusHistory.
type OrderStatusHistories []*OrderStatusHistory
