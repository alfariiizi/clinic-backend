// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/document"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// DocumentUpdate is the builder for updating Document entities.
type DocumentUpdate struct {
	config
	hooks    []Hook
	mutation *DocumentMutation
}

// Where appends a list predicates to the DocumentUpdate builder.
func (du *DocumentUpdate) Where(ps ...predicate.Document) *DocumentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DocumentUpdate) SetName(s string) *DocumentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableName(s *string) *DocumentUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetType sets the "type" field.
func (du *DocumentUpdate) SetType(d document.Type) *DocumentUpdate {
	du.mutation.SetType(d)
	return du
}

// SetNillableType sets the "type" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableType(d *document.Type) *DocumentUpdate {
	if d != nil {
		du.SetType(*d)
	}
	return du
}

// SetFilePath sets the "file_path" field.
func (du *DocumentUpdate) SetFilePath(s string) *DocumentUpdate {
	du.mutation.SetFilePath(s)
	return du
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableFilePath(s *string) *DocumentUpdate {
	if s != nil {
		du.SetFilePath(*s)
	}
	return du
}

// SetFileType sets the "file_type" field.
func (du *DocumentUpdate) SetFileType(s string) *DocumentUpdate {
	du.mutation.SetFileType(s)
	return du
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableFileType(s *string) *DocumentUpdate {
	if s != nil {
		du.SetFileType(*s)
	}
	return du
}

// SetFileSize sets the "file_size" field.
func (du *DocumentUpdate) SetFileSize(i int64) *DocumentUpdate {
	du.mutation.ResetFileSize()
	du.mutation.SetFileSize(i)
	return du
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableFileSize(i *int64) *DocumentUpdate {
	if i != nil {
		du.SetFileSize(*i)
	}
	return du
}

// AddFileSize adds i to the "file_size" field.
func (du *DocumentUpdate) AddFileSize(i int64) *DocumentUpdate {
	du.mutation.AddFileSize(i)
	return du
}

// SetMetadata sets the "metadata" field.
func (du *DocumentUpdate) SetMetadata(m map[string]interface{}) *DocumentUpdate {
	du.mutation.SetMetadata(m)
	return du
}

// ClearMetadata clears the value of the "metadata" field.
func (du *DocumentUpdate) ClearMetadata() *DocumentUpdate {
	du.mutation.ClearMetadata()
	return du
}

// SetDocumentDate sets the "document_date" field.
func (du *DocumentUpdate) SetDocumentDate(t time.Time) *DocumentUpdate {
	du.mutation.SetDocumentDate(t)
	return du
}

// SetNillableDocumentDate sets the "document_date" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableDocumentDate(t *time.Time) *DocumentUpdate {
	if t != nil {
		du.SetDocumentDate(*t)
	}
	return du
}

// ClearDocumentDate clears the value of the "document_date" field.
func (du *DocumentUpdate) ClearDocumentDate() *DocumentUpdate {
	du.mutation.ClearDocumentDate()
	return du
}

// SetIsConfidential sets the "is_confidential" field.
func (du *DocumentUpdate) SetIsConfidential(b bool) *DocumentUpdate {
	du.mutation.SetIsConfidential(b)
	return du
}

// SetNillableIsConfidential sets the "is_confidential" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableIsConfidential(b *bool) *DocumentUpdate {
	if b != nil {
		du.SetIsConfidential(*b)
	}
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DocumentUpdate) SetCreatedAt(t time.Time) *DocumentUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableCreatedAt(t *time.Time) *DocumentUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (du *DocumentUpdate) SetClinicID(id uuid.UUID) *DocumentUpdate {
	du.mutation.SetClinicID(id)
	return du
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableClinicID(id *uuid.UUID) *DocumentUpdate {
	if id != nil {
		du = du.SetClinicID(*id)
	}
	return du
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (du *DocumentUpdate) SetClinic(c *Clinic) *DocumentUpdate {
	return du.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (du *DocumentUpdate) SetPatientID(id uuid.UUID) *DocumentUpdate {
	du.mutation.SetPatientID(id)
	return du
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillablePatientID(id *uuid.UUID) *DocumentUpdate {
	if id != nil {
		du = du.SetPatientID(*id)
	}
	return du
}

// SetPatient sets the "patient" edge to the Patient entity.
func (du *DocumentUpdate) SetPatient(p *Patient) *DocumentUpdate {
	return du.SetPatientID(p.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (du *DocumentUpdate) Mutation() *DocumentMutation {
	return du.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (du *DocumentUpdate) ClearClinic() *DocumentUpdate {
	du.mutation.ClearClinic()
	return du
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (du *DocumentUpdate) ClearPatient() *DocumentUpdate {
	du.mutation.ClearPatient()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DocumentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DocumentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DocumentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DocumentUpdate) check() error {
	if v, ok := du.mutation.GetType(); ok {
		if err := document.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Document.type": %w`, err)}
		}
	}
	return nil
}

func (du *DocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.GetType(); ok {
		_spec.SetField(document.FieldType, field.TypeEnum, value)
	}
	if value, ok := du.mutation.FilePath(); ok {
		_spec.SetField(document.FieldFilePath, field.TypeString, value)
	}
	if value, ok := du.mutation.FileType(); ok {
		_spec.SetField(document.FieldFileType, field.TypeString, value)
	}
	if value, ok := du.mutation.FileSize(); ok {
		_spec.SetField(document.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedFileSize(); ok {
		_spec.AddField(document.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := du.mutation.Metadata(); ok {
		_spec.SetField(document.FieldMetadata, field.TypeJSON, value)
	}
	if du.mutation.MetadataCleared() {
		_spec.ClearField(document.FieldMetadata, field.TypeJSON)
	}
	if value, ok := du.mutation.DocumentDate(); ok {
		_spec.SetField(document.FieldDocumentDate, field.TypeTime, value)
	}
	if du.mutation.DocumentDateCleared() {
		_spec.ClearField(document.FieldDocumentDate, field.TypeTime)
	}
	if value, ok := du.mutation.IsConfidential(); ok {
		_spec.SetField(document.FieldIsConfidential, field.TypeBool, value)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(document.FieldCreatedAt, field.TypeTime, value)
	}
	if du.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ClinicTable,
			Columns: []string{document.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ClinicTable,
			Columns: []string{document.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.PatientTable,
			Columns: []string{document.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.PatientTable,
			Columns: []string{document.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DocumentUpdateOne is the builder for updating a single Document entity.
type DocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocumentMutation
}

// SetName sets the "name" field.
func (duo *DocumentUpdateOne) SetName(s string) *DocumentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableName(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetType sets the "type" field.
func (duo *DocumentUpdateOne) SetType(d document.Type) *DocumentUpdateOne {
	duo.mutation.SetType(d)
	return duo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableType(d *document.Type) *DocumentUpdateOne {
	if d != nil {
		duo.SetType(*d)
	}
	return duo
}

// SetFilePath sets the "file_path" field.
func (duo *DocumentUpdateOne) SetFilePath(s string) *DocumentUpdateOne {
	duo.mutation.SetFilePath(s)
	return duo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableFilePath(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetFilePath(*s)
	}
	return duo
}

// SetFileType sets the "file_type" field.
func (duo *DocumentUpdateOne) SetFileType(s string) *DocumentUpdateOne {
	duo.mutation.SetFileType(s)
	return duo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableFileType(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetFileType(*s)
	}
	return duo
}

// SetFileSize sets the "file_size" field.
func (duo *DocumentUpdateOne) SetFileSize(i int64) *DocumentUpdateOne {
	duo.mutation.ResetFileSize()
	duo.mutation.SetFileSize(i)
	return duo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableFileSize(i *int64) *DocumentUpdateOne {
	if i != nil {
		duo.SetFileSize(*i)
	}
	return duo
}

// AddFileSize adds i to the "file_size" field.
func (duo *DocumentUpdateOne) AddFileSize(i int64) *DocumentUpdateOne {
	duo.mutation.AddFileSize(i)
	return duo
}

// SetMetadata sets the "metadata" field.
func (duo *DocumentUpdateOne) SetMetadata(m map[string]interface{}) *DocumentUpdateOne {
	duo.mutation.SetMetadata(m)
	return duo
}

// ClearMetadata clears the value of the "metadata" field.
func (duo *DocumentUpdateOne) ClearMetadata() *DocumentUpdateOne {
	duo.mutation.ClearMetadata()
	return duo
}

// SetDocumentDate sets the "document_date" field.
func (duo *DocumentUpdateOne) SetDocumentDate(t time.Time) *DocumentUpdateOne {
	duo.mutation.SetDocumentDate(t)
	return duo
}

// SetNillableDocumentDate sets the "document_date" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableDocumentDate(t *time.Time) *DocumentUpdateOne {
	if t != nil {
		duo.SetDocumentDate(*t)
	}
	return duo
}

// ClearDocumentDate clears the value of the "document_date" field.
func (duo *DocumentUpdateOne) ClearDocumentDate() *DocumentUpdateOne {
	duo.mutation.ClearDocumentDate()
	return duo
}

// SetIsConfidential sets the "is_confidential" field.
func (duo *DocumentUpdateOne) SetIsConfidential(b bool) *DocumentUpdateOne {
	duo.mutation.SetIsConfidential(b)
	return duo
}

// SetNillableIsConfidential sets the "is_confidential" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableIsConfidential(b *bool) *DocumentUpdateOne {
	if b != nil {
		duo.SetIsConfidential(*b)
	}
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DocumentUpdateOne) SetCreatedAt(t time.Time) *DocumentUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableCreatedAt(t *time.Time) *DocumentUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (duo *DocumentUpdateOne) SetClinicID(id uuid.UUID) *DocumentUpdateOne {
	duo.mutation.SetClinicID(id)
	return duo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableClinicID(id *uuid.UUID) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetClinicID(*id)
	}
	return duo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (duo *DocumentUpdateOne) SetClinic(c *Clinic) *DocumentUpdateOne {
	return duo.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (duo *DocumentUpdateOne) SetPatientID(id uuid.UUID) *DocumentUpdateOne {
	duo.mutation.SetPatientID(id)
	return duo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillablePatientID(id *uuid.UUID) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetPatientID(*id)
	}
	return duo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (duo *DocumentUpdateOne) SetPatient(p *Patient) *DocumentUpdateOne {
	return duo.SetPatientID(p.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (duo *DocumentUpdateOne) Mutation() *DocumentMutation {
	return duo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (duo *DocumentUpdateOne) ClearClinic() *DocumentUpdateOne {
	duo.mutation.ClearClinic()
	return duo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (duo *DocumentUpdateOne) ClearPatient() *DocumentUpdateOne {
	duo.mutation.ClearPatient()
	return duo
}

// Where appends a list predicates to the DocumentUpdate builder.
func (duo *DocumentUpdateOne) Where(ps ...predicate.Document) *DocumentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DocumentUpdateOne) Select(field string, fields ...string) *DocumentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Document entity.
func (duo *DocumentUpdateOne) Save(ctx context.Context) (*Document, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DocumentUpdateOne) SaveX(ctx context.Context) *Document {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DocumentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DocumentUpdateOne) check() error {
	if v, ok := duo.mutation.GetType(); ok {
		if err := document.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Document.type": %w`, err)}
		}
	}
	return nil
}

func (duo *DocumentUpdateOne) sqlSave(ctx context.Context) (_node *Document, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Document.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, document.FieldID)
		for _, f := range fields {
			if !document.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != document.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.GetType(); ok {
		_spec.SetField(document.FieldType, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.FilePath(); ok {
		_spec.SetField(document.FieldFilePath, field.TypeString, value)
	}
	if value, ok := duo.mutation.FileType(); ok {
		_spec.SetField(document.FieldFileType, field.TypeString, value)
	}
	if value, ok := duo.mutation.FileSize(); ok {
		_spec.SetField(document.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedFileSize(); ok {
		_spec.AddField(document.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.Metadata(); ok {
		_spec.SetField(document.FieldMetadata, field.TypeJSON, value)
	}
	if duo.mutation.MetadataCleared() {
		_spec.ClearField(document.FieldMetadata, field.TypeJSON)
	}
	if value, ok := duo.mutation.DocumentDate(); ok {
		_spec.SetField(document.FieldDocumentDate, field.TypeTime, value)
	}
	if duo.mutation.DocumentDateCleared() {
		_spec.ClearField(document.FieldDocumentDate, field.TypeTime)
	}
	if value, ok := duo.mutation.IsConfidential(); ok {
		_spec.SetField(document.FieldIsConfidential, field.TypeBool, value)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(document.FieldCreatedAt, field.TypeTime, value)
	}
	if duo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ClinicTable,
			Columns: []string{document.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ClinicTable,
			Columns: []string{document.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.PatientTable,
			Columns: []string{document.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.PatientTable,
			Columns: []string{document.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Document{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
