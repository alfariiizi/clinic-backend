// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/document"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/google/uuid"
)

// DocumentCreate is the builder for creating a Document entity.
type DocumentCreate struct {
	config
	mutation *DocumentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dc *DocumentCreate) SetName(s string) *DocumentCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetType sets the "type" field.
func (dc *DocumentCreate) SetType(d document.Type) *DocumentCreate {
	dc.mutation.SetType(d)
	return dc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableType(d *document.Type) *DocumentCreate {
	if d != nil {
		dc.SetType(*d)
	}
	return dc
}

// SetFilePath sets the "file_path" field.
func (dc *DocumentCreate) SetFilePath(s string) *DocumentCreate {
	dc.mutation.SetFilePath(s)
	return dc
}

// SetFileType sets the "file_type" field.
func (dc *DocumentCreate) SetFileType(s string) *DocumentCreate {
	dc.mutation.SetFileType(s)
	return dc
}

// SetFileSize sets the "file_size" field.
func (dc *DocumentCreate) SetFileSize(i int64) *DocumentCreate {
	dc.mutation.SetFileSize(i)
	return dc
}

// SetMetadata sets the "metadata" field.
func (dc *DocumentCreate) SetMetadata(m map[string]interface{}) *DocumentCreate {
	dc.mutation.SetMetadata(m)
	return dc
}

// SetDocumentDate sets the "document_date" field.
func (dc *DocumentCreate) SetDocumentDate(t time.Time) *DocumentCreate {
	dc.mutation.SetDocumentDate(t)
	return dc
}

// SetNillableDocumentDate sets the "document_date" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableDocumentDate(t *time.Time) *DocumentCreate {
	if t != nil {
		dc.SetDocumentDate(*t)
	}
	return dc
}

// SetIsConfidential sets the "is_confidential" field.
func (dc *DocumentCreate) SetIsConfidential(b bool) *DocumentCreate {
	dc.mutation.SetIsConfidential(b)
	return dc
}

// SetNillableIsConfidential sets the "is_confidential" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableIsConfidential(b *bool) *DocumentCreate {
	if b != nil {
		dc.SetIsConfidential(*b)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DocumentCreate) SetCreatedAt(t time.Time) *DocumentCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableCreatedAt(t *time.Time) *DocumentCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DocumentCreate) SetID(u uuid.UUID) *DocumentCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableID(u *uuid.UUID) *DocumentCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (dc *DocumentCreate) SetClinicID(id uuid.UUID) *DocumentCreate {
	dc.mutation.SetClinicID(id)
	return dc
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableClinicID(id *uuid.UUID) *DocumentCreate {
	if id != nil {
		dc = dc.SetClinicID(*id)
	}
	return dc
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (dc *DocumentCreate) SetClinic(c *Clinic) *DocumentCreate {
	return dc.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (dc *DocumentCreate) SetPatientID(id uuid.UUID) *DocumentCreate {
	dc.mutation.SetPatientID(id)
	return dc
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillablePatientID(id *uuid.UUID) *DocumentCreate {
	if id != nil {
		dc = dc.SetPatientID(*id)
	}
	return dc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (dc *DocumentCreate) SetPatient(p *Patient) *DocumentCreate {
	return dc.SetPatientID(p.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (dc *DocumentCreate) Mutation() *DocumentMutation {
	return dc.mutation
}

// Save creates the Document in the database.
func (dc *DocumentCreate) Save(ctx context.Context) (*Document, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DocumentCreate) SaveX(ctx context.Context) *Document {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DocumentCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DocumentCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DocumentCreate) defaults() {
	if _, ok := dc.mutation.GetType(); !ok {
		v := document.DefaultType
		dc.mutation.SetType(v)
	}
	if _, ok := dc.mutation.IsConfidential(); !ok {
		v := document.DefaultIsConfidential
		dc.mutation.SetIsConfidential(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := document.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := document.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DocumentCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Document.name"`)}
	}
	if _, ok := dc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "Document.type"`)}
	}
	if v, ok := dc.mutation.GetType(); ok {
		if err := document.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Document.type": %w`, err)}
		}
	}
	if _, ok := dc.mutation.FilePath(); !ok {
		return &ValidationError{Name: "file_path", err: errors.New(`db: missing required field "Document.file_path"`)}
	}
	if _, ok := dc.mutation.FileType(); !ok {
		return &ValidationError{Name: "file_type", err: errors.New(`db: missing required field "Document.file_type"`)}
	}
	if _, ok := dc.mutation.FileSize(); !ok {
		return &ValidationError{Name: "file_size", err: errors.New(`db: missing required field "Document.file_size"`)}
	}
	if _, ok := dc.mutation.IsConfidential(); !ok {
		return &ValidationError{Name: "is_confidential", err: errors.New(`db: missing required field "Document.is_confidential"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Document.created_at"`)}
	}
	return nil
}

func (dc *DocumentCreate) sqlSave(ctx context.Context) (*Document, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DocumentCreate) createSpec() (*Document, *sqlgraph.CreateSpec) {
	var (
		_node = &Document{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(document.Table, sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.GetType(); ok {
		_spec.SetField(document.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := dc.mutation.FilePath(); ok {
		_spec.SetField(document.FieldFilePath, field.TypeString, value)
		_node.FilePath = value
	}
	if value, ok := dc.mutation.FileType(); ok {
		_spec.SetField(document.FieldFileType, field.TypeString, value)
		_node.FileType = value
	}
	if value, ok := dc.mutation.FileSize(); ok {
		_spec.SetField(document.FieldFileSize, field.TypeInt64, value)
		_node.FileSize = value
	}
	if value, ok := dc.mutation.Metadata(); ok {
		_spec.SetField(document.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := dc.mutation.DocumentDate(); ok {
		_spec.SetField(document.FieldDocumentDate, field.TypeTime, value)
		_node.DocumentDate = value
	}
	if value, ok := dc.mutation.IsConfidential(); ok {
		_spec.SetField(document.FieldIsConfidential, field.TypeBool, value)
		_node.IsConfidential = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(document.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := dc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ClinicTable,
			Columns: []string{document.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clinic_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.PatientTable,
			Columns: []string{document.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.patient_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DocumentCreateBulk is the builder for creating many Document entities in bulk.
type DocumentCreateBulk struct {
	config
	err      error
	builders []*DocumentCreate
}

// Save creates the Document entities in the database.
func (dcb *DocumentCreateBulk) Save(ctx context.Context) ([]*Document, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Document, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DocumentCreateBulk) SaveX(ctx context.Context) []*Document {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DocumentCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
