// Code generated by ent, DO NOT EDIT.

package aiinteraction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLTE(FieldID, id))
}

// ClinicID applies equality check predicate on the "clinic_id" field. It's identical to ClinicIDEQ.
func ClinicID(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldClinicID, v))
}

// PatientWhatsapp applies equality check predicate on the "patient_whatsapp" field. It's identical to PatientWhatsappEQ.
func PatientWhatsapp(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldPatientWhatsapp, v))
}

// AiModel applies equality check predicate on the "ai_model" field. It's identical to AiModelEQ.
func AiModel(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldAiModel, v))
}

// ResponseTimeMs applies equality check predicate on the "response_time_ms" field. It's identical to ResponseTimeMsEQ.
func ResponseTimeMs(v int) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldResponseTimeMs, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldErrorMessage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldCreatedAt, v))
}

// ClinicIDEQ applies the EQ predicate on the "clinic_id" field.
func ClinicIDEQ(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldClinicID, v))
}

// ClinicIDNEQ applies the NEQ predicate on the "clinic_id" field.
func ClinicIDNEQ(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNEQ(FieldClinicID, v))
}

// ClinicIDIn applies the In predicate on the "clinic_id" field.
func ClinicIDIn(vs ...string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIn(FieldClinicID, vs...))
}

// ClinicIDNotIn applies the NotIn predicate on the "clinic_id" field.
func ClinicIDNotIn(vs ...string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotIn(FieldClinicID, vs...))
}

// ClinicIDGT applies the GT predicate on the "clinic_id" field.
func ClinicIDGT(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGT(FieldClinicID, v))
}

// ClinicIDGTE applies the GTE predicate on the "clinic_id" field.
func ClinicIDGTE(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGTE(FieldClinicID, v))
}

// ClinicIDLT applies the LT predicate on the "clinic_id" field.
func ClinicIDLT(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLT(FieldClinicID, v))
}

// ClinicIDLTE applies the LTE predicate on the "clinic_id" field.
func ClinicIDLTE(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLTE(FieldClinicID, v))
}

// ClinicIDContains applies the Contains predicate on the "clinic_id" field.
func ClinicIDContains(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldContains(FieldClinicID, v))
}

// ClinicIDHasPrefix applies the HasPrefix predicate on the "clinic_id" field.
func ClinicIDHasPrefix(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldHasPrefix(FieldClinicID, v))
}

// ClinicIDHasSuffix applies the HasSuffix predicate on the "clinic_id" field.
func ClinicIDHasSuffix(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldHasSuffix(FieldClinicID, v))
}

// ClinicIDEqualFold applies the EqualFold predicate on the "clinic_id" field.
func ClinicIDEqualFold(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEqualFold(FieldClinicID, v))
}

// ClinicIDContainsFold applies the ContainsFold predicate on the "clinic_id" field.
func ClinicIDContainsFold(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldContainsFold(FieldClinicID, v))
}

// PatientWhatsappEQ applies the EQ predicate on the "patient_whatsapp" field.
func PatientWhatsappEQ(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldPatientWhatsapp, v))
}

// PatientWhatsappNEQ applies the NEQ predicate on the "patient_whatsapp" field.
func PatientWhatsappNEQ(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNEQ(FieldPatientWhatsapp, v))
}

// PatientWhatsappIn applies the In predicate on the "patient_whatsapp" field.
func PatientWhatsappIn(vs ...string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIn(FieldPatientWhatsapp, vs...))
}

// PatientWhatsappNotIn applies the NotIn predicate on the "patient_whatsapp" field.
func PatientWhatsappNotIn(vs ...string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotIn(FieldPatientWhatsapp, vs...))
}

// PatientWhatsappGT applies the GT predicate on the "patient_whatsapp" field.
func PatientWhatsappGT(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGT(FieldPatientWhatsapp, v))
}

// PatientWhatsappGTE applies the GTE predicate on the "patient_whatsapp" field.
func PatientWhatsappGTE(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGTE(FieldPatientWhatsapp, v))
}

// PatientWhatsappLT applies the LT predicate on the "patient_whatsapp" field.
func PatientWhatsappLT(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLT(FieldPatientWhatsapp, v))
}

// PatientWhatsappLTE applies the LTE predicate on the "patient_whatsapp" field.
func PatientWhatsappLTE(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLTE(FieldPatientWhatsapp, v))
}

// PatientWhatsappContains applies the Contains predicate on the "patient_whatsapp" field.
func PatientWhatsappContains(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldContains(FieldPatientWhatsapp, v))
}

// PatientWhatsappHasPrefix applies the HasPrefix predicate on the "patient_whatsapp" field.
func PatientWhatsappHasPrefix(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldHasPrefix(FieldPatientWhatsapp, v))
}

// PatientWhatsappHasSuffix applies the HasSuffix predicate on the "patient_whatsapp" field.
func PatientWhatsappHasSuffix(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldHasSuffix(FieldPatientWhatsapp, v))
}

// PatientWhatsappIsNil applies the IsNil predicate on the "patient_whatsapp" field.
func PatientWhatsappIsNil() predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIsNull(FieldPatientWhatsapp))
}

// PatientWhatsappNotNil applies the NotNil predicate on the "patient_whatsapp" field.
func PatientWhatsappNotNil() predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotNull(FieldPatientWhatsapp))
}

// PatientWhatsappEqualFold applies the EqualFold predicate on the "patient_whatsapp" field.
func PatientWhatsappEqualFold(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEqualFold(FieldPatientWhatsapp, v))
}

// PatientWhatsappContainsFold applies the ContainsFold predicate on the "patient_whatsapp" field.
func PatientWhatsappContainsFold(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldContainsFold(FieldPatientWhatsapp, v))
}

// InteractionTypeEQ applies the EQ predicate on the "interaction_type" field.
func InteractionTypeEQ(v InteractionType) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldInteractionType, v))
}

// InteractionTypeNEQ applies the NEQ predicate on the "interaction_type" field.
func InteractionTypeNEQ(v InteractionType) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNEQ(FieldInteractionType, v))
}

// InteractionTypeIn applies the In predicate on the "interaction_type" field.
func InteractionTypeIn(vs ...InteractionType) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIn(FieldInteractionType, vs...))
}

// InteractionTypeNotIn applies the NotIn predicate on the "interaction_type" field.
func InteractionTypeNotIn(vs ...InteractionType) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotIn(FieldInteractionType, vs...))
}

// AiModelEQ applies the EQ predicate on the "ai_model" field.
func AiModelEQ(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldAiModel, v))
}

// AiModelNEQ applies the NEQ predicate on the "ai_model" field.
func AiModelNEQ(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNEQ(FieldAiModel, v))
}

// AiModelIn applies the In predicate on the "ai_model" field.
func AiModelIn(vs ...string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIn(FieldAiModel, vs...))
}

// AiModelNotIn applies the NotIn predicate on the "ai_model" field.
func AiModelNotIn(vs ...string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotIn(FieldAiModel, vs...))
}

// AiModelGT applies the GT predicate on the "ai_model" field.
func AiModelGT(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGT(FieldAiModel, v))
}

// AiModelGTE applies the GTE predicate on the "ai_model" field.
func AiModelGTE(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGTE(FieldAiModel, v))
}

// AiModelLT applies the LT predicate on the "ai_model" field.
func AiModelLT(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLT(FieldAiModel, v))
}

// AiModelLTE applies the LTE predicate on the "ai_model" field.
func AiModelLTE(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLTE(FieldAiModel, v))
}

// AiModelContains applies the Contains predicate on the "ai_model" field.
func AiModelContains(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldContains(FieldAiModel, v))
}

// AiModelHasPrefix applies the HasPrefix predicate on the "ai_model" field.
func AiModelHasPrefix(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldHasPrefix(FieldAiModel, v))
}

// AiModelHasSuffix applies the HasSuffix predicate on the "ai_model" field.
func AiModelHasSuffix(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldHasSuffix(FieldAiModel, v))
}

// AiModelIsNil applies the IsNil predicate on the "ai_model" field.
func AiModelIsNil() predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIsNull(FieldAiModel))
}

// AiModelNotNil applies the NotNil predicate on the "ai_model" field.
func AiModelNotNil() predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotNull(FieldAiModel))
}

// AiModelEqualFold applies the EqualFold predicate on the "ai_model" field.
func AiModelEqualFold(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEqualFold(FieldAiModel, v))
}

// AiModelContainsFold applies the ContainsFold predicate on the "ai_model" field.
func AiModelContainsFold(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldContainsFold(FieldAiModel, v))
}

// ResponseTimeMsEQ applies the EQ predicate on the "response_time_ms" field.
func ResponseTimeMsEQ(v int) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldResponseTimeMs, v))
}

// ResponseTimeMsNEQ applies the NEQ predicate on the "response_time_ms" field.
func ResponseTimeMsNEQ(v int) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNEQ(FieldResponseTimeMs, v))
}

// ResponseTimeMsIn applies the In predicate on the "response_time_ms" field.
func ResponseTimeMsIn(vs ...int) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIn(FieldResponseTimeMs, vs...))
}

// ResponseTimeMsNotIn applies the NotIn predicate on the "response_time_ms" field.
func ResponseTimeMsNotIn(vs ...int) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotIn(FieldResponseTimeMs, vs...))
}

// ResponseTimeMsGT applies the GT predicate on the "response_time_ms" field.
func ResponseTimeMsGT(v int) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGT(FieldResponseTimeMs, v))
}

// ResponseTimeMsGTE applies the GTE predicate on the "response_time_ms" field.
func ResponseTimeMsGTE(v int) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGTE(FieldResponseTimeMs, v))
}

// ResponseTimeMsLT applies the LT predicate on the "response_time_ms" field.
func ResponseTimeMsLT(v int) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLT(FieldResponseTimeMs, v))
}

// ResponseTimeMsLTE applies the LTE predicate on the "response_time_ms" field.
func ResponseTimeMsLTE(v int) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLTE(FieldResponseTimeMs, v))
}

// ResponseTimeMsIsNil applies the IsNil predicate on the "response_time_ms" field.
func ResponseTimeMsIsNil() predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIsNull(FieldResponseTimeMs))
}

// ResponseTimeMsNotNil applies the NotNil predicate on the "response_time_ms" field.
func ResponseTimeMsNotNil() predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotNull(FieldResponseTimeMs))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotIn(FieldStatus, vs...))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldContainsFold(FieldErrorMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AIInteraction {
	return predicate.AIInteraction(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AIInteraction) predicate.AIInteraction {
	return predicate.AIInteraction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AIInteraction) predicate.AIInteraction {
	return predicate.AIInteraction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AIInteraction) predicate.AIInteraction {
	return predicate.AIInteraction(sql.NotPredicates(p))
}
