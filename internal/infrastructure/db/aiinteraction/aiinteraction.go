// Code generated by ent, DO NOT EDIT.

package aiinteraction

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the aiinteraction type in the database.
	Label = "ai_interaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClinicID holds the string denoting the clinic_id field in the database.
	FieldClinicID = "clinic_id"
	// FieldPatientWhatsapp holds the string denoting the patient_whatsapp field in the database.
	FieldPatientWhatsapp = "patient_whatsapp"
	// FieldInteractionType holds the string denoting the interaction_type field in the database.
	FieldInteractionType = "interaction_type"
	// FieldRequestPayload holds the string denoting the request_payload field in the database.
	FieldRequestPayload = "request_payload"
	// FieldResponsePayload holds the string denoting the response_payload field in the database.
	FieldResponsePayload = "response_payload"
	// FieldAiModel holds the string denoting the ai_model field in the database.
	FieldAiModel = "ai_model"
	// FieldResponseTimeMs holds the string denoting the response_time_ms field in the database.
	FieldResponseTimeMs = "response_time_ms"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the aiinteraction in the database.
	Table = "ai_interactions"
)

// Columns holds all SQL columns for aiinteraction fields.
var Columns = []string{
	FieldID,
	FieldClinicID,
	FieldPatientWhatsapp,
	FieldInteractionType,
	FieldRequestPayload,
	FieldResponsePayload,
	FieldAiModel,
	FieldResponseTimeMs,
	FieldStatus,
	FieldErrorMessage,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// InteractionType defines the type for the "interaction_type" enum field.
type InteractionType string

// InteractionTypeCHAT is the default value of the InteractionType enum.
const DefaultInteractionType = InteractionTypeCHAT

// InteractionType values.
const (
	InteractionTypeCHAT           InteractionType = "CHAT"
	InteractionTypeTOOL_CALL      InteractionType = "TOOL_CALL"
	InteractionTypeRECOMMENDATION InteractionType = "RECOMMENDATION"
)

func (it InteractionType) String() string {
	return string(it)
}

// InteractionTypeValidator is a validator for the "interaction_type" field enum values. It is called by the builders before save.
func InteractionTypeValidator(it InteractionType) error {
	switch it {
	case InteractionTypeCHAT, InteractionTypeTOOL_CALL, InteractionTypeRECOMMENDATION:
		return nil
	default:
		return fmt.Errorf("aiinteraction: invalid enum value for interaction_type field: %q", it)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusSUCCESS is the default value of the Status enum.
const DefaultStatus = StatusSUCCESS

// Status values.
const (
	StatusSUCCESS Status = "SUCCESS"
	StatusERROR   Status = "ERROR"
	StatusTIMEOUT Status = "TIMEOUT"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSUCCESS, StatusERROR, StatusTIMEOUT:
		return nil
	default:
		return fmt.Errorf("aiinteraction: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the AIInteraction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClinicID orders the results by the clinic_id field.
func ByClinicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicID, opts...).ToFunc()
}

// ByPatientWhatsapp orders the results by the patient_whatsapp field.
func ByPatientWhatsapp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientWhatsapp, opts...).ToFunc()
}

// ByInteractionType orders the results by the interaction_type field.
func ByInteractionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInteractionType, opts...).ToFunc()
}

// ByAiModel orders the results by the ai_model field.
func ByAiModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAiModel, opts...).ToFunc()
}

// ByResponseTimeMs orders the results by the response_time_ms field.
func ByResponseTimeMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseTimeMs, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
