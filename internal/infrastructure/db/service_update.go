// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderitem"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/service"
	"github.com/google/uuid"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ServiceUpdate) SetName(s string) *ServiceUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableName(s *string) *ServiceUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *ServiceUpdate) SetDescription(s string) *ServiceUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableDescription(s *string) *ServiceUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *ServiceUpdate) ClearDescription() *ServiceUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetCategory sets the "category" field.
func (su *ServiceUpdate) SetCategory(s string) *ServiceUpdate {
	su.mutation.SetCategory(s)
	return su
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableCategory(s *string) *ServiceUpdate {
	if s != nil {
		su.SetCategory(*s)
	}
	return su
}

// ClearCategory clears the value of the "category" field.
func (su *ServiceUpdate) ClearCategory() *ServiceUpdate {
	su.mutation.ClearCategory()
	return su
}

// SetPrice sets the "price" field.
func (su *ServiceUpdate) SetPrice(f float64) *ServiceUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(f)
	return su
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (su *ServiceUpdate) SetNillablePrice(f *float64) *ServiceUpdate {
	if f != nil {
		su.SetPrice(*f)
	}
	return su
}

// AddPrice adds f to the "price" field.
func (su *ServiceUpdate) AddPrice(f float64) *ServiceUpdate {
	su.mutation.AddPrice(f)
	return su
}

// SetDuration sets the "duration" field.
func (su *ServiceUpdate) SetDuration(i int) *ServiceUpdate {
	su.mutation.ResetDuration()
	su.mutation.SetDuration(i)
	return su
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableDuration(i *int) *ServiceUpdate {
	if i != nil {
		su.SetDuration(*i)
	}
	return su
}

// AddDuration adds i to the "duration" field.
func (su *ServiceUpdate) AddDuration(i int) *ServiceUpdate {
	su.mutation.AddDuration(i)
	return su
}

// SetRequirements sets the "requirements" field.
func (su *ServiceUpdate) SetRequirements(s []string) *ServiceUpdate {
	su.mutation.SetRequirements(s)
	return su
}

// AppendRequirements appends s to the "requirements" field.
func (su *ServiceUpdate) AppendRequirements(s []string) *ServiceUpdate {
	su.mutation.AppendRequirements(s)
	return su
}

// ClearRequirements clears the value of the "requirements" field.
func (su *ServiceUpdate) ClearRequirements() *ServiceUpdate {
	su.mutation.ClearRequirements()
	return su
}

// SetRequiresAppointment sets the "requires_appointment" field.
func (su *ServiceUpdate) SetRequiresAppointment(b bool) *ServiceUpdate {
	su.mutation.SetRequiresAppointment(b)
	return su
}

// SetNillableRequiresAppointment sets the "requires_appointment" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableRequiresAppointment(b *bool) *ServiceUpdate {
	if b != nil {
		su.SetRequiresAppointment(*b)
	}
	return su
}

// SetActive sets the "active" field.
func (su *ServiceUpdate) SetActive(b bool) *ServiceUpdate {
	su.mutation.SetActive(b)
	return su
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableActive(b *bool) *ServiceUpdate {
	if b != nil {
		su.SetActive(*b)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *ServiceUpdate) SetCreatedAt(t time.Time) *ServiceUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableCreatedAt(t *time.Time) *ServiceUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ServiceUpdate) SetUpdatedAt(t time.Time) *ServiceUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (su *ServiceUpdate) SetClinicID(id uuid.UUID) *ServiceUpdate {
	su.mutation.SetClinicID(id)
	return su
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableClinicID(id *uuid.UUID) *ServiceUpdate {
	if id != nil {
		su = su.SetClinicID(*id)
	}
	return su
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (su *ServiceUpdate) SetClinic(c *Clinic) *ServiceUpdate {
	return su.SetClinicID(c.ID)
}

// AddAppointmentIDs adds the "appointments" edge to the Appointment entity by IDs.
func (su *ServiceUpdate) AddAppointmentIDs(ids ...uuid.UUID) *ServiceUpdate {
	su.mutation.AddAppointmentIDs(ids...)
	return su
}

// AddAppointments adds the "appointments" edges to the Appointment entity.
func (su *ServiceUpdate) AddAppointments(a ...*Appointment) *ServiceUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAppointmentIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (su *ServiceUpdate) AddOrderItemIDs(ids ...uuid.UUID) *ServiceUpdate {
	su.mutation.AddOrderItemIDs(ids...)
	return su
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (su *ServiceUpdate) AddOrderItems(o ...*OrderItem) *ServiceUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.AddOrderItemIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (su *ServiceUpdate) ClearClinic() *ServiceUpdate {
	su.mutation.ClearClinic()
	return su
}

// ClearAppointments clears all "appointments" edges to the Appointment entity.
func (su *ServiceUpdate) ClearAppointments() *ServiceUpdate {
	su.mutation.ClearAppointments()
	return su
}

// RemoveAppointmentIDs removes the "appointments" edge to Appointment entities by IDs.
func (su *ServiceUpdate) RemoveAppointmentIDs(ids ...uuid.UUID) *ServiceUpdate {
	su.mutation.RemoveAppointmentIDs(ids...)
	return su
}

// RemoveAppointments removes "appointments" edges to Appointment entities.
func (su *ServiceUpdate) RemoveAppointments(a ...*Appointment) *ServiceUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAppointmentIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (su *ServiceUpdate) ClearOrderItems() *ServiceUpdate {
	su.mutation.ClearOrderItems()
	return su
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (su *ServiceUpdate) RemoveOrderItemIDs(ids ...uuid.UUID) *ServiceUpdate {
	su.mutation.RemoveOrderItemIDs(ids...)
	return su
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (su *ServiceUpdate) RemoveOrderItems(o ...*OrderItem) *ServiceUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.RemoveOrderItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ServiceUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(service.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(service.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.Category(); ok {
		_spec.SetField(service.FieldCategory, field.TypeString, value)
	}
	if su.mutation.CategoryCleared() {
		_spec.ClearField(service.FieldCategory, field.TypeString)
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.SetField(service.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.AddField(service.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Duration(); ok {
		_spec.SetField(service.FieldDuration, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedDuration(); ok {
		_spec.AddField(service.FieldDuration, field.TypeInt, value)
	}
	if value, ok := su.mutation.Requirements(); ok {
		_spec.SetField(service.FieldRequirements, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedRequirements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldRequirements, value)
		})
	}
	if su.mutation.RequirementsCleared() {
		_spec.ClearField(service.FieldRequirements, field.TypeJSON)
	}
	if value, ok := su.mutation.RequiresAppointment(); ok {
		_spec.SetField(service.FieldRequiresAppointment, field.TypeBool, value)
	}
	if value, ok := su.mutation.Active(); ok {
		_spec.SetField(service.FieldActive, field.TypeBool, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(service.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(service.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.ClinicTable,
			Columns: []string{service.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.ClinicTable,
			Columns: []string{service.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.AppointmentsTable,
			Columns: []string{service.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !su.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.AppointmentsTable,
			Columns: []string{service.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.AppointmentsTable,
			Columns: []string{service.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.OrderItemsTable,
			Columns: []string{service.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !su.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.OrderItemsTable,
			Columns: []string{service.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.OrderItemsTable,
			Columns: []string{service.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetName sets the "name" field.
func (suo *ServiceUpdateOne) SetName(s string) *ServiceUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableName(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *ServiceUpdateOne) SetDescription(s string) *ServiceUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableDescription(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *ServiceUpdateOne) ClearDescription() *ServiceUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetCategory sets the "category" field.
func (suo *ServiceUpdateOne) SetCategory(s string) *ServiceUpdateOne {
	suo.mutation.SetCategory(s)
	return suo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableCategory(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetCategory(*s)
	}
	return suo
}

// ClearCategory clears the value of the "category" field.
func (suo *ServiceUpdateOne) ClearCategory() *ServiceUpdateOne {
	suo.mutation.ClearCategory()
	return suo
}

// SetPrice sets the "price" field.
func (suo *ServiceUpdateOne) SetPrice(f float64) *ServiceUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(f)
	return suo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillablePrice(f *float64) *ServiceUpdateOne {
	if f != nil {
		suo.SetPrice(*f)
	}
	return suo
}

// AddPrice adds f to the "price" field.
func (suo *ServiceUpdateOne) AddPrice(f float64) *ServiceUpdateOne {
	suo.mutation.AddPrice(f)
	return suo
}

// SetDuration sets the "duration" field.
func (suo *ServiceUpdateOne) SetDuration(i int) *ServiceUpdateOne {
	suo.mutation.ResetDuration()
	suo.mutation.SetDuration(i)
	return suo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableDuration(i *int) *ServiceUpdateOne {
	if i != nil {
		suo.SetDuration(*i)
	}
	return suo
}

// AddDuration adds i to the "duration" field.
func (suo *ServiceUpdateOne) AddDuration(i int) *ServiceUpdateOne {
	suo.mutation.AddDuration(i)
	return suo
}

// SetRequirements sets the "requirements" field.
func (suo *ServiceUpdateOne) SetRequirements(s []string) *ServiceUpdateOne {
	suo.mutation.SetRequirements(s)
	return suo
}

// AppendRequirements appends s to the "requirements" field.
func (suo *ServiceUpdateOne) AppendRequirements(s []string) *ServiceUpdateOne {
	suo.mutation.AppendRequirements(s)
	return suo
}

// ClearRequirements clears the value of the "requirements" field.
func (suo *ServiceUpdateOne) ClearRequirements() *ServiceUpdateOne {
	suo.mutation.ClearRequirements()
	return suo
}

// SetRequiresAppointment sets the "requires_appointment" field.
func (suo *ServiceUpdateOne) SetRequiresAppointment(b bool) *ServiceUpdateOne {
	suo.mutation.SetRequiresAppointment(b)
	return suo
}

// SetNillableRequiresAppointment sets the "requires_appointment" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableRequiresAppointment(b *bool) *ServiceUpdateOne {
	if b != nil {
		suo.SetRequiresAppointment(*b)
	}
	return suo
}

// SetActive sets the "active" field.
func (suo *ServiceUpdateOne) SetActive(b bool) *ServiceUpdateOne {
	suo.mutation.SetActive(b)
	return suo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableActive(b *bool) *ServiceUpdateOne {
	if b != nil {
		suo.SetActive(*b)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *ServiceUpdateOne) SetCreatedAt(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableCreatedAt(t *time.Time) *ServiceUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ServiceUpdateOne) SetUpdatedAt(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (suo *ServiceUpdateOne) SetClinicID(id uuid.UUID) *ServiceUpdateOne {
	suo.mutation.SetClinicID(id)
	return suo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableClinicID(id *uuid.UUID) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetClinicID(*id)
	}
	return suo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (suo *ServiceUpdateOne) SetClinic(c *Clinic) *ServiceUpdateOne {
	return suo.SetClinicID(c.ID)
}

// AddAppointmentIDs adds the "appointments" edge to the Appointment entity by IDs.
func (suo *ServiceUpdateOne) AddAppointmentIDs(ids ...uuid.UUID) *ServiceUpdateOne {
	suo.mutation.AddAppointmentIDs(ids...)
	return suo
}

// AddAppointments adds the "appointments" edges to the Appointment entity.
func (suo *ServiceUpdateOne) AddAppointments(a ...*Appointment) *ServiceUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAppointmentIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (suo *ServiceUpdateOne) AddOrderItemIDs(ids ...uuid.UUID) *ServiceUpdateOne {
	suo.mutation.AddOrderItemIDs(ids...)
	return suo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (suo *ServiceUpdateOne) AddOrderItems(o ...*OrderItem) *ServiceUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.AddOrderItemIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (suo *ServiceUpdateOne) ClearClinic() *ServiceUpdateOne {
	suo.mutation.ClearClinic()
	return suo
}

// ClearAppointments clears all "appointments" edges to the Appointment entity.
func (suo *ServiceUpdateOne) ClearAppointments() *ServiceUpdateOne {
	suo.mutation.ClearAppointments()
	return suo
}

// RemoveAppointmentIDs removes the "appointments" edge to Appointment entities by IDs.
func (suo *ServiceUpdateOne) RemoveAppointmentIDs(ids ...uuid.UUID) *ServiceUpdateOne {
	suo.mutation.RemoveAppointmentIDs(ids...)
	return suo
}

// RemoveAppointments removes "appointments" edges to Appointment entities.
func (suo *ServiceUpdateOne) RemoveAppointments(a ...*Appointment) *ServiceUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAppointmentIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (suo *ServiceUpdateOne) ClearOrderItems() *ServiceUpdateOne {
	suo.mutation.ClearOrderItems()
	return suo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (suo *ServiceUpdateOne) RemoveOrderItemIDs(ids ...uuid.UUID) *ServiceUpdateOne {
	suo.mutation.RemoveOrderItemIDs(ids...)
	return suo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (suo *ServiceUpdateOne) RemoveOrderItems(o ...*OrderItem) *ServiceUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.RemoveOrderItemIDs(ids...)
}

// Where appends a list predicates to the ServiceUpdate builder.
func (suo *ServiceUpdateOne) Where(ps ...predicate.Service) *ServiceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Service entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ServiceUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(service.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(service.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.Category(); ok {
		_spec.SetField(service.FieldCategory, field.TypeString, value)
	}
	if suo.mutation.CategoryCleared() {
		_spec.ClearField(service.FieldCategory, field.TypeString)
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.SetField(service.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.AddField(service.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Duration(); ok {
		_spec.SetField(service.FieldDuration, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedDuration(); ok {
		_spec.AddField(service.FieldDuration, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Requirements(); ok {
		_spec.SetField(service.FieldRequirements, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedRequirements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldRequirements, value)
		})
	}
	if suo.mutation.RequirementsCleared() {
		_spec.ClearField(service.FieldRequirements, field.TypeJSON)
	}
	if value, ok := suo.mutation.RequiresAppointment(); ok {
		_spec.SetField(service.FieldRequiresAppointment, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Active(); ok {
		_spec.SetField(service.FieldActive, field.TypeBool, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(service.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(service.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.ClinicTable,
			Columns: []string{service.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.ClinicTable,
			Columns: []string{service.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.AppointmentsTable,
			Columns: []string{service.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !suo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.AppointmentsTable,
			Columns: []string{service.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.AppointmentsTable,
			Columns: []string{service.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.OrderItemsTable,
			Columns: []string{service.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !suo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.OrderItemsTable,
			Columns: []string{service.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.OrderItemsTable,
			Columns: []string{service.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
