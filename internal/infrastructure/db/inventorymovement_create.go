// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/inventorymovement"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/google/uuid"
)

// InventoryMovementCreate is the builder for creating a InventoryMovement entity.
type InventoryMovementCreate struct {
	config
	mutation *InventoryMovementMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (imc *InventoryMovementCreate) SetType(i inventorymovement.Type) *InventoryMovementCreate {
	imc.mutation.SetType(i)
	return imc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableType(i *inventorymovement.Type) *InventoryMovementCreate {
	if i != nil {
		imc.SetType(*i)
	}
	return imc
}

// SetQuantity sets the "quantity" field.
func (imc *InventoryMovementCreate) SetQuantity(i int) *InventoryMovementCreate {
	imc.mutation.SetQuantity(i)
	return imc
}

// SetReferenceID sets the "reference_id" field.
func (imc *InventoryMovementCreate) SetReferenceID(s string) *InventoryMovementCreate {
	imc.mutation.SetReferenceID(s)
	return imc
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableReferenceID(s *string) *InventoryMovementCreate {
	if s != nil {
		imc.SetReferenceID(*s)
	}
	return imc
}

// SetNotes sets the "notes" field.
func (imc *InventoryMovementCreate) SetNotes(s string) *InventoryMovementCreate {
	imc.mutation.SetNotes(s)
	return imc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableNotes(s *string) *InventoryMovementCreate {
	if s != nil {
		imc.SetNotes(*s)
	}
	return imc
}

// SetPerformedBy sets the "performed_by" field.
func (imc *InventoryMovementCreate) SetPerformedBy(s string) *InventoryMovementCreate {
	imc.mutation.SetPerformedBy(s)
	return imc
}

// SetNillablePerformedBy sets the "performed_by" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillablePerformedBy(s *string) *InventoryMovementCreate {
	if s != nil {
		imc.SetPerformedBy(*s)
	}
	return imc
}

// SetMovementDate sets the "movement_date" field.
func (imc *InventoryMovementCreate) SetMovementDate(t time.Time) *InventoryMovementCreate {
	imc.mutation.SetMovementDate(t)
	return imc
}

// SetNillableMovementDate sets the "movement_date" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableMovementDate(t *time.Time) *InventoryMovementCreate {
	if t != nil {
		imc.SetMovementDate(*t)
	}
	return imc
}

// SetCreatedAt sets the "created_at" field.
func (imc *InventoryMovementCreate) SetCreatedAt(t time.Time) *InventoryMovementCreate {
	imc.mutation.SetCreatedAt(t)
	return imc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableCreatedAt(t *time.Time) *InventoryMovementCreate {
	if t != nil {
		imc.SetCreatedAt(*t)
	}
	return imc
}

// SetID sets the "id" field.
func (imc *InventoryMovementCreate) SetID(u uuid.UUID) *InventoryMovementCreate {
	imc.mutation.SetID(u)
	return imc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableID(u *uuid.UUID) *InventoryMovementCreate {
	if u != nil {
		imc.SetID(*u)
	}
	return imc
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (imc *InventoryMovementCreate) SetClinicID(id uuid.UUID) *InventoryMovementCreate {
	imc.mutation.SetClinicID(id)
	return imc
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableClinicID(id *uuid.UUID) *InventoryMovementCreate {
	if id != nil {
		imc = imc.SetClinicID(*id)
	}
	return imc
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (imc *InventoryMovementCreate) SetClinic(c *Clinic) *InventoryMovementCreate {
	return imc.SetClinicID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (imc *InventoryMovementCreate) SetProductID(id uuid.UUID) *InventoryMovementCreate {
	imc.mutation.SetProductID(id)
	return imc
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (imc *InventoryMovementCreate) SetNillableProductID(id *uuid.UUID) *InventoryMovementCreate {
	if id != nil {
		imc = imc.SetProductID(*id)
	}
	return imc
}

// SetProduct sets the "product" edge to the Product entity.
func (imc *InventoryMovementCreate) SetProduct(p *Product) *InventoryMovementCreate {
	return imc.SetProductID(p.ID)
}

// Mutation returns the InventoryMovementMutation object of the builder.
func (imc *InventoryMovementCreate) Mutation() *InventoryMovementMutation {
	return imc.mutation
}

// Save creates the InventoryMovement in the database.
func (imc *InventoryMovementCreate) Save(ctx context.Context) (*InventoryMovement, error) {
	imc.defaults()
	return withHooks(ctx, imc.sqlSave, imc.mutation, imc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (imc *InventoryMovementCreate) SaveX(ctx context.Context) *InventoryMovement {
	v, err := imc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imc *InventoryMovementCreate) Exec(ctx context.Context) error {
	_, err := imc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imc *InventoryMovementCreate) ExecX(ctx context.Context) {
	if err := imc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (imc *InventoryMovementCreate) defaults() {
	if _, ok := imc.mutation.GetType(); !ok {
		v := inventorymovement.DefaultType
		imc.mutation.SetType(v)
	}
	if _, ok := imc.mutation.MovementDate(); !ok {
		v := inventorymovement.DefaultMovementDate()
		imc.mutation.SetMovementDate(v)
	}
	if _, ok := imc.mutation.CreatedAt(); !ok {
		v := inventorymovement.DefaultCreatedAt()
		imc.mutation.SetCreatedAt(v)
	}
	if _, ok := imc.mutation.ID(); !ok {
		v := inventorymovement.DefaultID()
		imc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imc *InventoryMovementCreate) check() error {
	if _, ok := imc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "InventoryMovement.type"`)}
	}
	if v, ok := imc.mutation.GetType(); ok {
		if err := inventorymovement.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "InventoryMovement.type": %w`, err)}
		}
	}
	if _, ok := imc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`db: missing required field "InventoryMovement.quantity"`)}
	}
	if _, ok := imc.mutation.MovementDate(); !ok {
		return &ValidationError{Name: "movement_date", err: errors.New(`db: missing required field "InventoryMovement.movement_date"`)}
	}
	if _, ok := imc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "InventoryMovement.created_at"`)}
	}
	return nil
}

func (imc *InventoryMovementCreate) sqlSave(ctx context.Context) (*InventoryMovement, error) {
	if err := imc.check(); err != nil {
		return nil, err
	}
	_node, _spec := imc.createSpec()
	if err := sqlgraph.CreateNode(ctx, imc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	imc.mutation.id = &_node.ID
	imc.mutation.done = true
	return _node, nil
}

func (imc *InventoryMovementCreate) createSpec() (*InventoryMovement, *sqlgraph.CreateSpec) {
	var (
		_node = &InventoryMovement{config: imc.config}
		_spec = sqlgraph.NewCreateSpec(inventorymovement.Table, sqlgraph.NewFieldSpec(inventorymovement.FieldID, field.TypeUUID))
	)
	if id, ok := imc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := imc.mutation.GetType(); ok {
		_spec.SetField(inventorymovement.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := imc.mutation.Quantity(); ok {
		_spec.SetField(inventorymovement.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := imc.mutation.ReferenceID(); ok {
		_spec.SetField(inventorymovement.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := imc.mutation.Notes(); ok {
		_spec.SetField(inventorymovement.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := imc.mutation.PerformedBy(); ok {
		_spec.SetField(inventorymovement.FieldPerformedBy, field.TypeString, value)
		_node.PerformedBy = value
	}
	if value, ok := imc.mutation.MovementDate(); ok {
		_spec.SetField(inventorymovement.FieldMovementDate, field.TypeTime, value)
		_node.MovementDate = value
	}
	if value, ok := imc.mutation.CreatedAt(); ok {
		_spec.SetField(inventorymovement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := imc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ClinicTable,
			Columns: []string{inventorymovement.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clinic_inventory_movements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := imc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ProductTable,
			Columns: []string{inventorymovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_inventory_movements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InventoryMovementCreateBulk is the builder for creating many InventoryMovement entities in bulk.
type InventoryMovementCreateBulk struct {
	config
	err      error
	builders []*InventoryMovementCreate
}

// Save creates the InventoryMovement entities in the database.
func (imcb *InventoryMovementCreateBulk) Save(ctx context.Context) ([]*InventoryMovement, error) {
	if imcb.err != nil {
		return nil, imcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(imcb.builders))
	nodes := make([]*InventoryMovement, len(imcb.builders))
	mutators := make([]Mutator, len(imcb.builders))
	for i := range imcb.builders {
		func(i int, root context.Context) {
			builder := imcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryMovementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, imcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, imcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, imcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (imcb *InventoryMovementCreateBulk) SaveX(ctx context.Context) []*InventoryMovement {
	v, err := imcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imcb *InventoryMovementCreateBulk) Exec(ctx context.Context) error {
	_, err := imcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imcb *InventoryMovementCreateBulk) ExecX(ctx context.Context) {
	if err := imcb.Exec(ctx); err != nil {
		panic(err)
	}
}
