// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/billingrecord"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinicuser"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/document"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/inventorymovement"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/knowledgebase"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/productcategory"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/service"
	"github.com/google/uuid"
)

// ClinicQuery is the builder for querying Clinic entities.
type ClinicQuery struct {
	config
	ctx                    *QueryContext
	order                  []clinic.OrderOption
	inters                 []Interceptor
	predicates             []predicate.Clinic
	withClinicUsers        *ClinicUserQuery
	withPatients           *PatientQuery
	withDoctors            *DoctorQuery
	withServices           *ServiceQuery
	withAppointments       *AppointmentQuery
	withChatThreads        *ChatThreadQuery
	withKnowledgeBase      *KnowledgeBaseQuery
	withBillingRecords     *BillingRecordQuery
	withDocuments          *DocumentQuery
	withProducts           *ProductQuery
	withProductCategories  *ProductCategoryQuery
	withInventoryMovements *InventoryMovementQuery
	withOrders             *OrderQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClinicQuery builder.
func (cq *ClinicQuery) Where(ps ...predicate.Clinic) *ClinicQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *ClinicQuery) Limit(limit int) *ClinicQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *ClinicQuery) Offset(offset int) *ClinicQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *ClinicQuery) Unique(unique bool) *ClinicQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *ClinicQuery) Order(o ...clinic.OrderOption) *ClinicQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryClinicUsers chains the current query on the "clinic_users" edge.
func (cq *ClinicQuery) QueryClinicUsers() *ClinicUserQuery {
	query := (&ClinicUserClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(clinicuser.Table, clinicuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ClinicUsersTable, clinic.ClinicUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPatients chains the current query on the "patients" edge.
func (cq *ClinicQuery) QueryPatients() *PatientQuery {
	query := (&PatientClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.PatientsTable, clinic.PatientsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDoctors chains the current query on the "doctors" edge.
func (cq *ClinicQuery) QueryDoctors() *DoctorQuery {
	query := (&DoctorClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.DoctorsTable, clinic.DoctorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServices chains the current query on the "services" edge.
func (cq *ClinicQuery) QueryServices() *ServiceQuery {
	query := (&ServiceClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ServicesTable, clinic.ServicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppointments chains the current query on the "appointments" edge.
func (cq *ClinicQuery) QueryAppointments() *AppointmentQuery {
	query := (&AppointmentClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(appointment.Table, appointment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.AppointmentsTable, clinic.AppointmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChatThreads chains the current query on the "chat_threads" edge.
func (cq *ClinicQuery) QueryChatThreads() *ChatThreadQuery {
	query := (&ChatThreadClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(chatthread.Table, chatthread.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ChatThreadsTable, clinic.ChatThreadsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKnowledgeBase chains the current query on the "knowledge_base" edge.
func (cq *ClinicQuery) QueryKnowledgeBase() *KnowledgeBaseQuery {
	query := (&KnowledgeBaseClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(knowledgebase.Table, knowledgebase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.KnowledgeBaseTable, clinic.KnowledgeBaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingRecords chains the current query on the "billing_records" edge.
func (cq *ClinicQuery) QueryBillingRecords() *BillingRecordQuery {
	query := (&BillingRecordClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(billingrecord.Table, billingrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.BillingRecordsTable, clinic.BillingRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocuments chains the current query on the "documents" edge.
func (cq *ClinicQuery) QueryDocuments() *DocumentQuery {
	query := (&DocumentClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.DocumentsTable, clinic.DocumentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProducts chains the current query on the "products" edge.
func (cq *ClinicQuery) QueryProducts() *ProductQuery {
	query := (&ProductClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ProductsTable, clinic.ProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductCategories chains the current query on the "product_categories" edge.
func (cq *ClinicQuery) QueryProductCategories() *ProductCategoryQuery {
	query := (&ProductCategoryClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ProductCategoriesTable, clinic.ProductCategoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventoryMovements chains the current query on the "inventory_movements" edge.
func (cq *ClinicQuery) QueryInventoryMovements() *InventoryMovementQuery {
	query := (&InventoryMovementClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(inventorymovement.Table, inventorymovement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.InventoryMovementsTable, clinic.InventoryMovementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (cq *ClinicQuery) QueryOrders() *OrderQuery {
	query := (&OrderClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.OrdersTable, clinic.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Clinic entity from the query.
// Returns a *NotFoundError when no Clinic was found.
func (cq *ClinicQuery) First(ctx context.Context) (*Clinic, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{clinic.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *ClinicQuery) FirstX(ctx context.Context) *Clinic {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Clinic ID from the query.
// Returns a *NotFoundError when no Clinic ID was found.
func (cq *ClinicQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{clinic.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *ClinicQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Clinic entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Clinic entity is found.
// Returns a *NotFoundError when no Clinic entities are found.
func (cq *ClinicQuery) Only(ctx context.Context) (*Clinic, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{clinic.Label}
	default:
		return nil, &NotSingularError{clinic.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *ClinicQuery) OnlyX(ctx context.Context) *Clinic {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Clinic ID in the query.
// Returns a *NotSingularError when more than one Clinic ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *ClinicQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{clinic.Label}
	default:
		err = &NotSingularError{clinic.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *ClinicQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Clinics.
func (cq *ClinicQuery) All(ctx context.Context) ([]*Clinic, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Clinic, *ClinicQuery]()
	return withInterceptors[[]*Clinic](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *ClinicQuery) AllX(ctx context.Context) []*Clinic {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Clinic IDs.
func (cq *ClinicQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(clinic.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *ClinicQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *ClinicQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*ClinicQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *ClinicQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *ClinicQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *ClinicQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClinicQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *ClinicQuery) Clone() *ClinicQuery {
	if cq == nil {
		return nil
	}
	return &ClinicQuery{
		config:                 cq.config,
		ctx:                    cq.ctx.Clone(),
		order:                  append([]clinic.OrderOption{}, cq.order...),
		inters:                 append([]Interceptor{}, cq.inters...),
		predicates:             append([]predicate.Clinic{}, cq.predicates...),
		withClinicUsers:        cq.withClinicUsers.Clone(),
		withPatients:           cq.withPatients.Clone(),
		withDoctors:            cq.withDoctors.Clone(),
		withServices:           cq.withServices.Clone(),
		withAppointments:       cq.withAppointments.Clone(),
		withChatThreads:        cq.withChatThreads.Clone(),
		withKnowledgeBase:      cq.withKnowledgeBase.Clone(),
		withBillingRecords:     cq.withBillingRecords.Clone(),
		withDocuments:          cq.withDocuments.Clone(),
		withProducts:           cq.withProducts.Clone(),
		withProductCategories:  cq.withProductCategories.Clone(),
		withInventoryMovements: cq.withInventoryMovements.Clone(),
		withOrders:             cq.withOrders.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithClinicUsers tells the query-builder to eager-load the nodes that are connected to
// the "clinic_users" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicUsers(opts ...func(*ClinicUserQuery)) *ClinicQuery {
	query := (&ClinicUserClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicUsers = query
	return cq
}

// WithPatients tells the query-builder to eager-load the nodes that are connected to
// the "patients" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithPatients(opts ...func(*PatientQuery)) *ClinicQuery {
	query := (&PatientClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPatients = query
	return cq
}

// WithDoctors tells the query-builder to eager-load the nodes that are connected to
// the "doctors" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithDoctors(opts ...func(*DoctorQuery)) *ClinicQuery {
	query := (&DoctorClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDoctors = query
	return cq
}

// WithServices tells the query-builder to eager-load the nodes that are connected to
// the "services" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithServices(opts ...func(*ServiceQuery)) *ClinicQuery {
	query := (&ServiceClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withServices = query
	return cq
}

// WithAppointments tells the query-builder to eager-load the nodes that are connected to
// the "appointments" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithAppointments(opts ...func(*AppointmentQuery)) *ClinicQuery {
	query := (&AppointmentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withAppointments = query
	return cq
}

// WithChatThreads tells the query-builder to eager-load the nodes that are connected to
// the "chat_threads" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithChatThreads(opts ...func(*ChatThreadQuery)) *ClinicQuery {
	query := (&ChatThreadClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withChatThreads = query
	return cq
}

// WithKnowledgeBase tells the query-builder to eager-load the nodes that are connected to
// the "knowledge_base" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithKnowledgeBase(opts ...func(*KnowledgeBaseQuery)) *ClinicQuery {
	query := (&KnowledgeBaseClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withKnowledgeBase = query
	return cq
}

// WithBillingRecords tells the query-builder to eager-load the nodes that are connected to
// the "billing_records" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithBillingRecords(opts ...func(*BillingRecordQuery)) *ClinicQuery {
	query := (&BillingRecordClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withBillingRecords = query
	return cq
}

// WithDocuments tells the query-builder to eager-load the nodes that are connected to
// the "documents" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithDocuments(opts ...func(*DocumentQuery)) *ClinicQuery {
	query := (&DocumentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDocuments = query
	return cq
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithProducts(opts ...func(*ProductQuery)) *ClinicQuery {
	query := (&ProductClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withProducts = query
	return cq
}

// WithProductCategories tells the query-builder to eager-load the nodes that are connected to
// the "product_categories" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithProductCategories(opts ...func(*ProductCategoryQuery)) *ClinicQuery {
	query := (&ProductCategoryClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withProductCategories = query
	return cq
}

// WithInventoryMovements tells the query-builder to eager-load the nodes that are connected to
// the "inventory_movements" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithInventoryMovements(opts ...func(*InventoryMovementQuery)) *ClinicQuery {
	query := (&InventoryMovementClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withInventoryMovements = query
	return cq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithOrders(opts ...func(*OrderQuery)) *ClinicQuery {
	query := (&OrderClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withOrders = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Clinic.Query().
//		GroupBy(clinic.FieldName).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (cq *ClinicQuery) GroupBy(field string, fields ...string) *ClinicGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClinicGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = clinic.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Clinic.Query().
//		Select(clinic.FieldName).
//		Scan(ctx, &v)
func (cq *ClinicQuery) Select(fields ...string) *ClinicSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &ClinicSelect{ClinicQuery: cq}
	sbuild.label = clinic.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClinicSelect configured with the given aggregations.
func (cq *ClinicQuery) Aggregate(fns ...AggregateFunc) *ClinicSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *ClinicQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !clinic.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *ClinicQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Clinic, error) {
	var (
		nodes       = []*Clinic{}
		_spec       = cq.querySpec()
		loadedTypes = [13]bool{
			cq.withClinicUsers != nil,
			cq.withPatients != nil,
			cq.withDoctors != nil,
			cq.withServices != nil,
			cq.withAppointments != nil,
			cq.withChatThreads != nil,
			cq.withKnowledgeBase != nil,
			cq.withBillingRecords != nil,
			cq.withDocuments != nil,
			cq.withProducts != nil,
			cq.withProductCategories != nil,
			cq.withInventoryMovements != nil,
			cq.withOrders != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Clinic).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Clinic{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withClinicUsers; query != nil {
		if err := cq.loadClinicUsers(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicUsers = []*ClinicUser{} },
			func(n *Clinic, e *ClinicUser) { n.Edges.ClinicUsers = append(n.Edges.ClinicUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPatients; query != nil {
		if err := cq.loadPatients(ctx, query, nodes,
			func(n *Clinic) { n.Edges.Patients = []*Patient{} },
			func(n *Clinic, e *Patient) { n.Edges.Patients = append(n.Edges.Patients, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDoctors; query != nil {
		if err := cq.loadDoctors(ctx, query, nodes,
			func(n *Clinic) { n.Edges.Doctors = []*Doctor{} },
			func(n *Clinic, e *Doctor) { n.Edges.Doctors = append(n.Edges.Doctors, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withServices; query != nil {
		if err := cq.loadServices(ctx, query, nodes,
			func(n *Clinic) { n.Edges.Services = []*Service{} },
			func(n *Clinic, e *Service) { n.Edges.Services = append(n.Edges.Services, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withAppointments; query != nil {
		if err := cq.loadAppointments(ctx, query, nodes,
			func(n *Clinic) { n.Edges.Appointments = []*Appointment{} },
			func(n *Clinic, e *Appointment) { n.Edges.Appointments = append(n.Edges.Appointments, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withChatThreads; query != nil {
		if err := cq.loadChatThreads(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ChatThreads = []*ChatThread{} },
			func(n *Clinic, e *ChatThread) { n.Edges.ChatThreads = append(n.Edges.ChatThreads, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withKnowledgeBase; query != nil {
		if err := cq.loadKnowledgeBase(ctx, query, nodes,
			func(n *Clinic) { n.Edges.KnowledgeBase = []*KnowledgeBase{} },
			func(n *Clinic, e *KnowledgeBase) { n.Edges.KnowledgeBase = append(n.Edges.KnowledgeBase, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withBillingRecords; query != nil {
		if err := cq.loadBillingRecords(ctx, query, nodes,
			func(n *Clinic) { n.Edges.BillingRecords = []*BillingRecord{} },
			func(n *Clinic, e *BillingRecord) { n.Edges.BillingRecords = append(n.Edges.BillingRecords, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDocuments; query != nil {
		if err := cq.loadDocuments(ctx, query, nodes,
			func(n *Clinic) { n.Edges.Documents = []*Document{} },
			func(n *Clinic, e *Document) { n.Edges.Documents = append(n.Edges.Documents, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withProducts; query != nil {
		if err := cq.loadProducts(ctx, query, nodes,
			func(n *Clinic) { n.Edges.Products = []*Product{} },
			func(n *Clinic, e *Product) { n.Edges.Products = append(n.Edges.Products, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withProductCategories; query != nil {
		if err := cq.loadProductCategories(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ProductCategories = []*ProductCategory{} },
			func(n *Clinic, e *ProductCategory) { n.Edges.ProductCategories = append(n.Edges.ProductCategories, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withInventoryMovements; query != nil {
		if err := cq.loadInventoryMovements(ctx, query, nodes,
			func(n *Clinic) { n.Edges.InventoryMovements = []*InventoryMovement{} },
			func(n *Clinic, e *InventoryMovement) {
				n.Edges.InventoryMovements = append(n.Edges.InventoryMovements, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withOrders; query != nil {
		if err := cq.loadOrders(ctx, query, nodes,
			func(n *Clinic) { n.Edges.Orders = []*Order{} },
			func(n *Clinic, e *Order) { n.Edges.Orders = append(n.Edges.Orders, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *ClinicQuery) loadClinicUsers(ctx context.Context, query *ClinicUserQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *ClinicUser)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(clinicuser.FieldClinicID)
	}
	query.Where(predicate.ClinicUser(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ClinicUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ClinicID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadPatients(ctx context.Context, query *PatientQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Patient)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.PatientsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_patients
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_patients" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_patients" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadDoctors(ctx context.Context, query *DoctorQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Doctor)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Doctor(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.DoctorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_doctors
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_doctors" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_doctors" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadServices(ctx context.Context, query *ServiceQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Service)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Service(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ServicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_services
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_services" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_services" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadAppointments(ctx context.Context, query *AppointmentQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Appointment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Appointment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.AppointmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_appointments
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_appointments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_appointments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadChatThreads(ctx context.Context, query *ChatThreadQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *ChatThread)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ChatThread(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ChatThreadsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_chat_threads
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_chat_threads" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_chat_threads" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadKnowledgeBase(ctx context.Context, query *KnowledgeBaseQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *KnowledgeBase)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.KnowledgeBase(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.KnowledgeBaseColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_knowledge_base
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_knowledge_base" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_knowledge_base" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadBillingRecords(ctx context.Context, query *BillingRecordQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *BillingRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BillingRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.BillingRecordsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_billing_records
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_billing_records" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_billing_records" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadDocuments(ctx context.Context, query *DocumentQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Document)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Document(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.DocumentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_documents
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_documents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_documents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadProducts(ctx context.Context, query *ProductQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Product)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Product(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ProductsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_products
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_products" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_products" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadProductCategories(ctx context.Context, query *ProductCategoryQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *ProductCategory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ProductCategoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_product_categories
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_product_categories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_product_categories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadInventoryMovements(ctx context.Context, query *InventoryMovementQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *InventoryMovement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InventoryMovement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.InventoryMovementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_inventory_movements
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_inventory_movements" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_inventory_movements" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.OrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.clinic_orders
		if fk == nil {
			return fmt.Errorf(`foreign-key "clinic_orders" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_orders" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cq *ClinicQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *ClinicQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(clinic.Table, clinic.Columns, sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clinic.FieldID)
		for i := range fields {
			if fields[i] != clinic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *ClinicQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(clinic.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = clinic.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClinicGroupBy is the group-by builder for Clinic entities.
type ClinicGroupBy struct {
	selector
	build *ClinicQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *ClinicGroupBy) Aggregate(fns ...AggregateFunc) *ClinicGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *ClinicGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClinicQuery, *ClinicGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *ClinicGroupBy) sqlScan(ctx context.Context, root *ClinicQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClinicSelect is the builder for selecting fields of Clinic entities.
type ClinicSelect struct {
	*ClinicQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *ClinicSelect) Aggregate(fns ...AggregateFunc) *ClinicSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *ClinicSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClinicQuery, *ClinicSelect](ctx, cs.ClinicQuery, cs, cs.inters, v)
}

func (cs *ClinicSelect) sqlScan(ctx context.Context, root *ClinicQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
