// Code generated by ent, DO NOT EDIT.

package clinicuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the clinicuser type in the database.
	Label = "clinic_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClinicID holds the string denoting the clinic_id field in the database.
	FieldClinicID = "clinic_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the clinicuser in the database.
	Table = "clinic_users"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "clinic_users"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinics"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "clinic_users"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for clinicuser fields.
var Columns = []string{
	FieldID,
	FieldClinicID,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ClinicUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClinicID orders the results by the clinic_id field.
func ByClinicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
