// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/google/uuid"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// patient's whatsapp number
	WhatsappNumber string `json:"whatsapp_number,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// BirthDate holds the value of the "birth_date" field.
	BirthDate time.Time `json:"birth_date,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender patient.Gender `json:"gender,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// MedicalHistory holds the value of the "medical_history" field.
	MedicalHistory map[string]interface{} `json:"medical_history,omitempty"`
	// Allergies holds the value of the "allergies" field.
	Allergies []string `json:"allergies,omitempty"`
	// EmergencyContactName holds the value of the "emergency_contact_name" field.
	EmergencyContactName string `json:"emergency_contact_name,omitempty"`
	// EmergencyContactPhone holds the value of the "emergency_contact_phone" field.
	EmergencyContactPhone string `json:"emergency_contact_phone,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges           PatientEdges `json:"edges"`
	clinic_patients *uuid.UUID
	selectValues    sql.SelectValues
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Appointments holds the value of the appointments edge.
	Appointments []*Appointment `json:"appointments,omitempty"`
	// ChatThreads holds the value of the chat_threads edge.
	ChatThreads []*ChatThread `json:"chat_threads,omitempty"`
	// Documents holds the value of the documents edge.
	Documents []*Document `json:"documents,omitempty"`
	// BillingRecords holds the value of the billing_records edge.
	BillingRecords []*BillingRecord `json:"billing_records,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) ClinicOrErr() (*Clinic, error) {
	if e.Clinic != nil {
		return e.Clinic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: clinic.Label}
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// AppointmentsOrErr returns the Appointments value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) AppointmentsOrErr() ([]*Appointment, error) {
	if e.loadedTypes[1] {
		return e.Appointments, nil
	}
	return nil, &NotLoadedError{edge: "appointments"}
}

// ChatThreadsOrErr returns the ChatThreads value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) ChatThreadsOrErr() ([]*ChatThread, error) {
	if e.loadedTypes[2] {
		return e.ChatThreads, nil
	}
	return nil, &NotLoadedError{edge: "chat_threads"}
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) DocumentsOrErr() ([]*Document, error) {
	if e.loadedTypes[3] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// BillingRecordsOrErr returns the BillingRecords value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) BillingRecordsOrErr() ([]*BillingRecord, error) {
	if e.loadedTypes[4] {
		return e.BillingRecords, nil
	}
	return nil, &NotLoadedError{edge: "billing_records"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[5] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case patient.FieldMedicalHistory, patient.FieldAllergies:
			values[i] = new([]byte)
		case patient.FieldActive:
			values[i] = new(sql.NullBool)
		case patient.FieldWhatsappNumber, patient.FieldName, patient.FieldEmail, patient.FieldPhone, patient.FieldGender, patient.FieldAddress, patient.FieldEmergencyContactName, patient.FieldEmergencyContactPhone:
			values[i] = new(sql.NullString)
		case patient.FieldBirthDate, patient.FieldCreatedAt, patient.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case patient.FieldID:
			values[i] = new(uuid.UUID)
		case patient.ForeignKeys[0]: // clinic_patients
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case patient.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case patient.FieldWhatsappNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whatsapp_number", values[i])
			} else if value.Valid {
				pa.WhatsappNumber = value.String
			}
		case patient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case patient.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pa.Email = value.String
			}
		case patient.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pa.Phone = value.String
			}
		case patient.FieldBirthDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				pa.BirthDate = value.Time
			}
		case patient.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				pa.Gender = patient.Gender(value.String)
			}
		case patient.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				pa.Address = value.String
			}
		case patient.FieldMedicalHistory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field medical_history", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pa.MedicalHistory); err != nil {
					return fmt.Errorf("unmarshal field medical_history: %w", err)
				}
			}
		case patient.FieldAllergies:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allergies", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pa.Allergies); err != nil {
					return fmt.Errorf("unmarshal field allergies: %w", err)
				}
			}
		case patient.FieldEmergencyContactName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field emergency_contact_name", values[i])
			} else if value.Valid {
				pa.EmergencyContactName = value.String
			}
		case patient.FieldEmergencyContactPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field emergency_contact_phone", values[i])
			} else if value.Valid {
				pa.EmergencyContactPhone = value.String
			}
		case patient.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				pa.Active = value.Bool
			}
		case patient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case patient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case patient.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_patients", values[i])
			} else if value.Valid {
				pa.clinic_patients = new(uuid.UUID)
				*pa.clinic_patients = *value.S.(*uuid.UUID)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Patient.
// This includes values selected through modifiers, order, etc.
func (pa *Patient) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the Patient entity.
func (pa *Patient) QueryClinic() *ClinicQuery {
	return NewPatientClient(pa.config).QueryClinic(pa)
}

// QueryAppointments queries the "appointments" edge of the Patient entity.
func (pa *Patient) QueryAppointments() *AppointmentQuery {
	return NewPatientClient(pa.config).QueryAppointments(pa)
}

// QueryChatThreads queries the "chat_threads" edge of the Patient entity.
func (pa *Patient) QueryChatThreads() *ChatThreadQuery {
	return NewPatientClient(pa.config).QueryChatThreads(pa)
}

// QueryDocuments queries the "documents" edge of the Patient entity.
func (pa *Patient) QueryDocuments() *DocumentQuery {
	return NewPatientClient(pa.config).QueryDocuments(pa)
}

// QueryBillingRecords queries the "billing_records" edge of the Patient entity.
func (pa *Patient) QueryBillingRecords() *BillingRecordQuery {
	return NewPatientClient(pa.config).QueryBillingRecords(pa)
}

// QueryOrders queries the "orders" edge of the Patient entity.
func (pa *Patient) QueryOrders() *OrderQuery {
	return NewPatientClient(pa.config).QueryOrders(pa)
}

// Update returns a builder for updating this Patient.
// Note that you need to call Patient.Unwrap() before calling this method if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return NewPatientClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Patient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("db: Patient is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("whatsapp_number=")
	builder.WriteString(pa.WhatsappNumber)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pa.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(pa.Phone)
	builder.WriteString(", ")
	builder.WriteString("birth_date=")
	builder.WriteString(pa.BirthDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", pa.Gender))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(pa.Address)
	builder.WriteString(", ")
	builder.WriteString("medical_history=")
	builder.WriteString(fmt.Sprintf("%v", pa.MedicalHistory))
	builder.WriteString(", ")
	builder.WriteString("allergies=")
	builder.WriteString(fmt.Sprintf("%v", pa.Allergies))
	builder.WriteString(", ")
	builder.WriteString("emergency_contact_name=")
	builder.WriteString(pa.EmergencyContactName)
	builder.WriteString(", ")
	builder.WriteString("emergency_contact_phone=")
	builder.WriteString(pa.EmergencyContactPhone)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", pa.Active))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient
