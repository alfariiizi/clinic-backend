// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointmentreminder"
	"github.com/google/uuid"
)

// AppointmentReminder is the model entity for the AppointmentReminder schema.
type AppointmentReminder struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type appointmentreminder.Type `json:"type,omitempty"`
	// ScheduledTime holds the value of the "scheduled_time" field.
	ScheduledTime time.Time `json:"scheduled_time,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Status holds the value of the "status" field.
	Status appointmentreminder.Status `json:"status,omitempty"`
	// SentAt holds the value of the "sent_at" field.
	SentAt time.Time `json:"sent_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppointmentReminderQuery when eager-loading is set.
	Edges                 AppointmentReminderEdges `json:"edges"`
	appointment_reminders *uuid.UUID
	selectValues          sql.SelectValues
}

// AppointmentReminderEdges holds the relations/edges for other nodes in the graph.
type AppointmentReminderEdges struct {
	// Appointment holds the value of the appointment edge.
	Appointment *Appointment `json:"appointment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppointmentOrErr returns the Appointment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentReminderEdges) AppointmentOrErr() (*Appointment, error) {
	if e.Appointment != nil {
		return e.Appointment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: appointment.Label}
	}
	return nil, &NotLoadedError{edge: "appointment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppointmentReminder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appointmentreminder.FieldType, appointmentreminder.FieldMessage, appointmentreminder.FieldStatus:
			values[i] = new(sql.NullString)
		case appointmentreminder.FieldScheduledTime, appointmentreminder.FieldSentAt, appointmentreminder.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case appointmentreminder.FieldID:
			values[i] = new(uuid.UUID)
		case appointmentreminder.ForeignKeys[0]: // appointment_reminders
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppointmentReminder fields.
func (ar *AppointmentReminder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appointmentreminder.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ar.ID = *value
			}
		case appointmentreminder.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ar.Type = appointmentreminder.Type(value.String)
			}
		case appointmentreminder.FieldScheduledTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_time", values[i])
			} else if value.Valid {
				ar.ScheduledTime = value.Time
			}
		case appointmentreminder.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				ar.Message = value.String
			}
		case appointmentreminder.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ar.Status = appointmentreminder.Status(value.String)
			}
		case appointmentreminder.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				ar.SentAt = value.Time
			}
		case appointmentreminder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ar.CreatedAt = value.Time
			}
		case appointmentreminder.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field appointment_reminders", values[i])
			} else if value.Valid {
				ar.appointment_reminders = new(uuid.UUID)
				*ar.appointment_reminders = *value.S.(*uuid.UUID)
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppointmentReminder.
// This includes values selected through modifiers, order, etc.
func (ar *AppointmentReminder) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryAppointment queries the "appointment" edge of the AppointmentReminder entity.
func (ar *AppointmentReminder) QueryAppointment() *AppointmentQuery {
	return NewAppointmentReminderClient(ar.config).QueryAppointment(ar)
}

// Update returns a builder for updating this AppointmentReminder.
// Note that you need to call AppointmentReminder.Unwrap() before calling this method if this AppointmentReminder
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AppointmentReminder) Update() *AppointmentReminderUpdateOne {
	return NewAppointmentReminderClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the AppointmentReminder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AppointmentReminder) Unwrap() *AppointmentReminder {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("db: AppointmentReminder is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AppointmentReminder) String() string {
	var builder strings.Builder
	builder.WriteString("AppointmentReminder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ar.Type))
	builder.WriteString(", ")
	builder.WriteString("scheduled_time=")
	builder.WriteString(ar.ScheduledTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(ar.Message)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ar.Status))
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(ar.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ar.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppointmentReminders is a parsable slice of AppointmentReminder.
type AppointmentReminders []*AppointmentReminder
