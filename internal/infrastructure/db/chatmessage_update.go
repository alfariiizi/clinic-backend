// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatmessage"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ChatMessageUpdate is the builder for updating ChatMessage entities.
type ChatMessageUpdate struct {
	config
	hooks    []Hook
	mutation *ChatMessageMutation
}

// Where appends a list predicates to the ChatMessageUpdate builder.
func (cmu *ChatMessageUpdate) Where(ps ...predicate.ChatMessage) *ChatMessageUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetWhatsappMessageID sets the "whatsapp_message_id" field.
func (cmu *ChatMessageUpdate) SetWhatsappMessageID(s string) *ChatMessageUpdate {
	cmu.mutation.SetWhatsappMessageID(s)
	return cmu
}

// SetNillableWhatsappMessageID sets the "whatsapp_message_id" field if the given value is not nil.
func (cmu *ChatMessageUpdate) SetNillableWhatsappMessageID(s *string) *ChatMessageUpdate {
	if s != nil {
		cmu.SetWhatsappMessageID(*s)
	}
	return cmu
}

// ClearWhatsappMessageID clears the value of the "whatsapp_message_id" field.
func (cmu *ChatMessageUpdate) ClearWhatsappMessageID() *ChatMessageUpdate {
	cmu.mutation.ClearWhatsappMessageID()
	return cmu
}

// SetSenderType sets the "sender_type" field.
func (cmu *ChatMessageUpdate) SetSenderType(ct chatmessage.SenderType) *ChatMessageUpdate {
	cmu.mutation.SetSenderType(ct)
	return cmu
}

// SetNillableSenderType sets the "sender_type" field if the given value is not nil.
func (cmu *ChatMessageUpdate) SetNillableSenderType(ct *chatmessage.SenderType) *ChatMessageUpdate {
	if ct != nil {
		cmu.SetSenderType(*ct)
	}
	return cmu
}

// SetMessageType sets the "message_type" field.
func (cmu *ChatMessageUpdate) SetMessageType(ct chatmessage.MessageType) *ChatMessageUpdate {
	cmu.mutation.SetMessageType(ct)
	return cmu
}

// SetNillableMessageType sets the "message_type" field if the given value is not nil.
func (cmu *ChatMessageUpdate) SetNillableMessageType(ct *chatmessage.MessageType) *ChatMessageUpdate {
	if ct != nil {
		cmu.SetMessageType(*ct)
	}
	return cmu
}

// SetContent sets the "content" field.
func (cmu *ChatMessageUpdate) SetContent(s string) *ChatMessageUpdate {
	cmu.mutation.SetContent(s)
	return cmu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cmu *ChatMessageUpdate) SetNillableContent(s *string) *ChatMessageUpdate {
	if s != nil {
		cmu.SetContent(*s)
	}
	return cmu
}

// SetMetadata sets the "metadata" field.
func (cmu *ChatMessageUpdate) SetMetadata(m map[string]interface{}) *ChatMessageUpdate {
	cmu.mutation.SetMetadata(m)
	return cmu
}

// ClearMetadata clears the value of the "metadata" field.
func (cmu *ChatMessageUpdate) ClearMetadata() *ChatMessageUpdate {
	cmu.mutation.ClearMetadata()
	return cmu
}

// SetAiToolCall sets the "ai_tool_call" field.
func (cmu *ChatMessageUpdate) SetAiToolCall(s string) *ChatMessageUpdate {
	cmu.mutation.SetAiToolCall(s)
	return cmu
}

// SetNillableAiToolCall sets the "ai_tool_call" field if the given value is not nil.
func (cmu *ChatMessageUpdate) SetNillableAiToolCall(s *string) *ChatMessageUpdate {
	if s != nil {
		cmu.SetAiToolCall(*s)
	}
	return cmu
}

// ClearAiToolCall clears the value of the "ai_tool_call" field.
func (cmu *ChatMessageUpdate) ClearAiToolCall() *ChatMessageUpdate {
	cmu.mutation.ClearAiToolCall()
	return cmu
}

// SetAiToolResult sets the "ai_tool_result" field.
func (cmu *ChatMessageUpdate) SetAiToolResult(m map[string]interface{}) *ChatMessageUpdate {
	cmu.mutation.SetAiToolResult(m)
	return cmu
}

// ClearAiToolResult clears the value of the "ai_tool_result" field.
func (cmu *ChatMessageUpdate) ClearAiToolResult() *ChatMessageUpdate {
	cmu.mutation.ClearAiToolResult()
	return cmu
}

// SetIsRead sets the "is_read" field.
func (cmu *ChatMessageUpdate) SetIsRead(b bool) *ChatMessageUpdate {
	cmu.mutation.SetIsRead(b)
	return cmu
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (cmu *ChatMessageUpdate) SetNillableIsRead(b *bool) *ChatMessageUpdate {
	if b != nil {
		cmu.SetIsRead(*b)
	}
	return cmu
}

// SetCreatedAt sets the "created_at" field.
func (cmu *ChatMessageUpdate) SetCreatedAt(t time.Time) *ChatMessageUpdate {
	cmu.mutation.SetCreatedAt(t)
	return cmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmu *ChatMessageUpdate) SetNillableCreatedAt(t *time.Time) *ChatMessageUpdate {
	if t != nil {
		cmu.SetCreatedAt(*t)
	}
	return cmu
}

// SetThreadID sets the "thread" edge to the ChatThread entity by ID.
func (cmu *ChatMessageUpdate) SetThreadID(id uuid.UUID) *ChatMessageUpdate {
	cmu.mutation.SetThreadID(id)
	return cmu
}

// SetNillableThreadID sets the "thread" edge to the ChatThread entity by ID if the given value is not nil.
func (cmu *ChatMessageUpdate) SetNillableThreadID(id *uuid.UUID) *ChatMessageUpdate {
	if id != nil {
		cmu = cmu.SetThreadID(*id)
	}
	return cmu
}

// SetThread sets the "thread" edge to the ChatThread entity.
func (cmu *ChatMessageUpdate) SetThread(c *ChatThread) *ChatMessageUpdate {
	return cmu.SetThreadID(c.ID)
}

// Mutation returns the ChatMessageMutation object of the builder.
func (cmu *ChatMessageUpdate) Mutation() *ChatMessageMutation {
	return cmu.mutation
}

// ClearThread clears the "thread" edge to the ChatThread entity.
func (cmu *ChatMessageUpdate) ClearThread() *ChatMessageUpdate {
	cmu.mutation.ClearThread()
	return cmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ChatMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ChatMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ChatMessageUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ChatMessageUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmu *ChatMessageUpdate) check() error {
	if v, ok := cmu.mutation.SenderType(); ok {
		if err := chatmessage.SenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "sender_type", err: fmt.Errorf(`db: validator failed for field "ChatMessage.sender_type": %w`, err)}
		}
	}
	if v, ok := cmu.mutation.MessageType(); ok {
		if err := chatmessage.MessageTypeValidator(v); err != nil {
			return &ValidationError{Name: "message_type", err: fmt.Errorf(`db: validator failed for field "ChatMessage.message_type": %w`, err)}
		}
	}
	return nil
}

func (cmu *ChatMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatmessage.Table, chatmessage.Columns, sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.WhatsappMessageID(); ok {
		_spec.SetField(chatmessage.FieldWhatsappMessageID, field.TypeString, value)
	}
	if cmu.mutation.WhatsappMessageIDCleared() {
		_spec.ClearField(chatmessage.FieldWhatsappMessageID, field.TypeString)
	}
	if value, ok := cmu.mutation.SenderType(); ok {
		_spec.SetField(chatmessage.FieldSenderType, field.TypeEnum, value)
	}
	if value, ok := cmu.mutation.MessageType(); ok {
		_spec.SetField(chatmessage.FieldMessageType, field.TypeEnum, value)
	}
	if value, ok := cmu.mutation.Content(); ok {
		_spec.SetField(chatmessage.FieldContent, field.TypeString, value)
	}
	if value, ok := cmu.mutation.Metadata(); ok {
		_spec.SetField(chatmessage.FieldMetadata, field.TypeJSON, value)
	}
	if cmu.mutation.MetadataCleared() {
		_spec.ClearField(chatmessage.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cmu.mutation.AiToolCall(); ok {
		_spec.SetField(chatmessage.FieldAiToolCall, field.TypeString, value)
	}
	if cmu.mutation.AiToolCallCleared() {
		_spec.ClearField(chatmessage.FieldAiToolCall, field.TypeString)
	}
	if value, ok := cmu.mutation.AiToolResult(); ok {
		_spec.SetField(chatmessage.FieldAiToolResult, field.TypeJSON, value)
	}
	if cmu.mutation.AiToolResultCleared() {
		_spec.ClearField(chatmessage.FieldAiToolResult, field.TypeJSON)
	}
	if value, ok := cmu.mutation.IsRead(); ok {
		_spec.SetField(chatmessage.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := cmu.mutation.CreatedAt(); ok {
		_spec.SetField(chatmessage.FieldCreatedAt, field.TypeTime, value)
	}
	if cmu.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.ThreadTable,
			Columns: []string{chatmessage.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.ThreadTable,
			Columns: []string{chatmessage.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// ChatMessageUpdateOne is the builder for updating a single ChatMessage entity.
type ChatMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatMessageMutation
}

// SetWhatsappMessageID sets the "whatsapp_message_id" field.
func (cmuo *ChatMessageUpdateOne) SetWhatsappMessageID(s string) *ChatMessageUpdateOne {
	cmuo.mutation.SetWhatsappMessageID(s)
	return cmuo
}

// SetNillableWhatsappMessageID sets the "whatsapp_message_id" field if the given value is not nil.
func (cmuo *ChatMessageUpdateOne) SetNillableWhatsappMessageID(s *string) *ChatMessageUpdateOne {
	if s != nil {
		cmuo.SetWhatsappMessageID(*s)
	}
	return cmuo
}

// ClearWhatsappMessageID clears the value of the "whatsapp_message_id" field.
func (cmuo *ChatMessageUpdateOne) ClearWhatsappMessageID() *ChatMessageUpdateOne {
	cmuo.mutation.ClearWhatsappMessageID()
	return cmuo
}

// SetSenderType sets the "sender_type" field.
func (cmuo *ChatMessageUpdateOne) SetSenderType(ct chatmessage.SenderType) *ChatMessageUpdateOne {
	cmuo.mutation.SetSenderType(ct)
	return cmuo
}

// SetNillableSenderType sets the "sender_type" field if the given value is not nil.
func (cmuo *ChatMessageUpdateOne) SetNillableSenderType(ct *chatmessage.SenderType) *ChatMessageUpdateOne {
	if ct != nil {
		cmuo.SetSenderType(*ct)
	}
	return cmuo
}

// SetMessageType sets the "message_type" field.
func (cmuo *ChatMessageUpdateOne) SetMessageType(ct chatmessage.MessageType) *ChatMessageUpdateOne {
	cmuo.mutation.SetMessageType(ct)
	return cmuo
}

// SetNillableMessageType sets the "message_type" field if the given value is not nil.
func (cmuo *ChatMessageUpdateOne) SetNillableMessageType(ct *chatmessage.MessageType) *ChatMessageUpdateOne {
	if ct != nil {
		cmuo.SetMessageType(*ct)
	}
	return cmuo
}

// SetContent sets the "content" field.
func (cmuo *ChatMessageUpdateOne) SetContent(s string) *ChatMessageUpdateOne {
	cmuo.mutation.SetContent(s)
	return cmuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cmuo *ChatMessageUpdateOne) SetNillableContent(s *string) *ChatMessageUpdateOne {
	if s != nil {
		cmuo.SetContent(*s)
	}
	return cmuo
}

// SetMetadata sets the "metadata" field.
func (cmuo *ChatMessageUpdateOne) SetMetadata(m map[string]interface{}) *ChatMessageUpdateOne {
	cmuo.mutation.SetMetadata(m)
	return cmuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cmuo *ChatMessageUpdateOne) ClearMetadata() *ChatMessageUpdateOne {
	cmuo.mutation.ClearMetadata()
	return cmuo
}

// SetAiToolCall sets the "ai_tool_call" field.
func (cmuo *ChatMessageUpdateOne) SetAiToolCall(s string) *ChatMessageUpdateOne {
	cmuo.mutation.SetAiToolCall(s)
	return cmuo
}

// SetNillableAiToolCall sets the "ai_tool_call" field if the given value is not nil.
func (cmuo *ChatMessageUpdateOne) SetNillableAiToolCall(s *string) *ChatMessageUpdateOne {
	if s != nil {
		cmuo.SetAiToolCall(*s)
	}
	return cmuo
}

// ClearAiToolCall clears the value of the "ai_tool_call" field.
func (cmuo *ChatMessageUpdateOne) ClearAiToolCall() *ChatMessageUpdateOne {
	cmuo.mutation.ClearAiToolCall()
	return cmuo
}

// SetAiToolResult sets the "ai_tool_result" field.
func (cmuo *ChatMessageUpdateOne) SetAiToolResult(m map[string]interface{}) *ChatMessageUpdateOne {
	cmuo.mutation.SetAiToolResult(m)
	return cmuo
}

// ClearAiToolResult clears the value of the "ai_tool_result" field.
func (cmuo *ChatMessageUpdateOne) ClearAiToolResult() *ChatMessageUpdateOne {
	cmuo.mutation.ClearAiToolResult()
	return cmuo
}

// SetIsRead sets the "is_read" field.
func (cmuo *ChatMessageUpdateOne) SetIsRead(b bool) *ChatMessageUpdateOne {
	cmuo.mutation.SetIsRead(b)
	return cmuo
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (cmuo *ChatMessageUpdateOne) SetNillableIsRead(b *bool) *ChatMessageUpdateOne {
	if b != nil {
		cmuo.SetIsRead(*b)
	}
	return cmuo
}

// SetCreatedAt sets the "created_at" field.
func (cmuo *ChatMessageUpdateOne) SetCreatedAt(t time.Time) *ChatMessageUpdateOne {
	cmuo.mutation.SetCreatedAt(t)
	return cmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmuo *ChatMessageUpdateOne) SetNillableCreatedAt(t *time.Time) *ChatMessageUpdateOne {
	if t != nil {
		cmuo.SetCreatedAt(*t)
	}
	return cmuo
}

// SetThreadID sets the "thread" edge to the ChatThread entity by ID.
func (cmuo *ChatMessageUpdateOne) SetThreadID(id uuid.UUID) *ChatMessageUpdateOne {
	cmuo.mutation.SetThreadID(id)
	return cmuo
}

// SetNillableThreadID sets the "thread" edge to the ChatThread entity by ID if the given value is not nil.
func (cmuo *ChatMessageUpdateOne) SetNillableThreadID(id *uuid.UUID) *ChatMessageUpdateOne {
	if id != nil {
		cmuo = cmuo.SetThreadID(*id)
	}
	return cmuo
}

// SetThread sets the "thread" edge to the ChatThread entity.
func (cmuo *ChatMessageUpdateOne) SetThread(c *ChatThread) *ChatMessageUpdateOne {
	return cmuo.SetThreadID(c.ID)
}

// Mutation returns the ChatMessageMutation object of the builder.
func (cmuo *ChatMessageUpdateOne) Mutation() *ChatMessageMutation {
	return cmuo.mutation
}

// ClearThread clears the "thread" edge to the ChatThread entity.
func (cmuo *ChatMessageUpdateOne) ClearThread() *ChatMessageUpdateOne {
	cmuo.mutation.ClearThread()
	return cmuo
}

// Where appends a list predicates to the ChatMessageUpdate builder.
func (cmuo *ChatMessageUpdateOne) Where(ps ...predicate.ChatMessage) *ChatMessageUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ChatMessageUpdateOne) Select(field string, fields ...string) *ChatMessageUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ChatMessage entity.
func (cmuo *ChatMessageUpdateOne) Save(ctx context.Context) (*ChatMessage, error) {
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ChatMessageUpdateOne) SaveX(ctx context.Context) *ChatMessage {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ChatMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ChatMessageUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmuo *ChatMessageUpdateOne) check() error {
	if v, ok := cmuo.mutation.SenderType(); ok {
		if err := chatmessage.SenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "sender_type", err: fmt.Errorf(`db: validator failed for field "ChatMessage.sender_type": %w`, err)}
		}
	}
	if v, ok := cmuo.mutation.MessageType(); ok {
		if err := chatmessage.MessageTypeValidator(v); err != nil {
			return &ValidationError{Name: "message_type", err: fmt.Errorf(`db: validator failed for field "ChatMessage.message_type": %w`, err)}
		}
	}
	return nil
}

func (cmuo *ChatMessageUpdateOne) sqlSave(ctx context.Context) (_node *ChatMessage, err error) {
	if err := cmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatmessage.Table, chatmessage.Columns, sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ChatMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatmessage.FieldID)
		for _, f := range fields {
			if !chatmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != chatmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.WhatsappMessageID(); ok {
		_spec.SetField(chatmessage.FieldWhatsappMessageID, field.TypeString, value)
	}
	if cmuo.mutation.WhatsappMessageIDCleared() {
		_spec.ClearField(chatmessage.FieldWhatsappMessageID, field.TypeString)
	}
	if value, ok := cmuo.mutation.SenderType(); ok {
		_spec.SetField(chatmessage.FieldSenderType, field.TypeEnum, value)
	}
	if value, ok := cmuo.mutation.MessageType(); ok {
		_spec.SetField(chatmessage.FieldMessageType, field.TypeEnum, value)
	}
	if value, ok := cmuo.mutation.Content(); ok {
		_spec.SetField(chatmessage.FieldContent, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.Metadata(); ok {
		_spec.SetField(chatmessage.FieldMetadata, field.TypeJSON, value)
	}
	if cmuo.mutation.MetadataCleared() {
		_spec.ClearField(chatmessage.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cmuo.mutation.AiToolCall(); ok {
		_spec.SetField(chatmessage.FieldAiToolCall, field.TypeString, value)
	}
	if cmuo.mutation.AiToolCallCleared() {
		_spec.ClearField(chatmessage.FieldAiToolCall, field.TypeString)
	}
	if value, ok := cmuo.mutation.AiToolResult(); ok {
		_spec.SetField(chatmessage.FieldAiToolResult, field.TypeJSON, value)
	}
	if cmuo.mutation.AiToolResultCleared() {
		_spec.ClearField(chatmessage.FieldAiToolResult, field.TypeJSON)
	}
	if value, ok := cmuo.mutation.IsRead(); ok {
		_spec.SetField(chatmessage.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := cmuo.mutation.CreatedAt(); ok {
		_spec.SetField(chatmessage.FieldCreatedAt, field.TypeTime, value)
	}
	if cmuo.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.ThreadTable,
			Columns: []string{chatmessage.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.ThreadTable,
			Columns: []string{chatmessage.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatMessage{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
