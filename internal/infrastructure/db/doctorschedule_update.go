// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctorschedule"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// DoctorScheduleUpdate is the builder for updating DoctorSchedule entities.
type DoctorScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *DoctorScheduleMutation
}

// Where appends a list predicates to the DoctorScheduleUpdate builder.
func (dsu *DoctorScheduleUpdate) Where(ps ...predicate.DoctorSchedule) *DoctorScheduleUpdate {
	dsu.mutation.Where(ps...)
	return dsu
}

// SetDate sets the "date" field.
func (dsu *DoctorScheduleUpdate) SetDate(t time.Time) *DoctorScheduleUpdate {
	dsu.mutation.SetDate(t)
	return dsu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (dsu *DoctorScheduleUpdate) SetNillableDate(t *time.Time) *DoctorScheduleUpdate {
	if t != nil {
		dsu.SetDate(*t)
	}
	return dsu
}

// SetStartTime sets the "start_time" field.
func (dsu *DoctorScheduleUpdate) SetStartTime(t time.Time) *DoctorScheduleUpdate {
	dsu.mutation.SetStartTime(t)
	return dsu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (dsu *DoctorScheduleUpdate) SetNillableStartTime(t *time.Time) *DoctorScheduleUpdate {
	if t != nil {
		dsu.SetStartTime(*t)
	}
	return dsu
}

// SetEndTime sets the "end_time" field.
func (dsu *DoctorScheduleUpdate) SetEndTime(t time.Time) *DoctorScheduleUpdate {
	dsu.mutation.SetEndTime(t)
	return dsu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (dsu *DoctorScheduleUpdate) SetNillableEndTime(t *time.Time) *DoctorScheduleUpdate {
	if t != nil {
		dsu.SetEndTime(*t)
	}
	return dsu
}

// SetAvailable sets the "available" field.
func (dsu *DoctorScheduleUpdate) SetAvailable(b bool) *DoctorScheduleUpdate {
	dsu.mutation.SetAvailable(b)
	return dsu
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (dsu *DoctorScheduleUpdate) SetNillableAvailable(b *bool) *DoctorScheduleUpdate {
	if b != nil {
		dsu.SetAvailable(*b)
	}
	return dsu
}

// SetNotes sets the "notes" field.
func (dsu *DoctorScheduleUpdate) SetNotes(s string) *DoctorScheduleUpdate {
	dsu.mutation.SetNotes(s)
	return dsu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dsu *DoctorScheduleUpdate) SetNillableNotes(s *string) *DoctorScheduleUpdate {
	if s != nil {
		dsu.SetNotes(*s)
	}
	return dsu
}

// ClearNotes clears the value of the "notes" field.
func (dsu *DoctorScheduleUpdate) ClearNotes() *DoctorScheduleUpdate {
	dsu.mutation.ClearNotes()
	return dsu
}

// SetCreatedAt sets the "created_at" field.
func (dsu *DoctorScheduleUpdate) SetCreatedAt(t time.Time) *DoctorScheduleUpdate {
	dsu.mutation.SetCreatedAt(t)
	return dsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsu *DoctorScheduleUpdate) SetNillableCreatedAt(t *time.Time) *DoctorScheduleUpdate {
	if t != nil {
		dsu.SetCreatedAt(*t)
	}
	return dsu
}

// SetDoctorID sets the "doctor" edge to the Doctor entity by ID.
func (dsu *DoctorScheduleUpdate) SetDoctorID(id uuid.UUID) *DoctorScheduleUpdate {
	dsu.mutation.SetDoctorID(id)
	return dsu
}

// SetNillableDoctorID sets the "doctor" edge to the Doctor entity by ID if the given value is not nil.
func (dsu *DoctorScheduleUpdate) SetNillableDoctorID(id *uuid.UUID) *DoctorScheduleUpdate {
	if id != nil {
		dsu = dsu.SetDoctorID(*id)
	}
	return dsu
}

// SetDoctor sets the "doctor" edge to the Doctor entity.
func (dsu *DoctorScheduleUpdate) SetDoctor(d *Doctor) *DoctorScheduleUpdate {
	return dsu.SetDoctorID(d.ID)
}

// Mutation returns the DoctorScheduleMutation object of the builder.
func (dsu *DoctorScheduleUpdate) Mutation() *DoctorScheduleMutation {
	return dsu.mutation
}

// ClearDoctor clears the "doctor" edge to the Doctor entity.
func (dsu *DoctorScheduleUpdate) ClearDoctor() *DoctorScheduleUpdate {
	dsu.mutation.ClearDoctor()
	return dsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DoctorScheduleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dsu.sqlSave, dsu.mutation, dsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DoctorScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DoctorScheduleUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DoctorScheduleUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dsu *DoctorScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(doctorschedule.Table, doctorschedule.Columns, sqlgraph.NewFieldSpec(doctorschedule.FieldID, field.TypeUUID))
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.Date(); ok {
		_spec.SetField(doctorschedule.FieldDate, field.TypeTime, value)
	}
	if value, ok := dsu.mutation.StartTime(); ok {
		_spec.SetField(doctorschedule.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := dsu.mutation.EndTime(); ok {
		_spec.SetField(doctorschedule.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := dsu.mutation.Available(); ok {
		_spec.SetField(doctorschedule.FieldAvailable, field.TypeBool, value)
	}
	if value, ok := dsu.mutation.Notes(); ok {
		_spec.SetField(doctorschedule.FieldNotes, field.TypeString, value)
	}
	if dsu.mutation.NotesCleared() {
		_spec.ClearField(doctorschedule.FieldNotes, field.TypeString)
	}
	if value, ok := dsu.mutation.CreatedAt(); ok {
		_spec.SetField(doctorschedule.FieldCreatedAt, field.TypeTime, value)
	}
	if dsu.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorschedule.DoctorTable,
			Columns: []string{doctorschedule.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorschedule.DoctorTable,
			Columns: []string{doctorschedule.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctorschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dsu.mutation.done = true
	return n, nil
}

// DoctorScheduleUpdateOne is the builder for updating a single DoctorSchedule entity.
type DoctorScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DoctorScheduleMutation
}

// SetDate sets the "date" field.
func (dsuo *DoctorScheduleUpdateOne) SetDate(t time.Time) *DoctorScheduleUpdateOne {
	dsuo.mutation.SetDate(t)
	return dsuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (dsuo *DoctorScheduleUpdateOne) SetNillableDate(t *time.Time) *DoctorScheduleUpdateOne {
	if t != nil {
		dsuo.SetDate(*t)
	}
	return dsuo
}

// SetStartTime sets the "start_time" field.
func (dsuo *DoctorScheduleUpdateOne) SetStartTime(t time.Time) *DoctorScheduleUpdateOne {
	dsuo.mutation.SetStartTime(t)
	return dsuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (dsuo *DoctorScheduleUpdateOne) SetNillableStartTime(t *time.Time) *DoctorScheduleUpdateOne {
	if t != nil {
		dsuo.SetStartTime(*t)
	}
	return dsuo
}

// SetEndTime sets the "end_time" field.
func (dsuo *DoctorScheduleUpdateOne) SetEndTime(t time.Time) *DoctorScheduleUpdateOne {
	dsuo.mutation.SetEndTime(t)
	return dsuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (dsuo *DoctorScheduleUpdateOne) SetNillableEndTime(t *time.Time) *DoctorScheduleUpdateOne {
	if t != nil {
		dsuo.SetEndTime(*t)
	}
	return dsuo
}

// SetAvailable sets the "available" field.
func (dsuo *DoctorScheduleUpdateOne) SetAvailable(b bool) *DoctorScheduleUpdateOne {
	dsuo.mutation.SetAvailable(b)
	return dsuo
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (dsuo *DoctorScheduleUpdateOne) SetNillableAvailable(b *bool) *DoctorScheduleUpdateOne {
	if b != nil {
		dsuo.SetAvailable(*b)
	}
	return dsuo
}

// SetNotes sets the "notes" field.
func (dsuo *DoctorScheduleUpdateOne) SetNotes(s string) *DoctorScheduleUpdateOne {
	dsuo.mutation.SetNotes(s)
	return dsuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dsuo *DoctorScheduleUpdateOne) SetNillableNotes(s *string) *DoctorScheduleUpdateOne {
	if s != nil {
		dsuo.SetNotes(*s)
	}
	return dsuo
}

// ClearNotes clears the value of the "notes" field.
func (dsuo *DoctorScheduleUpdateOne) ClearNotes() *DoctorScheduleUpdateOne {
	dsuo.mutation.ClearNotes()
	return dsuo
}

// SetCreatedAt sets the "created_at" field.
func (dsuo *DoctorScheduleUpdateOne) SetCreatedAt(t time.Time) *DoctorScheduleUpdateOne {
	dsuo.mutation.SetCreatedAt(t)
	return dsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsuo *DoctorScheduleUpdateOne) SetNillableCreatedAt(t *time.Time) *DoctorScheduleUpdateOne {
	if t != nil {
		dsuo.SetCreatedAt(*t)
	}
	return dsuo
}

// SetDoctorID sets the "doctor" edge to the Doctor entity by ID.
func (dsuo *DoctorScheduleUpdateOne) SetDoctorID(id uuid.UUID) *DoctorScheduleUpdateOne {
	dsuo.mutation.SetDoctorID(id)
	return dsuo
}

// SetNillableDoctorID sets the "doctor" edge to the Doctor entity by ID if the given value is not nil.
func (dsuo *DoctorScheduleUpdateOne) SetNillableDoctorID(id *uuid.UUID) *DoctorScheduleUpdateOne {
	if id != nil {
		dsuo = dsuo.SetDoctorID(*id)
	}
	return dsuo
}

// SetDoctor sets the "doctor" edge to the Doctor entity.
func (dsuo *DoctorScheduleUpdateOne) SetDoctor(d *Doctor) *DoctorScheduleUpdateOne {
	return dsuo.SetDoctorID(d.ID)
}

// Mutation returns the DoctorScheduleMutation object of the builder.
func (dsuo *DoctorScheduleUpdateOne) Mutation() *DoctorScheduleMutation {
	return dsuo.mutation
}

// ClearDoctor clears the "doctor" edge to the Doctor entity.
func (dsuo *DoctorScheduleUpdateOne) ClearDoctor() *DoctorScheduleUpdateOne {
	dsuo.mutation.ClearDoctor()
	return dsuo
}

// Where appends a list predicates to the DoctorScheduleUpdate builder.
func (dsuo *DoctorScheduleUpdateOne) Where(ps ...predicate.DoctorSchedule) *DoctorScheduleUpdateOne {
	dsuo.mutation.Where(ps...)
	return dsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dsuo *DoctorScheduleUpdateOne) Select(field string, fields ...string) *DoctorScheduleUpdateOne {
	dsuo.fields = append([]string{field}, fields...)
	return dsuo
}

// Save executes the query and returns the updated DoctorSchedule entity.
func (dsuo *DoctorScheduleUpdateOne) Save(ctx context.Context) (*DoctorSchedule, error) {
	return withHooks(ctx, dsuo.sqlSave, dsuo.mutation, dsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DoctorScheduleUpdateOne) SaveX(ctx context.Context) *DoctorSchedule {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DoctorScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DoctorScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dsuo *DoctorScheduleUpdateOne) sqlSave(ctx context.Context) (_node *DoctorSchedule, err error) {
	_spec := sqlgraph.NewUpdateSpec(doctorschedule.Table, doctorschedule.Columns, sqlgraph.NewFieldSpec(doctorschedule.FieldID, field.TypeUUID))
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "DoctorSchedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, doctorschedule.FieldID)
		for _, f := range fields {
			if !doctorschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != doctorschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.Date(); ok {
		_spec.SetField(doctorschedule.FieldDate, field.TypeTime, value)
	}
	if value, ok := dsuo.mutation.StartTime(); ok {
		_spec.SetField(doctorschedule.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := dsuo.mutation.EndTime(); ok {
		_spec.SetField(doctorschedule.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := dsuo.mutation.Available(); ok {
		_spec.SetField(doctorschedule.FieldAvailable, field.TypeBool, value)
	}
	if value, ok := dsuo.mutation.Notes(); ok {
		_spec.SetField(doctorschedule.FieldNotes, field.TypeString, value)
	}
	if dsuo.mutation.NotesCleared() {
		_spec.ClearField(doctorschedule.FieldNotes, field.TypeString)
	}
	if value, ok := dsuo.mutation.CreatedAt(); ok {
		_spec.SetField(doctorschedule.FieldCreatedAt, field.TypeTime, value)
	}
	if dsuo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorschedule.DoctorTable,
			Columns: []string{doctorschedule.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorschedule.DoctorTable,
			Columns: []string{doctorschedule.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DoctorSchedule{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctorschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dsuo.mutation.done = true
	return _node, nil
}
