// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/aiinteraction"
	"github.com/google/uuid"
)

// AIInteraction is the model entity for the AIInteraction schema.
type AIInteraction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ClinicID holds the value of the "clinic_id" field.
	ClinicID string `json:"clinic_id,omitempty"`
	// PatientWhatsapp holds the value of the "patient_whatsapp" field.
	PatientWhatsapp string `json:"patient_whatsapp,omitempty"`
	// InteractionType holds the value of the "interaction_type" field.
	InteractionType aiinteraction.InteractionType `json:"interaction_type,omitempty"`
	// RequestPayload holds the value of the "request_payload" field.
	RequestPayload map[string]interface{} `json:"request_payload,omitempty"`
	// ResponsePayload holds the value of the "response_payload" field.
	ResponsePayload map[string]interface{} `json:"response_payload,omitempty"`
	// AiModel holds the value of the "ai_model" field.
	AiModel string `json:"ai_model,omitempty"`
	// ResponseTimeMs holds the value of the "response_time_ms" field.
	ResponseTimeMs int `json:"response_time_ms,omitempty"`
	// Status holds the value of the "status" field.
	Status aiinteraction.Status `json:"status,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage string `json:"error_message,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AIInteraction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case aiinteraction.FieldRequestPayload, aiinteraction.FieldResponsePayload:
			values[i] = new([]byte)
		case aiinteraction.FieldResponseTimeMs:
			values[i] = new(sql.NullInt64)
		case aiinteraction.FieldClinicID, aiinteraction.FieldPatientWhatsapp, aiinteraction.FieldInteractionType, aiinteraction.FieldAiModel, aiinteraction.FieldStatus, aiinteraction.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case aiinteraction.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case aiinteraction.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AIInteraction fields.
func (ai *AIInteraction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case aiinteraction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ai.ID = *value
			}
		case aiinteraction.FieldClinicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_id", values[i])
			} else if value.Valid {
				ai.ClinicID = value.String
			}
		case aiinteraction.FieldPatientWhatsapp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_whatsapp", values[i])
			} else if value.Valid {
				ai.PatientWhatsapp = value.String
			}
		case aiinteraction.FieldInteractionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interaction_type", values[i])
			} else if value.Valid {
				ai.InteractionType = aiinteraction.InteractionType(value.String)
			}
		case aiinteraction.FieldRequestPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field request_payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ai.RequestPayload); err != nil {
					return fmt.Errorf("unmarshal field request_payload: %w", err)
				}
			}
		case aiinteraction.FieldResponsePayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field response_payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ai.ResponsePayload); err != nil {
					return fmt.Errorf("unmarshal field response_payload: %w", err)
				}
			}
		case aiinteraction.FieldAiModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_model", values[i])
			} else if value.Valid {
				ai.AiModel = value.String
			}
		case aiinteraction.FieldResponseTimeMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field response_time_ms", values[i])
			} else if value.Valid {
				ai.ResponseTimeMs = int(value.Int64)
			}
		case aiinteraction.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ai.Status = aiinteraction.Status(value.String)
			}
		case aiinteraction.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				ai.ErrorMessage = value.String
			}
		case aiinteraction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ai.CreatedAt = value.Time
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AIInteraction.
// This includes values selected through modifiers, order, etc.
func (ai *AIInteraction) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// Update returns a builder for updating this AIInteraction.
// Note that you need to call AIInteraction.Unwrap() before calling this method if this AIInteraction
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AIInteraction) Update() *AIInteractionUpdateOne {
	return NewAIInteractionClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the AIInteraction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AIInteraction) Unwrap() *AIInteraction {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("db: AIInteraction is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AIInteraction) String() string {
	var builder strings.Builder
	builder.WriteString("AIInteraction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("clinic_id=")
	builder.WriteString(ai.ClinicID)
	builder.WriteString(", ")
	builder.WriteString("patient_whatsapp=")
	builder.WriteString(ai.PatientWhatsapp)
	builder.WriteString(", ")
	builder.WriteString("interaction_type=")
	builder.WriteString(fmt.Sprintf("%v", ai.InteractionType))
	builder.WriteString(", ")
	builder.WriteString("request_payload=")
	builder.WriteString(fmt.Sprintf("%v", ai.RequestPayload))
	builder.WriteString(", ")
	builder.WriteString("response_payload=")
	builder.WriteString(fmt.Sprintf("%v", ai.ResponsePayload))
	builder.WriteString(", ")
	builder.WriteString("ai_model=")
	builder.WriteString(ai.AiModel)
	builder.WriteString(", ")
	builder.WriteString("response_time_ms=")
	builder.WriteString(fmt.Sprintf("%v", ai.ResponseTimeMs))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ai.Status))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(ai.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ai.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AIInteractions is a parsable slice of AIInteraction.
type AIInteractions []*AIInteraction
