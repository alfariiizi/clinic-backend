// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/service"
	"github.com/google/uuid"
)

// Appointment is the model entity for the Appointment schema.
type Appointment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppointmentDate holds the value of the "appointment_date" field.
	AppointmentDate time.Time `json:"appointment_date,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Status holds the value of the "status" field.
	Status appointment.Status `json:"status,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Symptoms holds the value of the "symptoms" field.
	Symptoms string `json:"symptoms,omitempty"`
	// Diagnosis holds the value of the "diagnosis" field.
	Diagnosis string `json:"diagnosis,omitempty"`
	// TreatmentPlan holds the value of the "treatment_plan" field.
	TreatmentPlan string `json:"treatment_plan,omitempty"`
	// Prescriptions holds the value of the "prescriptions" field.
	Prescriptions []map[string]interface{} `json:"prescriptions,omitempty"`
	// TotalCost holds the value of the "total_cost" field.
	TotalCost float64 `json:"total_cost,omitempty"`
	// PaymentStatus holds the value of the "payment_status" field.
	PaymentStatus appointment.PaymentStatus `json:"payment_status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppointmentQuery when eager-loading is set.
	Edges                AppointmentEdges `json:"edges"`
	clinic_appointments  *uuid.UUID
	doctor_appointments  *uuid.UUID
	patient_appointments *uuid.UUID
	service_appointments *uuid.UUID
	selectValues         sql.SelectValues
}

// AppointmentEdges holds the relations/edges for other nodes in the graph.
type AppointmentEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// Doctor holds the value of the doctor edge.
	Doctor *Doctor `json:"doctor,omitempty"`
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// Reminders holds the value of the reminders edge.
	Reminders []*AppointmentReminder `json:"reminders,omitempty"`
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItem `json:"order_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) ClinicOrErr() (*Clinic, error) {
	if e.Clinic != nil {
		return e.Clinic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: clinic.Label}
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) PatientOrErr() (*Patient, error) {
	if e.Patient != nil {
		return e.Patient, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: patient.Label}
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) DoctorOrErr() (*Doctor, error) {
	if e.Doctor != nil {
		return e.Doctor, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: doctor.Label}
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// RemindersOrErr returns the Reminders value or an error if the edge
// was not loaded in eager-loading.
func (e AppointmentEdges) RemindersOrErr() ([]*AppointmentReminder, error) {
	if e.loadedTypes[4] {
		return e.Reminders, nil
	}
	return nil, &NotLoadedError{edge: "reminders"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e AppointmentEdges) OrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[5] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Appointment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appointment.FieldPrescriptions:
			values[i] = new([]byte)
		case appointment.FieldTotalCost:
			values[i] = new(sql.NullFloat64)
		case appointment.FieldStatus, appointment.FieldNotes, appointment.FieldSymptoms, appointment.FieldDiagnosis, appointment.FieldTreatmentPlan, appointment.FieldPaymentStatus:
			values[i] = new(sql.NullString)
		case appointment.FieldAppointmentDate, appointment.FieldStartTime, appointment.FieldEndTime, appointment.FieldCreatedAt, appointment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case appointment.FieldID:
			values[i] = new(uuid.UUID)
		case appointment.ForeignKeys[0]: // clinic_appointments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case appointment.ForeignKeys[1]: // doctor_appointments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case appointment.ForeignKeys[2]: // patient_appointments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case appointment.ForeignKeys[3]: // service_appointments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Appointment fields.
func (a *Appointment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appointment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case appointment.FieldAppointmentDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field appointment_date", values[i])
			} else if value.Valid {
				a.AppointmentDate = value.Time
			}
		case appointment.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				a.StartTime = value.Time
			}
		case appointment.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				a.EndTime = value.Time
			}
		case appointment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = appointment.Status(value.String)
			}
		case appointment.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				a.Notes = value.String
			}
		case appointment.FieldSymptoms:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symptoms", values[i])
			} else if value.Valid {
				a.Symptoms = value.String
			}
		case appointment.FieldDiagnosis:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field diagnosis", values[i])
			} else if value.Valid {
				a.Diagnosis = value.String
			}
		case appointment.FieldTreatmentPlan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field treatment_plan", values[i])
			} else if value.Valid {
				a.TreatmentPlan = value.String
			}
		case appointment.FieldPrescriptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field prescriptions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Prescriptions); err != nil {
					return fmt.Errorf("unmarshal field prescriptions: %w", err)
				}
			}
		case appointment.FieldTotalCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_cost", values[i])
			} else if value.Valid {
				a.TotalCost = value.Float64
			}
		case appointment.FieldPaymentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_status", values[i])
			} else if value.Valid {
				a.PaymentStatus = appointment.PaymentStatus(value.String)
			}
		case appointment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case appointment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case appointment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_appointments", values[i])
			} else if value.Valid {
				a.clinic_appointments = new(uuid.UUID)
				*a.clinic_appointments = *value.S.(*uuid.UUID)
			}
		case appointment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field doctor_appointments", values[i])
			} else if value.Valid {
				a.doctor_appointments = new(uuid.UUID)
				*a.doctor_appointments = *value.S.(*uuid.UUID)
			}
		case appointment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field patient_appointments", values[i])
			} else if value.Valid {
				a.patient_appointments = new(uuid.UUID)
				*a.patient_appointments = *value.S.(*uuid.UUID)
			}
		case appointment.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field service_appointments", values[i])
			} else if value.Valid {
				a.service_appointments = new(uuid.UUID)
				*a.service_appointments = *value.S.(*uuid.UUID)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Appointment.
// This includes values selected through modifiers, order, etc.
func (a *Appointment) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the Appointment entity.
func (a *Appointment) QueryClinic() *ClinicQuery {
	return NewAppointmentClient(a.config).QueryClinic(a)
}

// QueryPatient queries the "patient" edge of the Appointment entity.
func (a *Appointment) QueryPatient() *PatientQuery {
	return NewAppointmentClient(a.config).QueryPatient(a)
}

// QueryDoctor queries the "doctor" edge of the Appointment entity.
func (a *Appointment) QueryDoctor() *DoctorQuery {
	return NewAppointmentClient(a.config).QueryDoctor(a)
}

// QueryService queries the "service" edge of the Appointment entity.
func (a *Appointment) QueryService() *ServiceQuery {
	return NewAppointmentClient(a.config).QueryService(a)
}

// QueryReminders queries the "reminders" edge of the Appointment entity.
func (a *Appointment) QueryReminders() *AppointmentReminderQuery {
	return NewAppointmentClient(a.config).QueryReminders(a)
}

// QueryOrderItems queries the "order_items" edge of the Appointment entity.
func (a *Appointment) QueryOrderItems() *OrderItemQuery {
	return NewAppointmentClient(a.config).QueryOrderItems(a)
}

// Update returns a builder for updating this Appointment.
// Note that you need to call Appointment.Unwrap() before calling this method if this Appointment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Appointment) Update() *AppointmentUpdateOne {
	return NewAppointmentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Appointment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Appointment) Unwrap() *Appointment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("db: Appointment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Appointment) String() string {
	var builder strings.Builder
	builder.WriteString("Appointment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("appointment_date=")
	builder.WriteString(a.AppointmentDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(a.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(a.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(a.Notes)
	builder.WriteString(", ")
	builder.WriteString("symptoms=")
	builder.WriteString(a.Symptoms)
	builder.WriteString(", ")
	builder.WriteString("diagnosis=")
	builder.WriteString(a.Diagnosis)
	builder.WriteString(", ")
	builder.WriteString("treatment_plan=")
	builder.WriteString(a.TreatmentPlan)
	builder.WriteString(", ")
	builder.WriteString("prescriptions=")
	builder.WriteString(fmt.Sprintf("%v", a.Prescriptions))
	builder.WriteString(", ")
	builder.WriteString("total_cost=")
	builder.WriteString(fmt.Sprintf("%v", a.TotalCost))
	builder.WriteString(", ")
	builder.WriteString("payment_status=")
	builder.WriteString(fmt.Sprintf("%v", a.PaymentStatus))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Appointments is a parsable slice of Appointment.
type Appointments []*Appointment
