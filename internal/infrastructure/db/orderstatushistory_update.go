// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderstatushistory"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// OrderStatusHistoryUpdate is the builder for updating OrderStatusHistory entities.
type OrderStatusHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *OrderStatusHistoryMutation
}

// Where appends a list predicates to the OrderStatusHistoryUpdate builder.
func (oshu *OrderStatusHistoryUpdate) Where(ps ...predicate.OrderStatusHistory) *OrderStatusHistoryUpdate {
	oshu.mutation.Where(ps...)
	return oshu
}

// SetStatus sets the "status" field.
func (oshu *OrderStatusHistoryUpdate) SetStatus(s string) *OrderStatusHistoryUpdate {
	oshu.mutation.SetStatus(s)
	return oshu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oshu *OrderStatusHistoryUpdate) SetNillableStatus(s *string) *OrderStatusHistoryUpdate {
	if s != nil {
		oshu.SetStatus(*s)
	}
	return oshu
}

// SetNotes sets the "notes" field.
func (oshu *OrderStatusHistoryUpdate) SetNotes(s string) *OrderStatusHistoryUpdate {
	oshu.mutation.SetNotes(s)
	return oshu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (oshu *OrderStatusHistoryUpdate) SetNillableNotes(s *string) *OrderStatusHistoryUpdate {
	if s != nil {
		oshu.SetNotes(*s)
	}
	return oshu
}

// ClearNotes clears the value of the "notes" field.
func (oshu *OrderStatusHistoryUpdate) ClearNotes() *OrderStatusHistoryUpdate {
	oshu.mutation.ClearNotes()
	return oshu
}

// SetChangedBy sets the "changed_by" field.
func (oshu *OrderStatusHistoryUpdate) SetChangedBy(s string) *OrderStatusHistoryUpdate {
	oshu.mutation.SetChangedBy(s)
	return oshu
}

// SetNillableChangedBy sets the "changed_by" field if the given value is not nil.
func (oshu *OrderStatusHistoryUpdate) SetNillableChangedBy(s *string) *OrderStatusHistoryUpdate {
	if s != nil {
		oshu.SetChangedBy(*s)
	}
	return oshu
}

// ClearChangedBy clears the value of the "changed_by" field.
func (oshu *OrderStatusHistoryUpdate) ClearChangedBy() *OrderStatusHistoryUpdate {
	oshu.mutation.ClearChangedBy()
	return oshu
}

// SetCreatedAt sets the "created_at" field.
func (oshu *OrderStatusHistoryUpdate) SetCreatedAt(t time.Time) *OrderStatusHistoryUpdate {
	oshu.mutation.SetCreatedAt(t)
	return oshu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oshu *OrderStatusHistoryUpdate) SetNillableCreatedAt(t *time.Time) *OrderStatusHistoryUpdate {
	if t != nil {
		oshu.SetCreatedAt(*t)
	}
	return oshu
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (oshu *OrderStatusHistoryUpdate) SetOrderID(id uuid.UUID) *OrderStatusHistoryUpdate {
	oshu.mutation.SetOrderID(id)
	return oshu
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (oshu *OrderStatusHistoryUpdate) SetNillableOrderID(id *uuid.UUID) *OrderStatusHistoryUpdate {
	if id != nil {
		oshu = oshu.SetOrderID(*id)
	}
	return oshu
}

// SetOrder sets the "order" edge to the Order entity.
func (oshu *OrderStatusHistoryUpdate) SetOrder(o *Order) *OrderStatusHistoryUpdate {
	return oshu.SetOrderID(o.ID)
}

// Mutation returns the OrderStatusHistoryMutation object of the builder.
func (oshu *OrderStatusHistoryUpdate) Mutation() *OrderStatusHistoryMutation {
	return oshu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oshu *OrderStatusHistoryUpdate) ClearOrder() *OrderStatusHistoryUpdate {
	oshu.mutation.ClearOrder()
	return oshu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oshu *OrderStatusHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oshu.sqlSave, oshu.mutation, oshu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oshu *OrderStatusHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := oshu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oshu *OrderStatusHistoryUpdate) Exec(ctx context.Context) error {
	_, err := oshu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshu *OrderStatusHistoryUpdate) ExecX(ctx context.Context) {
	if err := oshu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oshu *OrderStatusHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstatushistory.Table, orderstatushistory.Columns, sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeUUID))
	if ps := oshu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oshu.mutation.Status(); ok {
		_spec.SetField(orderstatushistory.FieldStatus, field.TypeString, value)
	}
	if value, ok := oshu.mutation.Notes(); ok {
		_spec.SetField(orderstatushistory.FieldNotes, field.TypeString, value)
	}
	if oshu.mutation.NotesCleared() {
		_spec.ClearField(orderstatushistory.FieldNotes, field.TypeString)
	}
	if value, ok := oshu.mutation.ChangedBy(); ok {
		_spec.SetField(orderstatushistory.FieldChangedBy, field.TypeString, value)
	}
	if oshu.mutation.ChangedByCleared() {
		_spec.ClearField(orderstatushistory.FieldChangedBy, field.TypeString)
	}
	if value, ok := oshu.mutation.CreatedAt(); ok {
		_spec.SetField(orderstatushistory.FieldCreatedAt, field.TypeTime, value)
	}
	if oshu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderstatushistory.OrderTable,
			Columns: []string{orderstatushistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oshu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderstatushistory.OrderTable,
			Columns: []string{orderstatushistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oshu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatushistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oshu.mutation.done = true
	return n, nil
}

// OrderStatusHistoryUpdateOne is the builder for updating a single OrderStatusHistory entity.
type OrderStatusHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderStatusHistoryMutation
}

// SetStatus sets the "status" field.
func (oshuo *OrderStatusHistoryUpdateOne) SetStatus(s string) *OrderStatusHistoryUpdateOne {
	oshuo.mutation.SetStatus(s)
	return oshuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oshuo *OrderStatusHistoryUpdateOne) SetNillableStatus(s *string) *OrderStatusHistoryUpdateOne {
	if s != nil {
		oshuo.SetStatus(*s)
	}
	return oshuo
}

// SetNotes sets the "notes" field.
func (oshuo *OrderStatusHistoryUpdateOne) SetNotes(s string) *OrderStatusHistoryUpdateOne {
	oshuo.mutation.SetNotes(s)
	return oshuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (oshuo *OrderStatusHistoryUpdateOne) SetNillableNotes(s *string) *OrderStatusHistoryUpdateOne {
	if s != nil {
		oshuo.SetNotes(*s)
	}
	return oshuo
}

// ClearNotes clears the value of the "notes" field.
func (oshuo *OrderStatusHistoryUpdateOne) ClearNotes() *OrderStatusHistoryUpdateOne {
	oshuo.mutation.ClearNotes()
	return oshuo
}

// SetChangedBy sets the "changed_by" field.
func (oshuo *OrderStatusHistoryUpdateOne) SetChangedBy(s string) *OrderStatusHistoryUpdateOne {
	oshuo.mutation.SetChangedBy(s)
	return oshuo
}

// SetNillableChangedBy sets the "changed_by" field if the given value is not nil.
func (oshuo *OrderStatusHistoryUpdateOne) SetNillableChangedBy(s *string) *OrderStatusHistoryUpdateOne {
	if s != nil {
		oshuo.SetChangedBy(*s)
	}
	return oshuo
}

// ClearChangedBy clears the value of the "changed_by" field.
func (oshuo *OrderStatusHistoryUpdateOne) ClearChangedBy() *OrderStatusHistoryUpdateOne {
	oshuo.mutation.ClearChangedBy()
	return oshuo
}

// SetCreatedAt sets the "created_at" field.
func (oshuo *OrderStatusHistoryUpdateOne) SetCreatedAt(t time.Time) *OrderStatusHistoryUpdateOne {
	oshuo.mutation.SetCreatedAt(t)
	return oshuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oshuo *OrderStatusHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderStatusHistoryUpdateOne {
	if t != nil {
		oshuo.SetCreatedAt(*t)
	}
	return oshuo
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (oshuo *OrderStatusHistoryUpdateOne) SetOrderID(id uuid.UUID) *OrderStatusHistoryUpdateOne {
	oshuo.mutation.SetOrderID(id)
	return oshuo
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (oshuo *OrderStatusHistoryUpdateOne) SetNillableOrderID(id *uuid.UUID) *OrderStatusHistoryUpdateOne {
	if id != nil {
		oshuo = oshuo.SetOrderID(*id)
	}
	return oshuo
}

// SetOrder sets the "order" edge to the Order entity.
func (oshuo *OrderStatusHistoryUpdateOne) SetOrder(o *Order) *OrderStatusHistoryUpdateOne {
	return oshuo.SetOrderID(o.ID)
}

// Mutation returns the OrderStatusHistoryMutation object of the builder.
func (oshuo *OrderStatusHistoryUpdateOne) Mutation() *OrderStatusHistoryMutation {
	return oshuo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oshuo *OrderStatusHistoryUpdateOne) ClearOrder() *OrderStatusHistoryUpdateOne {
	oshuo.mutation.ClearOrder()
	return oshuo
}

// Where appends a list predicates to the OrderStatusHistoryUpdate builder.
func (oshuo *OrderStatusHistoryUpdateOne) Where(ps ...predicate.OrderStatusHistory) *OrderStatusHistoryUpdateOne {
	oshuo.mutation.Where(ps...)
	return oshuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oshuo *OrderStatusHistoryUpdateOne) Select(field string, fields ...string) *OrderStatusHistoryUpdateOne {
	oshuo.fields = append([]string{field}, fields...)
	return oshuo
}

// Save executes the query and returns the updated OrderStatusHistory entity.
func (oshuo *OrderStatusHistoryUpdateOne) Save(ctx context.Context) (*OrderStatusHistory, error) {
	return withHooks(ctx, oshuo.sqlSave, oshuo.mutation, oshuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oshuo *OrderStatusHistoryUpdateOne) SaveX(ctx context.Context) *OrderStatusHistory {
	node, err := oshuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oshuo *OrderStatusHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := oshuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshuo *OrderStatusHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := oshuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oshuo *OrderStatusHistoryUpdateOne) sqlSave(ctx context.Context) (_node *OrderStatusHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstatushistory.Table, orderstatushistory.Columns, sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeUUID))
	id, ok := oshuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "OrderStatusHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oshuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderstatushistory.FieldID)
		for _, f := range fields {
			if !orderstatushistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != orderstatushistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oshuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oshuo.mutation.Status(); ok {
		_spec.SetField(orderstatushistory.FieldStatus, field.TypeString, value)
	}
	if value, ok := oshuo.mutation.Notes(); ok {
		_spec.SetField(orderstatushistory.FieldNotes, field.TypeString, value)
	}
	if oshuo.mutation.NotesCleared() {
		_spec.ClearField(orderstatushistory.FieldNotes, field.TypeString)
	}
	if value, ok := oshuo.mutation.ChangedBy(); ok {
		_spec.SetField(orderstatushistory.FieldChangedBy, field.TypeString, value)
	}
	if oshuo.mutation.ChangedByCleared() {
		_spec.ClearField(orderstatushistory.FieldChangedBy, field.TypeString)
	}
	if value, ok := oshuo.mutation.CreatedAt(); ok {
		_spec.SetField(orderstatushistory.FieldCreatedAt, field.TypeTime, value)
	}
	if oshuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderstatushistory.OrderTable,
			Columns: []string{orderstatushistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oshuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderstatushistory.OrderTable,
			Columns: []string{orderstatushistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderStatusHistory{config: oshuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oshuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatushistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oshuo.mutation.done = true
	return _node, nil
}
