// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/billingrecord"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinicuser"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/document"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/inventorymovement"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/knowledgebase"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/productcategory"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/service"
	"github.com/google/uuid"
)

// ClinicCreate is the builder for creating a Clinic entity.
type ClinicCreate struct {
	config
	mutation *ClinicMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *ClinicCreate) SetName(s string) *ClinicCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetType sets the "type" field.
func (cc *ClinicCreate) SetType(s string) *ClinicCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetPhone sets the "phone" field.
func (cc *ClinicCreate) SetPhone(s string) *ClinicCreate {
	cc.mutation.SetPhone(s)
	return cc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cc *ClinicCreate) SetNillablePhone(s *string) *ClinicCreate {
	if s != nil {
		cc.SetPhone(*s)
	}
	return cc
}

// SetEmail sets the "email" field.
func (cc *ClinicCreate) SetEmail(s string) *ClinicCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableEmail(s *string) *ClinicCreate {
	if s != nil {
		cc.SetEmail(*s)
	}
	return cc
}

// SetAddress sets the "address" field.
func (cc *ClinicCreate) SetAddress(s string) *ClinicCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableAddress(s *string) *ClinicCreate {
	if s != nil {
		cc.SetAddress(*s)
	}
	return cc
}

// SetBusinessHours sets the "business_hours" field.
func (cc *ClinicCreate) SetBusinessHours(m map[string]interface{}) *ClinicCreate {
	cc.mutation.SetBusinessHours(m)
	return cc
}

// SetWhatsappNumber sets the "whatsapp_number" field.
func (cc *ClinicCreate) SetWhatsappNumber(s string) *ClinicCreate {
	cc.mutation.SetWhatsappNumber(s)
	return cc
}

// SetNillableWhatsappNumber sets the "whatsapp_number" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableWhatsappNumber(s *string) *ClinicCreate {
	if s != nil {
		cc.SetWhatsappNumber(*s)
	}
	return cc
}

// SetSubscriptionPlan sets the "subscription_plan" field.
func (cc *ClinicCreate) SetSubscriptionPlan(s string) *ClinicCreate {
	cc.mutation.SetSubscriptionPlan(s)
	return cc
}

// SetNillableSubscriptionPlan sets the "subscription_plan" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableSubscriptionPlan(s *string) *ClinicCreate {
	if s != nil {
		cc.SetSubscriptionPlan(*s)
	}
	return cc
}

// SetEnabledFeatures sets the "enabled_features" field.
func (cc *ClinicCreate) SetEnabledFeatures(s []string) *ClinicCreate {
	cc.mutation.SetEnabledFeatures(s)
	return cc
}

// SetActive sets the "active" field.
func (cc *ClinicCreate) SetActive(b bool) *ClinicCreate {
	cc.mutation.SetActive(b)
	return cc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableActive(b *bool) *ClinicCreate {
	if b != nil {
		cc.SetActive(*b)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ClinicCreate) SetCreatedAt(t time.Time) *ClinicCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableCreatedAt(t *time.Time) *ClinicCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ClinicCreate) SetUpdatedAt(t time.Time) *ClinicCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableUpdatedAt(t *time.Time) *ClinicCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ClinicCreate) SetID(u uuid.UUID) *ClinicCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableID(u *uuid.UUID) *ClinicCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddClinicUserIDs adds the "clinic_users" edge to the ClinicUser entity by IDs.
func (cc *ClinicCreate) AddClinicUserIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddClinicUserIDs(ids...)
	return cc
}

// AddClinicUsers adds the "clinic_users" edges to the ClinicUser entity.
func (cc *ClinicCreate) AddClinicUsers(c ...*ClinicUser) *ClinicCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClinicUserIDs(ids...)
}

// AddPatientIDs adds the "patients" edge to the Patient entity by IDs.
func (cc *ClinicCreate) AddPatientIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddPatientIDs(ids...)
	return cc
}

// AddPatients adds the "patients" edges to the Patient entity.
func (cc *ClinicCreate) AddPatients(p ...*Patient) *ClinicCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPatientIDs(ids...)
}

// AddDoctorIDs adds the "doctors" edge to the Doctor entity by IDs.
func (cc *ClinicCreate) AddDoctorIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddDoctorIDs(ids...)
	return cc
}

// AddDoctors adds the "doctors" edges to the Doctor entity.
func (cc *ClinicCreate) AddDoctors(d ...*Doctor) *ClinicCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDoctorIDs(ids...)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (cc *ClinicCreate) AddServiceIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddServiceIDs(ids...)
	return cc
}

// AddServices adds the "services" edges to the Service entity.
func (cc *ClinicCreate) AddServices(s ...*Service) *ClinicCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddServiceIDs(ids...)
}

// AddAppointmentIDs adds the "appointments" edge to the Appointment entity by IDs.
func (cc *ClinicCreate) AddAppointmentIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddAppointmentIDs(ids...)
	return cc
}

// AddAppointments adds the "appointments" edges to the Appointment entity.
func (cc *ClinicCreate) AddAppointments(a ...*Appointment) *ClinicCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddAppointmentIDs(ids...)
}

// AddChatThreadIDs adds the "chat_threads" edge to the ChatThread entity by IDs.
func (cc *ClinicCreate) AddChatThreadIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddChatThreadIDs(ids...)
	return cc
}

// AddChatThreads adds the "chat_threads" edges to the ChatThread entity.
func (cc *ClinicCreate) AddChatThreads(c ...*ChatThread) *ClinicCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddChatThreadIDs(ids...)
}

// AddKnowledgeBaseIDs adds the "knowledge_base" edge to the KnowledgeBase entity by IDs.
func (cc *ClinicCreate) AddKnowledgeBaseIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddKnowledgeBaseIDs(ids...)
	return cc
}

// AddKnowledgeBase adds the "knowledge_base" edges to the KnowledgeBase entity.
func (cc *ClinicCreate) AddKnowledgeBase(k ...*KnowledgeBase) *ClinicCreate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cc.AddKnowledgeBaseIDs(ids...)
}

// AddBillingRecordIDs adds the "billing_records" edge to the BillingRecord entity by IDs.
func (cc *ClinicCreate) AddBillingRecordIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddBillingRecordIDs(ids...)
	return cc
}

// AddBillingRecords adds the "billing_records" edges to the BillingRecord entity.
func (cc *ClinicCreate) AddBillingRecords(b ...*BillingRecord) *ClinicCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cc.AddBillingRecordIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (cc *ClinicCreate) AddDocumentIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddDocumentIDs(ids...)
	return cc
}

// AddDocuments adds the "documents" edges to the Document entity.
func (cc *ClinicCreate) AddDocuments(d ...*Document) *ClinicCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDocumentIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (cc *ClinicCreate) AddProductIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddProductIDs(ids...)
	return cc
}

// AddProducts adds the "products" edges to the Product entity.
func (cc *ClinicCreate) AddProducts(p ...*Product) *ClinicCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProductIDs(ids...)
}

// AddProductCategoryIDs adds the "product_categories" edge to the ProductCategory entity by IDs.
func (cc *ClinicCreate) AddProductCategoryIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddProductCategoryIDs(ids...)
	return cc
}

// AddProductCategories adds the "product_categories" edges to the ProductCategory entity.
func (cc *ClinicCreate) AddProductCategories(p ...*ProductCategory) *ClinicCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProductCategoryIDs(ids...)
}

// AddInventoryMovementIDs adds the "inventory_movements" edge to the InventoryMovement entity by IDs.
func (cc *ClinicCreate) AddInventoryMovementIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddInventoryMovementIDs(ids...)
	return cc
}

// AddInventoryMovements adds the "inventory_movements" edges to the InventoryMovement entity.
func (cc *ClinicCreate) AddInventoryMovements(i ...*InventoryMovement) *ClinicCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cc.AddInventoryMovementIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cc *ClinicCreate) AddOrderIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddOrderIDs(ids...)
	return cc
}

// AddOrders adds the "orders" edges to the Order entity.
func (cc *ClinicCreate) AddOrders(o ...*Order) *ClinicCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOrderIDs(ids...)
}

// Mutation returns the ClinicMutation object of the builder.
func (cc *ClinicCreate) Mutation() *ClinicMutation {
	return cc.mutation
}

// Save creates the Clinic in the database.
func (cc *ClinicCreate) Save(ctx context.Context) (*Clinic, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClinicCreate) SaveX(ctx context.Context) *Clinic {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClinicCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClinicCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ClinicCreate) defaults() {
	if _, ok := cc.mutation.SubscriptionPlan(); !ok {
		v := clinic.DefaultSubscriptionPlan
		cc.mutation.SetSubscriptionPlan(v)
	}
	if _, ok := cc.mutation.Active(); !ok {
		v := clinic.DefaultActive
		cc.mutation.SetActive(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := clinic.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := clinic.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := clinic.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClinicCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Clinic.name"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "Clinic.type"`)}
	}
	if _, ok := cc.mutation.SubscriptionPlan(); !ok {
		return &ValidationError{Name: "subscription_plan", err: errors.New(`db: missing required field "Clinic.subscription_plan"`)}
	}
	if _, ok := cc.mutation.EnabledFeatures(); !ok {
		return &ValidationError{Name: "enabled_features", err: errors.New(`db: missing required field "Clinic.enabled_features"`)}
	}
	if _, ok := cc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`db: missing required field "Clinic.active"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Clinic.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Clinic.updated_at"`)}
	}
	return nil
}

func (cc *ClinicCreate) sqlSave(ctx context.Context) (*Clinic, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClinicCreate) createSpec() (*Clinic, *sqlgraph.CreateSpec) {
	var (
		_node = &Clinic{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(clinic.Table, sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(clinic.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(clinic.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Phone(); ok {
		_spec.SetField(clinic.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(clinic.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.SetField(clinic.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := cc.mutation.BusinessHours(); ok {
		_spec.SetField(clinic.FieldBusinessHours, field.TypeJSON, value)
		_node.BusinessHours = value
	}
	if value, ok := cc.mutation.WhatsappNumber(); ok {
		_spec.SetField(clinic.FieldWhatsappNumber, field.TypeString, value)
		_node.WhatsappNumber = value
	}
	if value, ok := cc.mutation.SubscriptionPlan(); ok {
		_spec.SetField(clinic.FieldSubscriptionPlan, field.TypeString, value)
		_node.SubscriptionPlan = value
	}
	if value, ok := cc.mutation.EnabledFeatures(); ok {
		_spec.SetField(clinic.FieldEnabledFeatures, field.TypeJSON, value)
		_node.EnabledFeatures = value
	}
	if value, ok := cc.mutation.Active(); ok {
		_spec.SetField(clinic.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(clinic.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(clinic.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.ClinicUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicUsersTable,
			Columns: []string{clinic.ClinicUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinicuser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.PatientsTable,
			Columns: []string{clinic.PatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DoctorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.DoctorsTable,
			Columns: []string{clinic.DoctorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ServicesTable,
			Columns: []string{clinic.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.AppointmentsTable,
			Columns: []string{clinic.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ChatThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ChatThreadsTable,
			Columns: []string{clinic.ChatThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.KnowledgeBaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.KnowledgeBaseTable,
			Columns: []string{clinic.KnowledgeBaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(knowledgebase.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.BillingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.BillingRecordsTable,
			Columns: []string{clinic.BillingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.DocumentsTable,
			Columns: []string{clinic.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ProductsTable,
			Columns: []string{clinic.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ProductCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ProductCategoriesTable,
			Columns: []string{clinic.ProductCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.InventoryMovementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.InventoryMovementsTable,
			Columns: []string{clinic.InventoryMovementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorymovement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.OrdersTable,
			Columns: []string{clinic.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClinicCreateBulk is the builder for creating many Clinic entities in bulk.
type ClinicCreateBulk struct {
	config
	err      error
	builders []*ClinicCreate
}

// Save creates the Clinic entities in the database.
func (ccb *ClinicCreateBulk) Save(ctx context.Context) ([]*Clinic, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Clinic, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClinicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClinicCreateBulk) SaveX(ctx context.Context) []*Clinic {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClinicCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClinicCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
