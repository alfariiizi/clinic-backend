// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/aiinteraction"
	"github.com/google/uuid"
)

// AIInteractionCreate is the builder for creating a AIInteraction entity.
type AIInteractionCreate struct {
	config
	mutation *AIInteractionMutation
	hooks    []Hook
}

// SetClinicID sets the "clinic_id" field.
func (aic *AIInteractionCreate) SetClinicID(s string) *AIInteractionCreate {
	aic.mutation.SetClinicID(s)
	return aic
}

// SetPatientWhatsapp sets the "patient_whatsapp" field.
func (aic *AIInteractionCreate) SetPatientWhatsapp(s string) *AIInteractionCreate {
	aic.mutation.SetPatientWhatsapp(s)
	return aic
}

// SetNillablePatientWhatsapp sets the "patient_whatsapp" field if the given value is not nil.
func (aic *AIInteractionCreate) SetNillablePatientWhatsapp(s *string) *AIInteractionCreate {
	if s != nil {
		aic.SetPatientWhatsapp(*s)
	}
	return aic
}

// SetInteractionType sets the "interaction_type" field.
func (aic *AIInteractionCreate) SetInteractionType(at aiinteraction.InteractionType) *AIInteractionCreate {
	aic.mutation.SetInteractionType(at)
	return aic
}

// SetNillableInteractionType sets the "interaction_type" field if the given value is not nil.
func (aic *AIInteractionCreate) SetNillableInteractionType(at *aiinteraction.InteractionType) *AIInteractionCreate {
	if at != nil {
		aic.SetInteractionType(*at)
	}
	return aic
}

// SetRequestPayload sets the "request_payload" field.
func (aic *AIInteractionCreate) SetRequestPayload(m map[string]interface{}) *AIInteractionCreate {
	aic.mutation.SetRequestPayload(m)
	return aic
}

// SetResponsePayload sets the "response_payload" field.
func (aic *AIInteractionCreate) SetResponsePayload(m map[string]interface{}) *AIInteractionCreate {
	aic.mutation.SetResponsePayload(m)
	return aic
}

// SetAiModel sets the "ai_model" field.
func (aic *AIInteractionCreate) SetAiModel(s string) *AIInteractionCreate {
	aic.mutation.SetAiModel(s)
	return aic
}

// SetNillableAiModel sets the "ai_model" field if the given value is not nil.
func (aic *AIInteractionCreate) SetNillableAiModel(s *string) *AIInteractionCreate {
	if s != nil {
		aic.SetAiModel(*s)
	}
	return aic
}

// SetResponseTimeMs sets the "response_time_ms" field.
func (aic *AIInteractionCreate) SetResponseTimeMs(i int) *AIInteractionCreate {
	aic.mutation.SetResponseTimeMs(i)
	return aic
}

// SetNillableResponseTimeMs sets the "response_time_ms" field if the given value is not nil.
func (aic *AIInteractionCreate) SetNillableResponseTimeMs(i *int) *AIInteractionCreate {
	if i != nil {
		aic.SetResponseTimeMs(*i)
	}
	return aic
}

// SetStatus sets the "status" field.
func (aic *AIInteractionCreate) SetStatus(a aiinteraction.Status) *AIInteractionCreate {
	aic.mutation.SetStatus(a)
	return aic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aic *AIInteractionCreate) SetNillableStatus(a *aiinteraction.Status) *AIInteractionCreate {
	if a != nil {
		aic.SetStatus(*a)
	}
	return aic
}

// SetErrorMessage sets the "error_message" field.
func (aic *AIInteractionCreate) SetErrorMessage(s string) *AIInteractionCreate {
	aic.mutation.SetErrorMessage(s)
	return aic
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (aic *AIInteractionCreate) SetNillableErrorMessage(s *string) *AIInteractionCreate {
	if s != nil {
		aic.SetErrorMessage(*s)
	}
	return aic
}

// SetCreatedAt sets the "created_at" field.
func (aic *AIInteractionCreate) SetCreatedAt(t time.Time) *AIInteractionCreate {
	aic.mutation.SetCreatedAt(t)
	return aic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aic *AIInteractionCreate) SetNillableCreatedAt(t *time.Time) *AIInteractionCreate {
	if t != nil {
		aic.SetCreatedAt(*t)
	}
	return aic
}

// SetID sets the "id" field.
func (aic *AIInteractionCreate) SetID(u uuid.UUID) *AIInteractionCreate {
	aic.mutation.SetID(u)
	return aic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aic *AIInteractionCreate) SetNillableID(u *uuid.UUID) *AIInteractionCreate {
	if u != nil {
		aic.SetID(*u)
	}
	return aic
}

// Mutation returns the AIInteractionMutation object of the builder.
func (aic *AIInteractionCreate) Mutation() *AIInteractionMutation {
	return aic.mutation
}

// Save creates the AIInteraction in the database.
func (aic *AIInteractionCreate) Save(ctx context.Context) (*AIInteraction, error) {
	aic.defaults()
	return withHooks(ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *AIInteractionCreate) SaveX(ctx context.Context) *AIInteraction {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *AIInteractionCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *AIInteractionCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aic *AIInteractionCreate) defaults() {
	if _, ok := aic.mutation.InteractionType(); !ok {
		v := aiinteraction.DefaultInteractionType
		aic.mutation.SetInteractionType(v)
	}
	if _, ok := aic.mutation.Status(); !ok {
		v := aiinteraction.DefaultStatus
		aic.mutation.SetStatus(v)
	}
	if _, ok := aic.mutation.CreatedAt(); !ok {
		v := aiinteraction.DefaultCreatedAt()
		aic.mutation.SetCreatedAt(v)
	}
	if _, ok := aic.mutation.ID(); !ok {
		v := aiinteraction.DefaultID()
		aic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *AIInteractionCreate) check() error {
	if _, ok := aic.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic_id", err: errors.New(`db: missing required field "AIInteraction.clinic_id"`)}
	}
	if _, ok := aic.mutation.InteractionType(); !ok {
		return &ValidationError{Name: "interaction_type", err: errors.New(`db: missing required field "AIInteraction.interaction_type"`)}
	}
	if v, ok := aic.mutation.InteractionType(); ok {
		if err := aiinteraction.InteractionTypeValidator(v); err != nil {
			return &ValidationError{Name: "interaction_type", err: fmt.Errorf(`db: validator failed for field "AIInteraction.interaction_type": %w`, err)}
		}
	}
	if _, ok := aic.mutation.RequestPayload(); !ok {
		return &ValidationError{Name: "request_payload", err: errors.New(`db: missing required field "AIInteraction.request_payload"`)}
	}
	if _, ok := aic.mutation.ResponsePayload(); !ok {
		return &ValidationError{Name: "response_payload", err: errors.New(`db: missing required field "AIInteraction.response_payload"`)}
	}
	if _, ok := aic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "AIInteraction.status"`)}
	}
	if v, ok := aic.mutation.Status(); ok {
		if err := aiinteraction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "AIInteraction.status": %w`, err)}
		}
	}
	if _, ok := aic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AIInteraction.created_at"`)}
	}
	return nil
}

func (aic *AIInteractionCreate) sqlSave(ctx context.Context) (*AIInteraction, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *AIInteractionCreate) createSpec() (*AIInteraction, *sqlgraph.CreateSpec) {
	var (
		_node = &AIInteraction{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(aiinteraction.Table, sqlgraph.NewFieldSpec(aiinteraction.FieldID, field.TypeUUID))
	)
	if id, ok := aic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := aic.mutation.ClinicID(); ok {
		_spec.SetField(aiinteraction.FieldClinicID, field.TypeString, value)
		_node.ClinicID = value
	}
	if value, ok := aic.mutation.PatientWhatsapp(); ok {
		_spec.SetField(aiinteraction.FieldPatientWhatsapp, field.TypeString, value)
		_node.PatientWhatsapp = value
	}
	if value, ok := aic.mutation.InteractionType(); ok {
		_spec.SetField(aiinteraction.FieldInteractionType, field.TypeEnum, value)
		_node.InteractionType = value
	}
	if value, ok := aic.mutation.RequestPayload(); ok {
		_spec.SetField(aiinteraction.FieldRequestPayload, field.TypeJSON, value)
		_node.RequestPayload = value
	}
	if value, ok := aic.mutation.ResponsePayload(); ok {
		_spec.SetField(aiinteraction.FieldResponsePayload, field.TypeJSON, value)
		_node.ResponsePayload = value
	}
	if value, ok := aic.mutation.AiModel(); ok {
		_spec.SetField(aiinteraction.FieldAiModel, field.TypeString, value)
		_node.AiModel = value
	}
	if value, ok := aic.mutation.ResponseTimeMs(); ok {
		_spec.SetField(aiinteraction.FieldResponseTimeMs, field.TypeInt, value)
		_node.ResponseTimeMs = value
	}
	if value, ok := aic.mutation.Status(); ok {
		_spec.SetField(aiinteraction.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := aic.mutation.ErrorMessage(); ok {
		_spec.SetField(aiinteraction.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := aic.mutation.CreatedAt(); ok {
		_spec.SetField(aiinteraction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// AIInteractionCreateBulk is the builder for creating many AIInteraction entities in bulk.
type AIInteractionCreateBulk struct {
	config
	err      error
	builders []*AIInteractionCreate
}

// Save creates the AIInteraction entities in the database.
func (aicb *AIInteractionCreateBulk) Save(ctx context.Context) ([]*AIInteraction, error) {
	if aicb.err != nil {
		return nil, aicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*AIInteraction, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AIInteractionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *AIInteractionCreateBulk) SaveX(ctx context.Context) []*AIInteraction {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *AIInteractionCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *AIInteractionCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}
