// Code generated by ent, DO NOT EDIT.

package feature

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the feature type in the database.
	Label = "feature"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldMonthlyPrice holds the string denoting the monthly_price field in the database.
	FieldMonthlyPrice = "monthly_price"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the feature in the database.
	Table = "features"
)

// Columns holds all SQL columns for feature fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDescription,
	FieldCategory,
	FieldMonthlyPrice,
	FieldActive,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMonthlyPrice holds the default value on creation for the "monthly_price" field.
	DefaultMonthlyPrice float64
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Category defines the type for the "category" enum field.
type Category string

// CategoryCORE is the default value of the Category enum.
const DefaultCategory = CategoryCORE

// Category values.
const (
	CategoryCORE          Category = "CORE"
	CategoryAI            Category = "AI"
	CategoryBILLING       Category = "BILLING"
	CategoryCOMMUNICATION Category = "COMMUNICATION"
	CategoryANALYTICS     Category = "ANALYTICS"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryCORE, CategoryAI, CategoryBILLING, CategoryCOMMUNICATION, CategoryANALYTICS:
		return nil
	default:
		return fmt.Errorf("feature: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Feature queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByMonthlyPrice orders the results by the monthly_price field.
func ByMonthlyPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonthlyPrice, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
