// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/queueentry"
	"github.com/google/uuid"
)

// QueueEntryCreate is the builder for creating a QueueEntry entity.
type QueueEntryCreate struct {
	config
	mutation *QueueEntryMutation
	hooks    []Hook
}

// SetClinicID sets the "clinic_id" field.
func (qec *QueueEntryCreate) SetClinicID(s string) *QueueEntryCreate {
	qec.mutation.SetClinicID(s)
	return qec
}

// SetPatientID sets the "patient_id" field.
func (qec *QueueEntryCreate) SetPatientID(s string) *QueueEntryCreate {
	qec.mutation.SetPatientID(s)
	return qec
}

// SetDoctorID sets the "doctor_id" field.
func (qec *QueueEntryCreate) SetDoctorID(s string) *QueueEntryCreate {
	qec.mutation.SetDoctorID(s)
	return qec
}

// SetNillableDoctorID sets the "doctor_id" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableDoctorID(s *string) *QueueEntryCreate {
	if s != nil {
		qec.SetDoctorID(*s)
	}
	return qec
}

// SetServiceID sets the "service_id" field.
func (qec *QueueEntryCreate) SetServiceID(s string) *QueueEntryCreate {
	qec.mutation.SetServiceID(s)
	return qec
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableServiceID(s *string) *QueueEntryCreate {
	if s != nil {
		qec.SetServiceID(*s)
	}
	return qec
}

// SetQueueNumber sets the "queue_number" field.
func (qec *QueueEntryCreate) SetQueueNumber(i int) *QueueEntryCreate {
	qec.mutation.SetQueueNumber(i)
	return qec
}

// SetStatus sets the "status" field.
func (qec *QueueEntryCreate) SetStatus(q queueentry.Status) *QueueEntryCreate {
	qec.mutation.SetStatus(q)
	return qec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableStatus(q *queueentry.Status) *QueueEntryCreate {
	if q != nil {
		qec.SetStatus(*q)
	}
	return qec
}

// SetEstimatedTime sets the "estimated_time" field.
func (qec *QueueEntryCreate) SetEstimatedTime(t time.Time) *QueueEntryCreate {
	qec.mutation.SetEstimatedTime(t)
	return qec
}

// SetNillableEstimatedTime sets the "estimated_time" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableEstimatedTime(t *time.Time) *QueueEntryCreate {
	if t != nil {
		qec.SetEstimatedTime(*t)
	}
	return qec
}

// SetCalledAt sets the "called_at" field.
func (qec *QueueEntryCreate) SetCalledAt(t time.Time) *QueueEntryCreate {
	qec.mutation.SetCalledAt(t)
	return qec
}

// SetNillableCalledAt sets the "called_at" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableCalledAt(t *time.Time) *QueueEntryCreate {
	if t != nil {
		qec.SetCalledAt(*t)
	}
	return qec
}

// SetCompletedAt sets the "completed_at" field.
func (qec *QueueEntryCreate) SetCompletedAt(t time.Time) *QueueEntryCreate {
	qec.mutation.SetCompletedAt(t)
	return qec
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableCompletedAt(t *time.Time) *QueueEntryCreate {
	if t != nil {
		qec.SetCompletedAt(*t)
	}
	return qec
}

// SetNotes sets the "notes" field.
func (qec *QueueEntryCreate) SetNotes(s string) *QueueEntryCreate {
	qec.mutation.SetNotes(s)
	return qec
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableNotes(s *string) *QueueEntryCreate {
	if s != nil {
		qec.SetNotes(*s)
	}
	return qec
}

// SetCreatedAt sets the "created_at" field.
func (qec *QueueEntryCreate) SetCreatedAt(t time.Time) *QueueEntryCreate {
	qec.mutation.SetCreatedAt(t)
	return qec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableCreatedAt(t *time.Time) *QueueEntryCreate {
	if t != nil {
		qec.SetCreatedAt(*t)
	}
	return qec
}

// SetUpdatedAt sets the "updated_at" field.
func (qec *QueueEntryCreate) SetUpdatedAt(t time.Time) *QueueEntryCreate {
	qec.mutation.SetUpdatedAt(t)
	return qec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableUpdatedAt(t *time.Time) *QueueEntryCreate {
	if t != nil {
		qec.SetUpdatedAt(*t)
	}
	return qec
}

// SetID sets the "id" field.
func (qec *QueueEntryCreate) SetID(u uuid.UUID) *QueueEntryCreate {
	qec.mutation.SetID(u)
	return qec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qec *QueueEntryCreate) SetNillableID(u *uuid.UUID) *QueueEntryCreate {
	if u != nil {
		qec.SetID(*u)
	}
	return qec
}

// Mutation returns the QueueEntryMutation object of the builder.
func (qec *QueueEntryCreate) Mutation() *QueueEntryMutation {
	return qec.mutation
}

// Save creates the QueueEntry in the database.
func (qec *QueueEntryCreate) Save(ctx context.Context) (*QueueEntry, error) {
	qec.defaults()
	return withHooks(ctx, qec.sqlSave, qec.mutation, qec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qec *QueueEntryCreate) SaveX(ctx context.Context) *QueueEntry {
	v, err := qec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qec *QueueEntryCreate) Exec(ctx context.Context) error {
	_, err := qec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qec *QueueEntryCreate) ExecX(ctx context.Context) {
	if err := qec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qec *QueueEntryCreate) defaults() {
	if _, ok := qec.mutation.Status(); !ok {
		v := queueentry.DefaultStatus
		qec.mutation.SetStatus(v)
	}
	if _, ok := qec.mutation.CreatedAt(); !ok {
		v := queueentry.DefaultCreatedAt()
		qec.mutation.SetCreatedAt(v)
	}
	if _, ok := qec.mutation.UpdatedAt(); !ok {
		v := queueentry.DefaultUpdatedAt()
		qec.mutation.SetUpdatedAt(v)
	}
	if _, ok := qec.mutation.ID(); !ok {
		v := queueentry.DefaultID()
		qec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qec *QueueEntryCreate) check() error {
	if _, ok := qec.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic_id", err: errors.New(`db: missing required field "QueueEntry.clinic_id"`)}
	}
	if _, ok := qec.mutation.PatientID(); !ok {
		return &ValidationError{Name: "patient_id", err: errors.New(`db: missing required field "QueueEntry.patient_id"`)}
	}
	if _, ok := qec.mutation.QueueNumber(); !ok {
		return &ValidationError{Name: "queue_number", err: errors.New(`db: missing required field "QueueEntry.queue_number"`)}
	}
	if _, ok := qec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "QueueEntry.status"`)}
	}
	if v, ok := qec.mutation.Status(); ok {
		if err := queueentry.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "QueueEntry.status": %w`, err)}
		}
	}
	if _, ok := qec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "QueueEntry.created_at"`)}
	}
	if _, ok := qec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "QueueEntry.updated_at"`)}
	}
	return nil
}

func (qec *QueueEntryCreate) sqlSave(ctx context.Context) (*QueueEntry, error) {
	if err := qec.check(); err != nil {
		return nil, err
	}
	_node, _spec := qec.createSpec()
	if err := sqlgraph.CreateNode(ctx, qec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	qec.mutation.id = &_node.ID
	qec.mutation.done = true
	return _node, nil
}

func (qec *QueueEntryCreate) createSpec() (*QueueEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &QueueEntry{config: qec.config}
		_spec = sqlgraph.NewCreateSpec(queueentry.Table, sqlgraph.NewFieldSpec(queueentry.FieldID, field.TypeUUID))
	)
	if id, ok := qec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qec.mutation.ClinicID(); ok {
		_spec.SetField(queueentry.FieldClinicID, field.TypeString, value)
		_node.ClinicID = value
	}
	if value, ok := qec.mutation.PatientID(); ok {
		_spec.SetField(queueentry.FieldPatientID, field.TypeString, value)
		_node.PatientID = value
	}
	if value, ok := qec.mutation.DoctorID(); ok {
		_spec.SetField(queueentry.FieldDoctorID, field.TypeString, value)
		_node.DoctorID = value
	}
	if value, ok := qec.mutation.ServiceID(); ok {
		_spec.SetField(queueentry.FieldServiceID, field.TypeString, value)
		_node.ServiceID = value
	}
	if value, ok := qec.mutation.QueueNumber(); ok {
		_spec.SetField(queueentry.FieldQueueNumber, field.TypeInt, value)
		_node.QueueNumber = value
	}
	if value, ok := qec.mutation.Status(); ok {
		_spec.SetField(queueentry.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := qec.mutation.EstimatedTime(); ok {
		_spec.SetField(queueentry.FieldEstimatedTime, field.TypeTime, value)
		_node.EstimatedTime = value
	}
	if value, ok := qec.mutation.CalledAt(); ok {
		_spec.SetField(queueentry.FieldCalledAt, field.TypeTime, value)
		_node.CalledAt = value
	}
	if value, ok := qec.mutation.CompletedAt(); ok {
		_spec.SetField(queueentry.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := qec.mutation.Notes(); ok {
		_spec.SetField(queueentry.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := qec.mutation.CreatedAt(); ok {
		_spec.SetField(queueentry.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qec.mutation.UpdatedAt(); ok {
		_spec.SetField(queueentry.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// QueueEntryCreateBulk is the builder for creating many QueueEntry entities in bulk.
type QueueEntryCreateBulk struct {
	config
	err      error
	builders []*QueueEntryCreate
}

// Save creates the QueueEntry entities in the database.
func (qecb *QueueEntryCreateBulk) Save(ctx context.Context) ([]*QueueEntry, error) {
	if qecb.err != nil {
		return nil, qecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qecb.builders))
	nodes := make([]*QueueEntry, len(qecb.builders))
	mutators := make([]Mutator, len(qecb.builders))
	for i := range qecb.builders {
		func(i int, root context.Context) {
			builder := qecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QueueEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qecb *QueueEntryCreateBulk) SaveX(ctx context.Context) []*QueueEntry {
	v, err := qecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qecb *QueueEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := qecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qecb *QueueEntryCreateBulk) ExecX(ctx context.Context) {
	if err := qecb.Exec(ctx); err != nil {
		panic(err)
	}
}
