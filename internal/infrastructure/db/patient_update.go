// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/billingrecord"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/document"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// PatientUpdate is the builder for updating Patient entities.
type PatientUpdate struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// Where appends a list predicates to the PatientUpdate builder.
func (pu *PatientUpdate) Where(ps ...predicate.Patient) *PatientUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetWhatsappNumber sets the "whatsapp_number" field.
func (pu *PatientUpdate) SetWhatsappNumber(s string) *PatientUpdate {
	pu.mutation.SetWhatsappNumber(s)
	return pu
}

// SetNillableWhatsappNumber sets the "whatsapp_number" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableWhatsappNumber(s *string) *PatientUpdate {
	if s != nil {
		pu.SetWhatsappNumber(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PatientUpdate) SetName(s string) *PatientUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *PatientUpdate) ClearName() *PatientUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetEmail sets the "email" field.
func (pu *PatientUpdate) SetEmail(s string) *PatientUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableEmail(s *string) *PatientUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// ClearEmail clears the value of the "email" field.
func (pu *PatientUpdate) ClearEmail() *PatientUpdate {
	pu.mutation.ClearEmail()
	return pu
}

// SetPhone sets the "phone" field.
func (pu *PatientUpdate) SetPhone(s string) *PatientUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePhone(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// ClearPhone clears the value of the "phone" field.
func (pu *PatientUpdate) ClearPhone() *PatientUpdate {
	pu.mutation.ClearPhone()
	return pu
}

// SetBirthDate sets the "birth_date" field.
func (pu *PatientUpdate) SetBirthDate(t time.Time) *PatientUpdate {
	pu.mutation.SetBirthDate(t)
	return pu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableBirthDate(t *time.Time) *PatientUpdate {
	if t != nil {
		pu.SetBirthDate(*t)
	}
	return pu
}

// ClearBirthDate clears the value of the "birth_date" field.
func (pu *PatientUpdate) ClearBirthDate() *PatientUpdate {
	pu.mutation.ClearBirthDate()
	return pu
}

// SetGender sets the "gender" field.
func (pu *PatientUpdate) SetGender(pa patient.Gender) *PatientUpdate {
	pu.mutation.SetGender(pa)
	return pu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableGender(pa *patient.Gender) *PatientUpdate {
	if pa != nil {
		pu.SetGender(*pa)
	}
	return pu
}

// ClearGender clears the value of the "gender" field.
func (pu *PatientUpdate) ClearGender() *PatientUpdate {
	pu.mutation.ClearGender()
	return pu
}

// SetAddress sets the "address" field.
func (pu *PatientUpdate) SetAddress(s string) *PatientUpdate {
	pu.mutation.SetAddress(s)
	return pu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableAddress(s *string) *PatientUpdate {
	if s != nil {
		pu.SetAddress(*s)
	}
	return pu
}

// ClearAddress clears the value of the "address" field.
func (pu *PatientUpdate) ClearAddress() *PatientUpdate {
	pu.mutation.ClearAddress()
	return pu
}

// SetMedicalHistory sets the "medical_history" field.
func (pu *PatientUpdate) SetMedicalHistory(m map[string]interface{}) *PatientUpdate {
	pu.mutation.SetMedicalHistory(m)
	return pu
}

// ClearMedicalHistory clears the value of the "medical_history" field.
func (pu *PatientUpdate) ClearMedicalHistory() *PatientUpdate {
	pu.mutation.ClearMedicalHistory()
	return pu
}

// SetAllergies sets the "allergies" field.
func (pu *PatientUpdate) SetAllergies(s []string) *PatientUpdate {
	pu.mutation.SetAllergies(s)
	return pu
}

// AppendAllergies appends s to the "allergies" field.
func (pu *PatientUpdate) AppendAllergies(s []string) *PatientUpdate {
	pu.mutation.AppendAllergies(s)
	return pu
}

// ClearAllergies clears the value of the "allergies" field.
func (pu *PatientUpdate) ClearAllergies() *PatientUpdate {
	pu.mutation.ClearAllergies()
	return pu
}

// SetEmergencyContactName sets the "emergency_contact_name" field.
func (pu *PatientUpdate) SetEmergencyContactName(s string) *PatientUpdate {
	pu.mutation.SetEmergencyContactName(s)
	return pu
}

// SetNillableEmergencyContactName sets the "emergency_contact_name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableEmergencyContactName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetEmergencyContactName(*s)
	}
	return pu
}

// ClearEmergencyContactName clears the value of the "emergency_contact_name" field.
func (pu *PatientUpdate) ClearEmergencyContactName() *PatientUpdate {
	pu.mutation.ClearEmergencyContactName()
	return pu
}

// SetEmergencyContactPhone sets the "emergency_contact_phone" field.
func (pu *PatientUpdate) SetEmergencyContactPhone(s string) *PatientUpdate {
	pu.mutation.SetEmergencyContactPhone(s)
	return pu
}

// SetNillableEmergencyContactPhone sets the "emergency_contact_phone" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableEmergencyContactPhone(s *string) *PatientUpdate {
	if s != nil {
		pu.SetEmergencyContactPhone(*s)
	}
	return pu
}

// ClearEmergencyContactPhone clears the value of the "emergency_contact_phone" field.
func (pu *PatientUpdate) ClearEmergencyContactPhone() *PatientUpdate {
	pu.mutation.ClearEmergencyContactPhone()
	return pu
}

// SetActive sets the "active" field.
func (pu *PatientUpdate) SetActive(b bool) *PatientUpdate {
	pu.mutation.SetActive(b)
	return pu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableActive(b *bool) *PatientUpdate {
	if b != nil {
		pu.SetActive(*b)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PatientUpdate) SetCreatedAt(t time.Time) *PatientUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableCreatedAt(t *time.Time) *PatientUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PatientUpdate) SetUpdatedAt(t time.Time) *PatientUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (pu *PatientUpdate) SetClinicID(id uuid.UUID) *PatientUpdate {
	pu.mutation.SetClinicID(id)
	return pu
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (pu *PatientUpdate) SetNillableClinicID(id *uuid.UUID) *PatientUpdate {
	if id != nil {
		pu = pu.SetClinicID(*id)
	}
	return pu
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (pu *PatientUpdate) SetClinic(c *Clinic) *PatientUpdate {
	return pu.SetClinicID(c.ID)
}

// AddAppointmentIDs adds the "appointments" edge to the Appointment entity by IDs.
func (pu *PatientUpdate) AddAppointmentIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.AddAppointmentIDs(ids...)
	return pu
}

// AddAppointments adds the "appointments" edges to the Appointment entity.
func (pu *PatientUpdate) AddAppointments(a ...*Appointment) *PatientUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAppointmentIDs(ids...)
}

// AddChatThreadIDs adds the "chat_threads" edge to the ChatThread entity by IDs.
func (pu *PatientUpdate) AddChatThreadIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.AddChatThreadIDs(ids...)
	return pu
}

// AddChatThreads adds the "chat_threads" edges to the ChatThread entity.
func (pu *PatientUpdate) AddChatThreads(c ...*ChatThread) *PatientUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddChatThreadIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (pu *PatientUpdate) AddDocumentIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.AddDocumentIDs(ids...)
	return pu
}

// AddDocuments adds the "documents" edges to the Document entity.
func (pu *PatientUpdate) AddDocuments(d ...*Document) *PatientUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDocumentIDs(ids...)
}

// AddBillingRecordIDs adds the "billing_records" edge to the BillingRecord entity by IDs.
func (pu *PatientUpdate) AddBillingRecordIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.AddBillingRecordIDs(ids...)
	return pu
}

// AddBillingRecords adds the "billing_records" edges to the BillingRecord entity.
func (pu *PatientUpdate) AddBillingRecords(b ...*BillingRecord) *PatientUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBillingRecordIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (pu *PatientUpdate) AddOrderIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.AddOrderIDs(ids...)
	return pu
}

// AddOrders adds the "orders" edges to the Order entity.
func (pu *PatientUpdate) AddOrders(o ...*Order) *PatientUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pu *PatientUpdate) Mutation() *PatientMutation {
	return pu.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (pu *PatientUpdate) ClearClinic() *PatientUpdate {
	pu.mutation.ClearClinic()
	return pu
}

// ClearAppointments clears all "appointments" edges to the Appointment entity.
func (pu *PatientUpdate) ClearAppointments() *PatientUpdate {
	pu.mutation.ClearAppointments()
	return pu
}

// RemoveAppointmentIDs removes the "appointments" edge to Appointment entities by IDs.
func (pu *PatientUpdate) RemoveAppointmentIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.RemoveAppointmentIDs(ids...)
	return pu
}

// RemoveAppointments removes "appointments" edges to Appointment entities.
func (pu *PatientUpdate) RemoveAppointments(a ...*Appointment) *PatientUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAppointmentIDs(ids...)
}

// ClearChatThreads clears all "chat_threads" edges to the ChatThread entity.
func (pu *PatientUpdate) ClearChatThreads() *PatientUpdate {
	pu.mutation.ClearChatThreads()
	return pu
}

// RemoveChatThreadIDs removes the "chat_threads" edge to ChatThread entities by IDs.
func (pu *PatientUpdate) RemoveChatThreadIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.RemoveChatThreadIDs(ids...)
	return pu
}

// RemoveChatThreads removes "chat_threads" edges to ChatThread entities.
func (pu *PatientUpdate) RemoveChatThreads(c ...*ChatThread) *PatientUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveChatThreadIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (pu *PatientUpdate) ClearDocuments() *PatientUpdate {
	pu.mutation.ClearDocuments()
	return pu
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (pu *PatientUpdate) RemoveDocumentIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.RemoveDocumentIDs(ids...)
	return pu
}

// RemoveDocuments removes "documents" edges to Document entities.
func (pu *PatientUpdate) RemoveDocuments(d ...*Document) *PatientUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDocumentIDs(ids...)
}

// ClearBillingRecords clears all "billing_records" edges to the BillingRecord entity.
func (pu *PatientUpdate) ClearBillingRecords() *PatientUpdate {
	pu.mutation.ClearBillingRecords()
	return pu
}

// RemoveBillingRecordIDs removes the "billing_records" edge to BillingRecord entities by IDs.
func (pu *PatientUpdate) RemoveBillingRecordIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.RemoveBillingRecordIDs(ids...)
	return pu
}

// RemoveBillingRecords removes "billing_records" edges to BillingRecord entities.
func (pu *PatientUpdate) RemoveBillingRecords(b ...*BillingRecord) *PatientUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBillingRecordIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (pu *PatientUpdate) ClearOrders() *PatientUpdate {
	pu.mutation.ClearOrders()
	return pu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (pu *PatientUpdate) RemoveOrderIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.RemoveOrderIDs(ids...)
	return pu
}

// RemoveOrders removes "orders" edges to Order entities.
func (pu *PatientUpdate) RemoveOrders(o ...*Order) *PatientUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PatientUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PatientUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := patient.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PatientUpdate) check() error {
	if v, ok := pu.mutation.Gender(); ok {
		if err := patient.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`db: validator failed for field "Patient.gender": %w`, err)}
		}
	}
	return nil
}

func (pu *PatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.WhatsappNumber(); ok {
		_spec.SetField(patient.FieldWhatsappNumber, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(patient.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(patient.FieldEmail, field.TypeString, value)
	}
	if pu.mutation.EmailCleared() {
		_spec.ClearField(patient.FieldEmail, field.TypeString)
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(patient.FieldPhone, field.TypeString, value)
	}
	if pu.mutation.PhoneCleared() {
		_spec.ClearField(patient.FieldPhone, field.TypeString)
	}
	if value, ok := pu.mutation.BirthDate(); ok {
		_spec.SetField(patient.FieldBirthDate, field.TypeTime, value)
	}
	if pu.mutation.BirthDateCleared() {
		_spec.ClearField(patient.FieldBirthDate, field.TypeTime)
	}
	if value, ok := pu.mutation.Gender(); ok {
		_spec.SetField(patient.FieldGender, field.TypeEnum, value)
	}
	if pu.mutation.GenderCleared() {
		_spec.ClearField(patient.FieldGender, field.TypeEnum)
	}
	if value, ok := pu.mutation.Address(); ok {
		_spec.SetField(patient.FieldAddress, field.TypeString, value)
	}
	if pu.mutation.AddressCleared() {
		_spec.ClearField(patient.FieldAddress, field.TypeString)
	}
	if value, ok := pu.mutation.MedicalHistory(); ok {
		_spec.SetField(patient.FieldMedicalHistory, field.TypeJSON, value)
	}
	if pu.mutation.MedicalHistoryCleared() {
		_spec.ClearField(patient.FieldMedicalHistory, field.TypeJSON)
	}
	if value, ok := pu.mutation.Allergies(); ok {
		_spec.SetField(patient.FieldAllergies, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedAllergies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, patient.FieldAllergies, value)
		})
	}
	if pu.mutation.AllergiesCleared() {
		_spec.ClearField(patient.FieldAllergies, field.TypeJSON)
	}
	if value, ok := pu.mutation.EmergencyContactName(); ok {
		_spec.SetField(patient.FieldEmergencyContactName, field.TypeString, value)
	}
	if pu.mutation.EmergencyContactNameCleared() {
		_spec.ClearField(patient.FieldEmergencyContactName, field.TypeString)
	}
	if value, ok := pu.mutation.EmergencyContactPhone(); ok {
		_spec.SetField(patient.FieldEmergencyContactPhone, field.TypeString, value)
	}
	if pu.mutation.EmergencyContactPhoneCleared() {
		_spec.ClearField(patient.FieldEmergencyContactPhone, field.TypeString)
	}
	if value, ok := pu.mutation.Active(); ok {
		_spec.SetField(patient.FieldActive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(patient.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(patient.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.ClinicTable,
			Columns: []string{patient.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.ClinicTable,
			Columns: []string{patient.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !pu.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ChatThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ChatThreadsTable,
			Columns: []string{patient.ChatThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChatThreadsIDs(); len(nodes) > 0 && !pu.mutation.ChatThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ChatThreadsTable,
			Columns: []string{patient.ChatThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChatThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ChatThreadsTable,
			Columns: []string{patient.ChatThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.DocumentsTable,
			Columns: []string{patient.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !pu.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.DocumentsTable,
			Columns: []string{patient.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.DocumentsTable,
			Columns: []string{patient.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BillingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.BillingRecordsTable,
			Columns: []string{patient.BillingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBillingRecordsIDs(); len(nodes) > 0 && !pu.mutation.BillingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.BillingRecordsTable,
			Columns: []string{patient.BillingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BillingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.BillingRecordsTable,
			Columns: []string{patient.BillingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.OrdersTable,
			Columns: []string{patient.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !pu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.OrdersTable,
			Columns: []string{patient.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.OrdersTable,
			Columns: []string{patient.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PatientUpdateOne is the builder for updating a single Patient entity.
type PatientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientMutation
}

// SetWhatsappNumber sets the "whatsapp_number" field.
func (puo *PatientUpdateOne) SetWhatsappNumber(s string) *PatientUpdateOne {
	puo.mutation.SetWhatsappNumber(s)
	return puo
}

// SetNillableWhatsappNumber sets the "whatsapp_number" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableWhatsappNumber(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetWhatsappNumber(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PatientUpdateOne) SetName(s string) *PatientUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *PatientUpdateOne) ClearName() *PatientUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetEmail sets the "email" field.
func (puo *PatientUpdateOne) SetEmail(s string) *PatientUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableEmail(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// ClearEmail clears the value of the "email" field.
func (puo *PatientUpdateOne) ClearEmail() *PatientUpdateOne {
	puo.mutation.ClearEmail()
	return puo
}

// SetPhone sets the "phone" field.
func (puo *PatientUpdateOne) SetPhone(s string) *PatientUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePhone(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// ClearPhone clears the value of the "phone" field.
func (puo *PatientUpdateOne) ClearPhone() *PatientUpdateOne {
	puo.mutation.ClearPhone()
	return puo
}

// SetBirthDate sets the "birth_date" field.
func (puo *PatientUpdateOne) SetBirthDate(t time.Time) *PatientUpdateOne {
	puo.mutation.SetBirthDate(t)
	return puo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableBirthDate(t *time.Time) *PatientUpdateOne {
	if t != nil {
		puo.SetBirthDate(*t)
	}
	return puo
}

// ClearBirthDate clears the value of the "birth_date" field.
func (puo *PatientUpdateOne) ClearBirthDate() *PatientUpdateOne {
	puo.mutation.ClearBirthDate()
	return puo
}

// SetGender sets the "gender" field.
func (puo *PatientUpdateOne) SetGender(pa patient.Gender) *PatientUpdateOne {
	puo.mutation.SetGender(pa)
	return puo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableGender(pa *patient.Gender) *PatientUpdateOne {
	if pa != nil {
		puo.SetGender(*pa)
	}
	return puo
}

// ClearGender clears the value of the "gender" field.
func (puo *PatientUpdateOne) ClearGender() *PatientUpdateOne {
	puo.mutation.ClearGender()
	return puo
}

// SetAddress sets the "address" field.
func (puo *PatientUpdateOne) SetAddress(s string) *PatientUpdateOne {
	puo.mutation.SetAddress(s)
	return puo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableAddress(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetAddress(*s)
	}
	return puo
}

// ClearAddress clears the value of the "address" field.
func (puo *PatientUpdateOne) ClearAddress() *PatientUpdateOne {
	puo.mutation.ClearAddress()
	return puo
}

// SetMedicalHistory sets the "medical_history" field.
func (puo *PatientUpdateOne) SetMedicalHistory(m map[string]interface{}) *PatientUpdateOne {
	puo.mutation.SetMedicalHistory(m)
	return puo
}

// ClearMedicalHistory clears the value of the "medical_history" field.
func (puo *PatientUpdateOne) ClearMedicalHistory() *PatientUpdateOne {
	puo.mutation.ClearMedicalHistory()
	return puo
}

// SetAllergies sets the "allergies" field.
func (puo *PatientUpdateOne) SetAllergies(s []string) *PatientUpdateOne {
	puo.mutation.SetAllergies(s)
	return puo
}

// AppendAllergies appends s to the "allergies" field.
func (puo *PatientUpdateOne) AppendAllergies(s []string) *PatientUpdateOne {
	puo.mutation.AppendAllergies(s)
	return puo
}

// ClearAllergies clears the value of the "allergies" field.
func (puo *PatientUpdateOne) ClearAllergies() *PatientUpdateOne {
	puo.mutation.ClearAllergies()
	return puo
}

// SetEmergencyContactName sets the "emergency_contact_name" field.
func (puo *PatientUpdateOne) SetEmergencyContactName(s string) *PatientUpdateOne {
	puo.mutation.SetEmergencyContactName(s)
	return puo
}

// SetNillableEmergencyContactName sets the "emergency_contact_name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableEmergencyContactName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetEmergencyContactName(*s)
	}
	return puo
}

// ClearEmergencyContactName clears the value of the "emergency_contact_name" field.
func (puo *PatientUpdateOne) ClearEmergencyContactName() *PatientUpdateOne {
	puo.mutation.ClearEmergencyContactName()
	return puo
}

// SetEmergencyContactPhone sets the "emergency_contact_phone" field.
func (puo *PatientUpdateOne) SetEmergencyContactPhone(s string) *PatientUpdateOne {
	puo.mutation.SetEmergencyContactPhone(s)
	return puo
}

// SetNillableEmergencyContactPhone sets the "emergency_contact_phone" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableEmergencyContactPhone(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetEmergencyContactPhone(*s)
	}
	return puo
}

// ClearEmergencyContactPhone clears the value of the "emergency_contact_phone" field.
func (puo *PatientUpdateOne) ClearEmergencyContactPhone() *PatientUpdateOne {
	puo.mutation.ClearEmergencyContactPhone()
	return puo
}

// SetActive sets the "active" field.
func (puo *PatientUpdateOne) SetActive(b bool) *PatientUpdateOne {
	puo.mutation.SetActive(b)
	return puo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableActive(b *bool) *PatientUpdateOne {
	if b != nil {
		puo.SetActive(*b)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PatientUpdateOne) SetCreatedAt(t time.Time) *PatientUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableCreatedAt(t *time.Time) *PatientUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PatientUpdateOne) SetUpdatedAt(t time.Time) *PatientUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (puo *PatientUpdateOne) SetClinicID(id uuid.UUID) *PatientUpdateOne {
	puo.mutation.SetClinicID(id)
	return puo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableClinicID(id *uuid.UUID) *PatientUpdateOne {
	if id != nil {
		puo = puo.SetClinicID(*id)
	}
	return puo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (puo *PatientUpdateOne) SetClinic(c *Clinic) *PatientUpdateOne {
	return puo.SetClinicID(c.ID)
}

// AddAppointmentIDs adds the "appointments" edge to the Appointment entity by IDs.
func (puo *PatientUpdateOne) AddAppointmentIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.AddAppointmentIDs(ids...)
	return puo
}

// AddAppointments adds the "appointments" edges to the Appointment entity.
func (puo *PatientUpdateOne) AddAppointments(a ...*Appointment) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAppointmentIDs(ids...)
}

// AddChatThreadIDs adds the "chat_threads" edge to the ChatThread entity by IDs.
func (puo *PatientUpdateOne) AddChatThreadIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.AddChatThreadIDs(ids...)
	return puo
}

// AddChatThreads adds the "chat_threads" edges to the ChatThread entity.
func (puo *PatientUpdateOne) AddChatThreads(c ...*ChatThread) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddChatThreadIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (puo *PatientUpdateOne) AddDocumentIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.AddDocumentIDs(ids...)
	return puo
}

// AddDocuments adds the "documents" edges to the Document entity.
func (puo *PatientUpdateOne) AddDocuments(d ...*Document) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDocumentIDs(ids...)
}

// AddBillingRecordIDs adds the "billing_records" edge to the BillingRecord entity by IDs.
func (puo *PatientUpdateOne) AddBillingRecordIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.AddBillingRecordIDs(ids...)
	return puo
}

// AddBillingRecords adds the "billing_records" edges to the BillingRecord entity.
func (puo *PatientUpdateOne) AddBillingRecords(b ...*BillingRecord) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBillingRecordIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (puo *PatientUpdateOne) AddOrderIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.AddOrderIDs(ids...)
	return puo
}

// AddOrders adds the "orders" edges to the Order entity.
func (puo *PatientUpdateOne) AddOrders(o ...*Order) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (puo *PatientUpdateOne) Mutation() *PatientMutation {
	return puo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (puo *PatientUpdateOne) ClearClinic() *PatientUpdateOne {
	puo.mutation.ClearClinic()
	return puo
}

// ClearAppointments clears all "appointments" edges to the Appointment entity.
func (puo *PatientUpdateOne) ClearAppointments() *PatientUpdateOne {
	puo.mutation.ClearAppointments()
	return puo
}

// RemoveAppointmentIDs removes the "appointments" edge to Appointment entities by IDs.
func (puo *PatientUpdateOne) RemoveAppointmentIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.RemoveAppointmentIDs(ids...)
	return puo
}

// RemoveAppointments removes "appointments" edges to Appointment entities.
func (puo *PatientUpdateOne) RemoveAppointments(a ...*Appointment) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAppointmentIDs(ids...)
}

// ClearChatThreads clears all "chat_threads" edges to the ChatThread entity.
func (puo *PatientUpdateOne) ClearChatThreads() *PatientUpdateOne {
	puo.mutation.ClearChatThreads()
	return puo
}

// RemoveChatThreadIDs removes the "chat_threads" edge to ChatThread entities by IDs.
func (puo *PatientUpdateOne) RemoveChatThreadIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.RemoveChatThreadIDs(ids...)
	return puo
}

// RemoveChatThreads removes "chat_threads" edges to ChatThread entities.
func (puo *PatientUpdateOne) RemoveChatThreads(c ...*ChatThread) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveChatThreadIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (puo *PatientUpdateOne) ClearDocuments() *PatientUpdateOne {
	puo.mutation.ClearDocuments()
	return puo
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (puo *PatientUpdateOne) RemoveDocumentIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.RemoveDocumentIDs(ids...)
	return puo
}

// RemoveDocuments removes "documents" edges to Document entities.
func (puo *PatientUpdateOne) RemoveDocuments(d ...*Document) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDocumentIDs(ids...)
}

// ClearBillingRecords clears all "billing_records" edges to the BillingRecord entity.
func (puo *PatientUpdateOne) ClearBillingRecords() *PatientUpdateOne {
	puo.mutation.ClearBillingRecords()
	return puo
}

// RemoveBillingRecordIDs removes the "billing_records" edge to BillingRecord entities by IDs.
func (puo *PatientUpdateOne) RemoveBillingRecordIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.RemoveBillingRecordIDs(ids...)
	return puo
}

// RemoveBillingRecords removes "billing_records" edges to BillingRecord entities.
func (puo *PatientUpdateOne) RemoveBillingRecords(b ...*BillingRecord) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBillingRecordIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (puo *PatientUpdateOne) ClearOrders() *PatientUpdateOne {
	puo.mutation.ClearOrders()
	return puo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (puo *PatientUpdateOne) RemoveOrderIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.RemoveOrderIDs(ids...)
	return puo
}

// RemoveOrders removes "orders" edges to Order entities.
func (puo *PatientUpdateOne) RemoveOrders(o ...*Order) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the PatientUpdate builder.
func (puo *PatientUpdateOne) Where(ps ...predicate.Patient) *PatientUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PatientUpdateOne) Select(field string, fields ...string) *PatientUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Patient entity.
func (puo *PatientUpdateOne) Save(ctx context.Context) (*Patient, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientUpdateOne) SaveX(ctx context.Context) *Patient {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PatientUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PatientUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := patient.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PatientUpdateOne) check() error {
	if v, ok := puo.mutation.Gender(); ok {
		if err := patient.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`db: validator failed for field "Patient.gender": %w`, err)}
		}
	}
	return nil
}

func (puo *PatientUpdateOne) sqlSave(ctx context.Context) (_node *Patient, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Patient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patient.FieldID)
		for _, f := range fields {
			if !patient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != patient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.WhatsappNumber(); ok {
		_spec.SetField(patient.FieldWhatsappNumber, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(patient.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(patient.FieldEmail, field.TypeString, value)
	}
	if puo.mutation.EmailCleared() {
		_spec.ClearField(patient.FieldEmail, field.TypeString)
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(patient.FieldPhone, field.TypeString, value)
	}
	if puo.mutation.PhoneCleared() {
		_spec.ClearField(patient.FieldPhone, field.TypeString)
	}
	if value, ok := puo.mutation.BirthDate(); ok {
		_spec.SetField(patient.FieldBirthDate, field.TypeTime, value)
	}
	if puo.mutation.BirthDateCleared() {
		_spec.ClearField(patient.FieldBirthDate, field.TypeTime)
	}
	if value, ok := puo.mutation.Gender(); ok {
		_spec.SetField(patient.FieldGender, field.TypeEnum, value)
	}
	if puo.mutation.GenderCleared() {
		_spec.ClearField(patient.FieldGender, field.TypeEnum)
	}
	if value, ok := puo.mutation.Address(); ok {
		_spec.SetField(patient.FieldAddress, field.TypeString, value)
	}
	if puo.mutation.AddressCleared() {
		_spec.ClearField(patient.FieldAddress, field.TypeString)
	}
	if value, ok := puo.mutation.MedicalHistory(); ok {
		_spec.SetField(patient.FieldMedicalHistory, field.TypeJSON, value)
	}
	if puo.mutation.MedicalHistoryCleared() {
		_spec.ClearField(patient.FieldMedicalHistory, field.TypeJSON)
	}
	if value, ok := puo.mutation.Allergies(); ok {
		_spec.SetField(patient.FieldAllergies, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedAllergies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, patient.FieldAllergies, value)
		})
	}
	if puo.mutation.AllergiesCleared() {
		_spec.ClearField(patient.FieldAllergies, field.TypeJSON)
	}
	if value, ok := puo.mutation.EmergencyContactName(); ok {
		_spec.SetField(patient.FieldEmergencyContactName, field.TypeString, value)
	}
	if puo.mutation.EmergencyContactNameCleared() {
		_spec.ClearField(patient.FieldEmergencyContactName, field.TypeString)
	}
	if value, ok := puo.mutation.EmergencyContactPhone(); ok {
		_spec.SetField(patient.FieldEmergencyContactPhone, field.TypeString, value)
	}
	if puo.mutation.EmergencyContactPhoneCleared() {
		_spec.ClearField(patient.FieldEmergencyContactPhone, field.TypeString)
	}
	if value, ok := puo.mutation.Active(); ok {
		_spec.SetField(patient.FieldActive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(patient.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(patient.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.ClinicTable,
			Columns: []string{patient.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.ClinicTable,
			Columns: []string{patient.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !puo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ChatThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ChatThreadsTable,
			Columns: []string{patient.ChatThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChatThreadsIDs(); len(nodes) > 0 && !puo.mutation.ChatThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ChatThreadsTable,
			Columns: []string{patient.ChatThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChatThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ChatThreadsTable,
			Columns: []string{patient.ChatThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.DocumentsTable,
			Columns: []string{patient.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !puo.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.DocumentsTable,
			Columns: []string{patient.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.DocumentsTable,
			Columns: []string{patient.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BillingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.BillingRecordsTable,
			Columns: []string{patient.BillingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBillingRecordsIDs(); len(nodes) > 0 && !puo.mutation.BillingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.BillingRecordsTable,
			Columns: []string{patient.BillingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BillingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.BillingRecordsTable,
			Columns: []string{patient.BillingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.OrdersTable,
			Columns: []string{patient.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !puo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.OrdersTable,
			Columns: []string{patient.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.OrdersTable,
			Columns: []string{patient.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Patient{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
