// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctorschedule"
	"github.com/google/uuid"
)

// DoctorScheduleCreate is the builder for creating a DoctorSchedule entity.
type DoctorScheduleCreate struct {
	config
	mutation *DoctorScheduleMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (dsc *DoctorScheduleCreate) SetDate(t time.Time) *DoctorScheduleCreate {
	dsc.mutation.SetDate(t)
	return dsc
}

// SetStartTime sets the "start_time" field.
func (dsc *DoctorScheduleCreate) SetStartTime(t time.Time) *DoctorScheduleCreate {
	dsc.mutation.SetStartTime(t)
	return dsc
}

// SetEndTime sets the "end_time" field.
func (dsc *DoctorScheduleCreate) SetEndTime(t time.Time) *DoctorScheduleCreate {
	dsc.mutation.SetEndTime(t)
	return dsc
}

// SetAvailable sets the "available" field.
func (dsc *DoctorScheduleCreate) SetAvailable(b bool) *DoctorScheduleCreate {
	dsc.mutation.SetAvailable(b)
	return dsc
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (dsc *DoctorScheduleCreate) SetNillableAvailable(b *bool) *DoctorScheduleCreate {
	if b != nil {
		dsc.SetAvailable(*b)
	}
	return dsc
}

// SetNotes sets the "notes" field.
func (dsc *DoctorScheduleCreate) SetNotes(s string) *DoctorScheduleCreate {
	dsc.mutation.SetNotes(s)
	return dsc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dsc *DoctorScheduleCreate) SetNillableNotes(s *string) *DoctorScheduleCreate {
	if s != nil {
		dsc.SetNotes(*s)
	}
	return dsc
}

// SetCreatedAt sets the "created_at" field.
func (dsc *DoctorScheduleCreate) SetCreatedAt(t time.Time) *DoctorScheduleCreate {
	dsc.mutation.SetCreatedAt(t)
	return dsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsc *DoctorScheduleCreate) SetNillableCreatedAt(t *time.Time) *DoctorScheduleCreate {
	if t != nil {
		dsc.SetCreatedAt(*t)
	}
	return dsc
}

// SetID sets the "id" field.
func (dsc *DoctorScheduleCreate) SetID(u uuid.UUID) *DoctorScheduleCreate {
	dsc.mutation.SetID(u)
	return dsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dsc *DoctorScheduleCreate) SetNillableID(u *uuid.UUID) *DoctorScheduleCreate {
	if u != nil {
		dsc.SetID(*u)
	}
	return dsc
}

// SetDoctorID sets the "doctor" edge to the Doctor entity by ID.
func (dsc *DoctorScheduleCreate) SetDoctorID(id uuid.UUID) *DoctorScheduleCreate {
	dsc.mutation.SetDoctorID(id)
	return dsc
}

// SetNillableDoctorID sets the "doctor" edge to the Doctor entity by ID if the given value is not nil.
func (dsc *DoctorScheduleCreate) SetNillableDoctorID(id *uuid.UUID) *DoctorScheduleCreate {
	if id != nil {
		dsc = dsc.SetDoctorID(*id)
	}
	return dsc
}

// SetDoctor sets the "doctor" edge to the Doctor entity.
func (dsc *DoctorScheduleCreate) SetDoctor(d *Doctor) *DoctorScheduleCreate {
	return dsc.SetDoctorID(d.ID)
}

// Mutation returns the DoctorScheduleMutation object of the builder.
func (dsc *DoctorScheduleCreate) Mutation() *DoctorScheduleMutation {
	return dsc.mutation
}

// Save creates the DoctorSchedule in the database.
func (dsc *DoctorScheduleCreate) Save(ctx context.Context) (*DoctorSchedule, error) {
	dsc.defaults()
	return withHooks(ctx, dsc.sqlSave, dsc.mutation, dsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DoctorScheduleCreate) SaveX(ctx context.Context) *DoctorSchedule {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DoctorScheduleCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DoctorScheduleCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DoctorScheduleCreate) defaults() {
	if _, ok := dsc.mutation.Available(); !ok {
		v := doctorschedule.DefaultAvailable
		dsc.mutation.SetAvailable(v)
	}
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		v := doctorschedule.DefaultCreatedAt()
		dsc.mutation.SetCreatedAt(v)
	}
	if _, ok := dsc.mutation.ID(); !ok {
		v := doctorschedule.DefaultID()
		dsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DoctorScheduleCreate) check() error {
	if _, ok := dsc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`db: missing required field "DoctorSchedule.date"`)}
	}
	if _, ok := dsc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`db: missing required field "DoctorSchedule.start_time"`)}
	}
	if _, ok := dsc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`db: missing required field "DoctorSchedule.end_time"`)}
	}
	if _, ok := dsc.mutation.Available(); !ok {
		return &ValidationError{Name: "available", err: errors.New(`db: missing required field "DoctorSchedule.available"`)}
	}
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "DoctorSchedule.created_at"`)}
	}
	return nil
}

func (dsc *DoctorScheduleCreate) sqlSave(ctx context.Context) (*DoctorSchedule, error) {
	if err := dsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dsc.mutation.id = &_node.ID
	dsc.mutation.done = true
	return _node, nil
}

func (dsc *DoctorScheduleCreate) createSpec() (*DoctorSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &DoctorSchedule{config: dsc.config}
		_spec = sqlgraph.NewCreateSpec(doctorschedule.Table, sqlgraph.NewFieldSpec(doctorschedule.FieldID, field.TypeUUID))
	)
	if id, ok := dsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dsc.mutation.Date(); ok {
		_spec.SetField(doctorschedule.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := dsc.mutation.StartTime(); ok {
		_spec.SetField(doctorschedule.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := dsc.mutation.EndTime(); ok {
		_spec.SetField(doctorschedule.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := dsc.mutation.Available(); ok {
		_spec.SetField(doctorschedule.FieldAvailable, field.TypeBool, value)
		_node.Available = value
	}
	if value, ok := dsc.mutation.Notes(); ok {
		_spec.SetField(doctorschedule.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := dsc.mutation.CreatedAt(); ok {
		_spec.SetField(doctorschedule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := dsc.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorschedule.DoctorTable,
			Columns: []string{doctorschedule.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.doctor_schedules = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DoctorScheduleCreateBulk is the builder for creating many DoctorSchedule entities in bulk.
type DoctorScheduleCreateBulk struct {
	config
	err      error
	builders []*DoctorScheduleCreate
}

// Save creates the DoctorSchedule entities in the database.
func (dscb *DoctorScheduleCreateBulk) Save(ctx context.Context) ([]*DoctorSchedule, error) {
	if dscb.err != nil {
		return nil, dscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DoctorSchedule, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DoctorScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DoctorScheduleCreateBulk) SaveX(ctx context.Context) []*DoctorSchedule {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DoctorScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DoctorScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}
