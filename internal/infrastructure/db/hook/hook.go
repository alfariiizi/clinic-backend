// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/alfariiizi/vandor/internal/infrastructure/db"
)

// The AIInteractionFunc type is an adapter to allow the use of ordinary
// function as AIInteraction mutator.
type AIInteractionFunc func(context.Context, *db.AIInteractionMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AIInteractionFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AIInteractionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AIInteractionMutation", m)
}

// The AdminAuditLogFunc type is an adapter to allow the use of ordinary
// function as AdminAuditLog mutator.
type AdminAuditLogFunc func(context.Context, *db.AdminAuditLogMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AdminAuditLogFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AdminAuditLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AdminAuditLogMutation", m)
}

// The AppointmentFunc type is an adapter to allow the use of ordinary
// function as Appointment mutator.
type AppointmentFunc func(context.Context, *db.AppointmentMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AppointmentFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AppointmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AppointmentMutation", m)
}

// The AppointmentReminderFunc type is an adapter to allow the use of ordinary
// function as AppointmentReminder mutator.
type AppointmentReminderFunc func(context.Context, *db.AppointmentReminderMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AppointmentReminderFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AppointmentReminderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AppointmentReminderMutation", m)
}

// The BillingRecordFunc type is an adapter to allow the use of ordinary
// function as BillingRecord mutator.
type BillingRecordFunc func(context.Context, *db.BillingRecordMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f BillingRecordFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.BillingRecordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.BillingRecordMutation", m)
}

// The ChatMessageFunc type is an adapter to allow the use of ordinary
// function as ChatMessage mutator.
type ChatMessageFunc func(context.Context, *db.ChatMessageMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ChatMessageFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ChatMessageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ChatMessageMutation", m)
}

// The ChatThreadFunc type is an adapter to allow the use of ordinary
// function as ChatThread mutator.
type ChatThreadFunc func(context.Context, *db.ChatThreadMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ChatThreadFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ChatThreadMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ChatThreadMutation", m)
}

// The ClinicFunc type is an adapter to allow the use of ordinary
// function as Clinic mutator.
type ClinicFunc func(context.Context, *db.ClinicMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ClinicFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ClinicMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ClinicMutation", m)
}

// The ClinicUserFunc type is an adapter to allow the use of ordinary
// function as ClinicUser mutator.
type ClinicUserFunc func(context.Context, *db.ClinicUserMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ClinicUserFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ClinicUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ClinicUserMutation", m)
}

// The DoctorFunc type is an adapter to allow the use of ordinary
// function as Doctor mutator.
type DoctorFunc func(context.Context, *db.DoctorMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f DoctorFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.DoctorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.DoctorMutation", m)
}

// The DoctorScheduleFunc type is an adapter to allow the use of ordinary
// function as DoctorSchedule mutator.
type DoctorScheduleFunc func(context.Context, *db.DoctorScheduleMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f DoctorScheduleFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.DoctorScheduleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.DoctorScheduleMutation", m)
}

// The DocumentFunc type is an adapter to allow the use of ordinary
// function as Document mutator.
type DocumentFunc func(context.Context, *db.DocumentMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f DocumentFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.DocumentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.DocumentMutation", m)
}

// The FeatureFunc type is an adapter to allow the use of ordinary
// function as Feature mutator.
type FeatureFunc func(context.Context, *db.FeatureMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f FeatureFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.FeatureMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.FeatureMutation", m)
}

// The InventoryMovementFunc type is an adapter to allow the use of ordinary
// function as InventoryMovement mutator.
type InventoryMovementFunc func(context.Context, *db.InventoryMovementMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f InventoryMovementFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.InventoryMovementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.InventoryMovementMutation", m)
}

// The KnowledgeBaseFunc type is an adapter to allow the use of ordinary
// function as KnowledgeBase mutator.
type KnowledgeBaseFunc func(context.Context, *db.KnowledgeBaseMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f KnowledgeBaseFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.KnowledgeBaseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.KnowledgeBaseMutation", m)
}

// The OrderFunc type is an adapter to allow the use of ordinary
// function as Order mutator.
type OrderFunc func(context.Context, *db.OrderMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f OrderFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.OrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.OrderMutation", m)
}

// The OrderItemFunc type is an adapter to allow the use of ordinary
// function as OrderItem mutator.
type OrderItemFunc func(context.Context, *db.OrderItemMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f OrderItemFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.OrderItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.OrderItemMutation", m)
}

// The OrderStatusHistoryFunc type is an adapter to allow the use of ordinary
// function as OrderStatusHistory mutator.
type OrderStatusHistoryFunc func(context.Context, *db.OrderStatusHistoryMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f OrderStatusHistoryFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.OrderStatusHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.OrderStatusHistoryMutation", m)
}

// The PatientFunc type is an adapter to allow the use of ordinary
// function as Patient mutator.
type PatientFunc func(context.Context, *db.PatientMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f PatientFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.PatientMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.PatientMutation", m)
}

// The ProductFunc type is an adapter to allow the use of ordinary
// function as Product mutator.
type ProductFunc func(context.Context, *db.ProductMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ProductMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ProductMutation", m)
}

// The ProductCategoryFunc type is an adapter to allow the use of ordinary
// function as ProductCategory mutator.
type ProductCategoryFunc func(context.Context, *db.ProductCategoryMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ProductCategoryFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ProductCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ProductCategoryMutation", m)
}

// The QueueEntryFunc type is an adapter to allow the use of ordinary
// function as QueueEntry mutator.
type QueueEntryFunc func(context.Context, *db.QueueEntryMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f QueueEntryFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.QueueEntryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.QueueEntryMutation", m)
}

// The ServiceFunc type is an adapter to allow the use of ordinary
// function as Service mutator.
type ServiceFunc func(context.Context, *db.ServiceMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ServiceFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ServiceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ServiceMutation", m)
}

// The SessionFunc type is an adapter to allow the use of ordinary
// function as Session mutator.
type SessionFunc func(context.Context, *db.SessionMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f SessionFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.SessionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.SessionMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *db.UserMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.UserMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, db.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m db.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m db.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m db.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op db.Op) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk db.Hook, cond Condition) db.Hook {
	return func(next db.Mutator) db.Mutator {
		return db.MutateFunc(func(ctx context.Context, m db.Mutation) (db.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, db.Delete|db.Create)
func On(hk db.Hook, op db.Op) db.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, db.Update|db.UpdateOne)
func Unless(hk db.Hook, op db.Op) db.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) db.Hook {
	return func(db.Mutator) db.Mutator {
		return db.MutateFunc(func(context.Context, db.Mutation) (db.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []db.Hook {
//		return []db.Hook{
//			Reject(db.Delete|db.Update),
//		}
//	}
func Reject(op db.Op) db.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []db.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...db.Hook) Chain {
	return Chain{append([]db.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() db.Hook {
	return func(mutator db.Mutator) db.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...db.Hook) Chain {
	newHooks := make([]db.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
