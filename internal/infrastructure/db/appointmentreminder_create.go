// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointmentreminder"
	"github.com/google/uuid"
)

// AppointmentReminderCreate is the builder for creating a AppointmentReminder entity.
type AppointmentReminderCreate struct {
	config
	mutation *AppointmentReminderMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (arc *AppointmentReminderCreate) SetType(a appointmentreminder.Type) *AppointmentReminderCreate {
	arc.mutation.SetType(a)
	return arc
}

// SetScheduledTime sets the "scheduled_time" field.
func (arc *AppointmentReminderCreate) SetScheduledTime(t time.Time) *AppointmentReminderCreate {
	arc.mutation.SetScheduledTime(t)
	return arc
}

// SetMessage sets the "message" field.
func (arc *AppointmentReminderCreate) SetMessage(s string) *AppointmentReminderCreate {
	arc.mutation.SetMessage(s)
	return arc
}

// SetStatus sets the "status" field.
func (arc *AppointmentReminderCreate) SetStatus(a appointmentreminder.Status) *AppointmentReminderCreate {
	arc.mutation.SetStatus(a)
	return arc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (arc *AppointmentReminderCreate) SetNillableStatus(a *appointmentreminder.Status) *AppointmentReminderCreate {
	if a != nil {
		arc.SetStatus(*a)
	}
	return arc
}

// SetSentAt sets the "sent_at" field.
func (arc *AppointmentReminderCreate) SetSentAt(t time.Time) *AppointmentReminderCreate {
	arc.mutation.SetSentAt(t)
	return arc
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (arc *AppointmentReminderCreate) SetNillableSentAt(t *time.Time) *AppointmentReminderCreate {
	if t != nil {
		arc.SetSentAt(*t)
	}
	return arc
}

// SetCreatedAt sets the "created_at" field.
func (arc *AppointmentReminderCreate) SetCreatedAt(t time.Time) *AppointmentReminderCreate {
	arc.mutation.SetCreatedAt(t)
	return arc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arc *AppointmentReminderCreate) SetNillableCreatedAt(t *time.Time) *AppointmentReminderCreate {
	if t != nil {
		arc.SetCreatedAt(*t)
	}
	return arc
}

// SetID sets the "id" field.
func (arc *AppointmentReminderCreate) SetID(u uuid.UUID) *AppointmentReminderCreate {
	arc.mutation.SetID(u)
	return arc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (arc *AppointmentReminderCreate) SetNillableID(u *uuid.UUID) *AppointmentReminderCreate {
	if u != nil {
		arc.SetID(*u)
	}
	return arc
}

// SetAppointmentID sets the "appointment" edge to the Appointment entity by ID.
func (arc *AppointmentReminderCreate) SetAppointmentID(id uuid.UUID) *AppointmentReminderCreate {
	arc.mutation.SetAppointmentID(id)
	return arc
}

// SetNillableAppointmentID sets the "appointment" edge to the Appointment entity by ID if the given value is not nil.
func (arc *AppointmentReminderCreate) SetNillableAppointmentID(id *uuid.UUID) *AppointmentReminderCreate {
	if id != nil {
		arc = arc.SetAppointmentID(*id)
	}
	return arc
}

// SetAppointment sets the "appointment" edge to the Appointment entity.
func (arc *AppointmentReminderCreate) SetAppointment(a *Appointment) *AppointmentReminderCreate {
	return arc.SetAppointmentID(a.ID)
}

// Mutation returns the AppointmentReminderMutation object of the builder.
func (arc *AppointmentReminderCreate) Mutation() *AppointmentReminderMutation {
	return arc.mutation
}

// Save creates the AppointmentReminder in the database.
func (arc *AppointmentReminderCreate) Save(ctx context.Context) (*AppointmentReminder, error) {
	arc.defaults()
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AppointmentReminderCreate) SaveX(ctx context.Context) *AppointmentReminder {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AppointmentReminderCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AppointmentReminderCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *AppointmentReminderCreate) defaults() {
	if _, ok := arc.mutation.Status(); !ok {
		v := appointmentreminder.DefaultStatus
		arc.mutation.SetStatus(v)
	}
	if _, ok := arc.mutation.CreatedAt(); !ok {
		v := appointmentreminder.DefaultCreatedAt()
		arc.mutation.SetCreatedAt(v)
	}
	if _, ok := arc.mutation.ID(); !ok {
		v := appointmentreminder.DefaultID()
		arc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AppointmentReminderCreate) check() error {
	if _, ok := arc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "AppointmentReminder.type"`)}
	}
	if v, ok := arc.mutation.GetType(); ok {
		if err := appointmentreminder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "AppointmentReminder.type": %w`, err)}
		}
	}
	if _, ok := arc.mutation.ScheduledTime(); !ok {
		return &ValidationError{Name: "scheduled_time", err: errors.New(`db: missing required field "AppointmentReminder.scheduled_time"`)}
	}
	if _, ok := arc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`db: missing required field "AppointmentReminder.message"`)}
	}
	if _, ok := arc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "AppointmentReminder.status"`)}
	}
	if v, ok := arc.mutation.Status(); ok {
		if err := appointmentreminder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "AppointmentReminder.status": %w`, err)}
		}
	}
	if _, ok := arc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AppointmentReminder.created_at"`)}
	}
	return nil
}

func (arc *AppointmentReminderCreate) sqlSave(ctx context.Context) (*AppointmentReminder, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AppointmentReminderCreate) createSpec() (*AppointmentReminder, *sqlgraph.CreateSpec) {
	var (
		_node = &AppointmentReminder{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(appointmentreminder.Table, sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID))
	)
	if id, ok := arc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := arc.mutation.GetType(); ok {
		_spec.SetField(appointmentreminder.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := arc.mutation.ScheduledTime(); ok {
		_spec.SetField(appointmentreminder.FieldScheduledTime, field.TypeTime, value)
		_node.ScheduledTime = value
	}
	if value, ok := arc.mutation.Message(); ok {
		_spec.SetField(appointmentreminder.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := arc.mutation.Status(); ok {
		_spec.SetField(appointmentreminder.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := arc.mutation.SentAt(); ok {
		_spec.SetField(appointmentreminder.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if value, ok := arc.mutation.CreatedAt(); ok {
		_spec.SetField(appointmentreminder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := arc.mutation.AppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentreminder.AppointmentTable,
			Columns: []string{appointmentreminder.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.appointment_reminders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppointmentReminderCreateBulk is the builder for creating many AppointmentReminder entities in bulk.
type AppointmentReminderCreateBulk struct {
	config
	err      error
	builders []*AppointmentReminderCreate
}

// Save creates the AppointmentReminder entities in the database.
func (arcb *AppointmentReminderCreateBulk) Save(ctx context.Context) ([]*AppointmentReminder, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AppointmentReminder, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppointmentReminderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AppointmentReminderCreateBulk) SaveX(ctx context.Context) []*AppointmentReminder {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AppointmentReminderCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AppointmentReminderCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
