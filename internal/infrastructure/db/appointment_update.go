// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointmentreminder"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderitem"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/service"
	"github.com/google/uuid"
)

// AppointmentUpdate is the builder for updating Appointment entities.
type AppointmentUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentMutation
}

// Where appends a list predicates to the AppointmentUpdate builder.
func (au *AppointmentUpdate) Where(ps ...predicate.Appointment) *AppointmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAppointmentDate sets the "appointment_date" field.
func (au *AppointmentUpdate) SetAppointmentDate(t time.Time) *AppointmentUpdate {
	au.mutation.SetAppointmentDate(t)
	return au
}

// SetNillableAppointmentDate sets the "appointment_date" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableAppointmentDate(t *time.Time) *AppointmentUpdate {
	if t != nil {
		au.SetAppointmentDate(*t)
	}
	return au
}

// SetStartTime sets the "start_time" field.
func (au *AppointmentUpdate) SetStartTime(t time.Time) *AppointmentUpdate {
	au.mutation.SetStartTime(t)
	return au
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableStartTime(t *time.Time) *AppointmentUpdate {
	if t != nil {
		au.SetStartTime(*t)
	}
	return au
}

// SetEndTime sets the "end_time" field.
func (au *AppointmentUpdate) SetEndTime(t time.Time) *AppointmentUpdate {
	au.mutation.SetEndTime(t)
	return au
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableEndTime(t *time.Time) *AppointmentUpdate {
	if t != nil {
		au.SetEndTime(*t)
	}
	return au
}

// SetStatus sets the "status" field.
func (au *AppointmentUpdate) SetStatus(a appointment.Status) *AppointmentUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableStatus(a *appointment.Status) *AppointmentUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// SetNotes sets the "notes" field.
func (au *AppointmentUpdate) SetNotes(s string) *AppointmentUpdate {
	au.mutation.SetNotes(s)
	return au
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableNotes(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetNotes(*s)
	}
	return au
}

// ClearNotes clears the value of the "notes" field.
func (au *AppointmentUpdate) ClearNotes() *AppointmentUpdate {
	au.mutation.ClearNotes()
	return au
}

// SetSymptoms sets the "symptoms" field.
func (au *AppointmentUpdate) SetSymptoms(s string) *AppointmentUpdate {
	au.mutation.SetSymptoms(s)
	return au
}

// SetNillableSymptoms sets the "symptoms" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableSymptoms(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetSymptoms(*s)
	}
	return au
}

// ClearSymptoms clears the value of the "symptoms" field.
func (au *AppointmentUpdate) ClearSymptoms() *AppointmentUpdate {
	au.mutation.ClearSymptoms()
	return au
}

// SetDiagnosis sets the "diagnosis" field.
func (au *AppointmentUpdate) SetDiagnosis(s string) *AppointmentUpdate {
	au.mutation.SetDiagnosis(s)
	return au
}

// SetNillableDiagnosis sets the "diagnosis" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableDiagnosis(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetDiagnosis(*s)
	}
	return au
}

// ClearDiagnosis clears the value of the "diagnosis" field.
func (au *AppointmentUpdate) ClearDiagnosis() *AppointmentUpdate {
	au.mutation.ClearDiagnosis()
	return au
}

// SetTreatmentPlan sets the "treatment_plan" field.
func (au *AppointmentUpdate) SetTreatmentPlan(s string) *AppointmentUpdate {
	au.mutation.SetTreatmentPlan(s)
	return au
}

// SetNillableTreatmentPlan sets the "treatment_plan" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableTreatmentPlan(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetTreatmentPlan(*s)
	}
	return au
}

// ClearTreatmentPlan clears the value of the "treatment_plan" field.
func (au *AppointmentUpdate) ClearTreatmentPlan() *AppointmentUpdate {
	au.mutation.ClearTreatmentPlan()
	return au
}

// SetPrescriptions sets the "prescriptions" field.
func (au *AppointmentUpdate) SetPrescriptions(m []map[string]interface{}) *AppointmentUpdate {
	au.mutation.SetPrescriptions(m)
	return au
}

// AppendPrescriptions appends m to the "prescriptions" field.
func (au *AppointmentUpdate) AppendPrescriptions(m []map[string]interface{}) *AppointmentUpdate {
	au.mutation.AppendPrescriptions(m)
	return au
}

// ClearPrescriptions clears the value of the "prescriptions" field.
func (au *AppointmentUpdate) ClearPrescriptions() *AppointmentUpdate {
	au.mutation.ClearPrescriptions()
	return au
}

// SetTotalCost sets the "total_cost" field.
func (au *AppointmentUpdate) SetTotalCost(f float64) *AppointmentUpdate {
	au.mutation.ResetTotalCost()
	au.mutation.SetTotalCost(f)
	return au
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableTotalCost(f *float64) *AppointmentUpdate {
	if f != nil {
		au.SetTotalCost(*f)
	}
	return au
}

// AddTotalCost adds f to the "total_cost" field.
func (au *AppointmentUpdate) AddTotalCost(f float64) *AppointmentUpdate {
	au.mutation.AddTotalCost(f)
	return au
}

// ClearTotalCost clears the value of the "total_cost" field.
func (au *AppointmentUpdate) ClearTotalCost() *AppointmentUpdate {
	au.mutation.ClearTotalCost()
	return au
}

// SetPaymentStatus sets the "payment_status" field.
func (au *AppointmentUpdate) SetPaymentStatus(as appointment.PaymentStatus) *AppointmentUpdate {
	au.mutation.SetPaymentStatus(as)
	return au
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillablePaymentStatus(as *appointment.PaymentStatus) *AppointmentUpdate {
	if as != nil {
		au.SetPaymentStatus(*as)
	}
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AppointmentUpdate) SetCreatedAt(t time.Time) *AppointmentUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableCreatedAt(t *time.Time) *AppointmentUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AppointmentUpdate) SetUpdatedAt(t time.Time) *AppointmentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (au *AppointmentUpdate) SetClinicID(id uuid.UUID) *AppointmentUpdate {
	au.mutation.SetClinicID(id)
	return au
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (au *AppointmentUpdate) SetNillableClinicID(id *uuid.UUID) *AppointmentUpdate {
	if id != nil {
		au = au.SetClinicID(*id)
	}
	return au
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (au *AppointmentUpdate) SetClinic(c *Clinic) *AppointmentUpdate {
	return au.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (au *AppointmentUpdate) SetPatientID(id uuid.UUID) *AppointmentUpdate {
	au.mutation.SetPatientID(id)
	return au
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (au *AppointmentUpdate) SetNillablePatientID(id *uuid.UUID) *AppointmentUpdate {
	if id != nil {
		au = au.SetPatientID(*id)
	}
	return au
}

// SetPatient sets the "patient" edge to the Patient entity.
func (au *AppointmentUpdate) SetPatient(p *Patient) *AppointmentUpdate {
	return au.SetPatientID(p.ID)
}

// SetDoctorID sets the "doctor" edge to the Doctor entity by ID.
func (au *AppointmentUpdate) SetDoctorID(id uuid.UUID) *AppointmentUpdate {
	au.mutation.SetDoctorID(id)
	return au
}

// SetNillableDoctorID sets the "doctor" edge to the Doctor entity by ID if the given value is not nil.
func (au *AppointmentUpdate) SetNillableDoctorID(id *uuid.UUID) *AppointmentUpdate {
	if id != nil {
		au = au.SetDoctorID(*id)
	}
	return au
}

// SetDoctor sets the "doctor" edge to the Doctor entity.
func (au *AppointmentUpdate) SetDoctor(d *Doctor) *AppointmentUpdate {
	return au.SetDoctorID(d.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (au *AppointmentUpdate) SetServiceID(id uuid.UUID) *AppointmentUpdate {
	au.mutation.SetServiceID(id)
	return au
}

// SetService sets the "service" edge to the Service entity.
func (au *AppointmentUpdate) SetService(s *Service) *AppointmentUpdate {
	return au.SetServiceID(s.ID)
}

// AddReminderIDs adds the "reminders" edge to the AppointmentReminder entity by IDs.
func (au *AppointmentUpdate) AddReminderIDs(ids ...uuid.UUID) *AppointmentUpdate {
	au.mutation.AddReminderIDs(ids...)
	return au
}

// AddReminders adds the "reminders" edges to the AppointmentReminder entity.
func (au *AppointmentUpdate) AddReminders(a ...*AppointmentReminder) *AppointmentUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddReminderIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (au *AppointmentUpdate) AddOrderItemIDs(ids ...uuid.UUID) *AppointmentUpdate {
	au.mutation.AddOrderItemIDs(ids...)
	return au
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (au *AppointmentUpdate) AddOrderItems(o ...*OrderItem) *AppointmentUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOrderItemIDs(ids...)
}

// Mutation returns the AppointmentMutation object of the builder.
func (au *AppointmentUpdate) Mutation() *AppointmentMutation {
	return au.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (au *AppointmentUpdate) ClearClinic() *AppointmentUpdate {
	au.mutation.ClearClinic()
	return au
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (au *AppointmentUpdate) ClearPatient() *AppointmentUpdate {
	au.mutation.ClearPatient()
	return au
}

// ClearDoctor clears the "doctor" edge to the Doctor entity.
func (au *AppointmentUpdate) ClearDoctor() *AppointmentUpdate {
	au.mutation.ClearDoctor()
	return au
}

// ClearService clears the "service" edge to the Service entity.
func (au *AppointmentUpdate) ClearService() *AppointmentUpdate {
	au.mutation.ClearService()
	return au
}

// ClearReminders clears all "reminders" edges to the AppointmentReminder entity.
func (au *AppointmentUpdate) ClearReminders() *AppointmentUpdate {
	au.mutation.ClearReminders()
	return au
}

// RemoveReminderIDs removes the "reminders" edge to AppointmentReminder entities by IDs.
func (au *AppointmentUpdate) RemoveReminderIDs(ids ...uuid.UUID) *AppointmentUpdate {
	au.mutation.RemoveReminderIDs(ids...)
	return au
}

// RemoveReminders removes "reminders" edges to AppointmentReminder entities.
func (au *AppointmentUpdate) RemoveReminders(a ...*AppointmentReminder) *AppointmentUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveReminderIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (au *AppointmentUpdate) ClearOrderItems() *AppointmentUpdate {
	au.mutation.ClearOrderItems()
	return au
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (au *AppointmentUpdate) RemoveOrderItemIDs(ids ...uuid.UUID) *AppointmentUpdate {
	au.mutation.RemoveOrderItemIDs(ids...)
	return au
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (au *AppointmentUpdate) RemoveOrderItems(o ...*OrderItem) *AppointmentUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOrderItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppointmentUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppointmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppointmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppointmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppointmentUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := appointment.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AppointmentUpdate) check() error {
	if v, ok := au.mutation.Status(); ok {
		if err := appointment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Appointment.status": %w`, err)}
		}
	}
	if v, ok := au.mutation.PaymentStatus(); ok {
		if err := appointment.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`db: validator failed for field "Appointment.payment_status": %w`, err)}
		}
	}
	if au.mutation.ServiceCleared() && len(au.mutation.ServiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Appointment.service"`)
	}
	return nil
}

func (au *AppointmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appointment.Table, appointment.Columns, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AppointmentDate(); ok {
		_spec.SetField(appointment.FieldAppointmentDate, field.TypeTime, value)
	}
	if value, ok := au.mutation.StartTime(); ok {
		_spec.SetField(appointment.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.EndTime(); ok {
		_spec.SetField(appointment.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Notes(); ok {
		_spec.SetField(appointment.FieldNotes, field.TypeString, value)
	}
	if au.mutation.NotesCleared() {
		_spec.ClearField(appointment.FieldNotes, field.TypeString)
	}
	if value, ok := au.mutation.Symptoms(); ok {
		_spec.SetField(appointment.FieldSymptoms, field.TypeString, value)
	}
	if au.mutation.SymptomsCleared() {
		_spec.ClearField(appointment.FieldSymptoms, field.TypeString)
	}
	if value, ok := au.mutation.Diagnosis(); ok {
		_spec.SetField(appointment.FieldDiagnosis, field.TypeString, value)
	}
	if au.mutation.DiagnosisCleared() {
		_spec.ClearField(appointment.FieldDiagnosis, field.TypeString)
	}
	if value, ok := au.mutation.TreatmentPlan(); ok {
		_spec.SetField(appointment.FieldTreatmentPlan, field.TypeString, value)
	}
	if au.mutation.TreatmentPlanCleared() {
		_spec.ClearField(appointment.FieldTreatmentPlan, field.TypeString)
	}
	if value, ok := au.mutation.Prescriptions(); ok {
		_spec.SetField(appointment.FieldPrescriptions, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedPrescriptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appointment.FieldPrescriptions, value)
		})
	}
	if au.mutation.PrescriptionsCleared() {
		_spec.ClearField(appointment.FieldPrescriptions, field.TypeJSON)
	}
	if value, ok := au.mutation.TotalCost(); ok {
		_spec.SetField(appointment.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedTotalCost(); ok {
		_spec.AddField(appointment.FieldTotalCost, field.TypeFloat64, value)
	}
	if au.mutation.TotalCostCleared() {
		_spec.ClearField(appointment.FieldTotalCost, field.TypeFloat64)
	}
	if value, ok := au.mutation.PaymentStatus(); ok {
		_spec.SetField(appointment.FieldPaymentStatus, field.TypeEnum, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(appointment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(appointment.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ClinicTable,
			Columns: []string{appointment.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ClinicTable,
			Columns: []string{appointment.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.DoctorTable,
			Columns: []string{appointment.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.DoctorTable,
			Columns: []string{appointment.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ServiceTable,
			Columns: []string{appointment.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ServiceTable,
			Columns: []string{appointment.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RemindersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.RemindersTable,
			Columns: []string{appointment.RemindersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRemindersIDs(); len(nodes) > 0 && !au.mutation.RemindersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.RemindersTable,
			Columns: []string{appointment.RemindersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemindersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.RemindersTable,
			Columns: []string{appointment.RemindersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.OrderItemsTable,
			Columns: []string{appointment.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !au.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.OrderItemsTable,
			Columns: []string{appointment.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.OrderItemsTable,
			Columns: []string{appointment.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppointmentUpdateOne is the builder for updating a single Appointment entity.
type AppointmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppointmentMutation
}

// SetAppointmentDate sets the "appointment_date" field.
func (auo *AppointmentUpdateOne) SetAppointmentDate(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetAppointmentDate(t)
	return auo
}

// SetNillableAppointmentDate sets the "appointment_date" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableAppointmentDate(t *time.Time) *AppointmentUpdateOne {
	if t != nil {
		auo.SetAppointmentDate(*t)
	}
	return auo
}

// SetStartTime sets the "start_time" field.
func (auo *AppointmentUpdateOne) SetStartTime(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetStartTime(t)
	return auo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableStartTime(t *time.Time) *AppointmentUpdateOne {
	if t != nil {
		auo.SetStartTime(*t)
	}
	return auo
}

// SetEndTime sets the "end_time" field.
func (auo *AppointmentUpdateOne) SetEndTime(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetEndTime(t)
	return auo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableEndTime(t *time.Time) *AppointmentUpdateOne {
	if t != nil {
		auo.SetEndTime(*t)
	}
	return auo
}

// SetStatus sets the "status" field.
func (auo *AppointmentUpdateOne) SetStatus(a appointment.Status) *AppointmentUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableStatus(a *appointment.Status) *AppointmentUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// SetNotes sets the "notes" field.
func (auo *AppointmentUpdateOne) SetNotes(s string) *AppointmentUpdateOne {
	auo.mutation.SetNotes(s)
	return auo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableNotes(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetNotes(*s)
	}
	return auo
}

// ClearNotes clears the value of the "notes" field.
func (auo *AppointmentUpdateOne) ClearNotes() *AppointmentUpdateOne {
	auo.mutation.ClearNotes()
	return auo
}

// SetSymptoms sets the "symptoms" field.
func (auo *AppointmentUpdateOne) SetSymptoms(s string) *AppointmentUpdateOne {
	auo.mutation.SetSymptoms(s)
	return auo
}

// SetNillableSymptoms sets the "symptoms" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableSymptoms(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetSymptoms(*s)
	}
	return auo
}

// ClearSymptoms clears the value of the "symptoms" field.
func (auo *AppointmentUpdateOne) ClearSymptoms() *AppointmentUpdateOne {
	auo.mutation.ClearSymptoms()
	return auo
}

// SetDiagnosis sets the "diagnosis" field.
func (auo *AppointmentUpdateOne) SetDiagnosis(s string) *AppointmentUpdateOne {
	auo.mutation.SetDiagnosis(s)
	return auo
}

// SetNillableDiagnosis sets the "diagnosis" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableDiagnosis(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetDiagnosis(*s)
	}
	return auo
}

// ClearDiagnosis clears the value of the "diagnosis" field.
func (auo *AppointmentUpdateOne) ClearDiagnosis() *AppointmentUpdateOne {
	auo.mutation.ClearDiagnosis()
	return auo
}

// SetTreatmentPlan sets the "treatment_plan" field.
func (auo *AppointmentUpdateOne) SetTreatmentPlan(s string) *AppointmentUpdateOne {
	auo.mutation.SetTreatmentPlan(s)
	return auo
}

// SetNillableTreatmentPlan sets the "treatment_plan" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableTreatmentPlan(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetTreatmentPlan(*s)
	}
	return auo
}

// ClearTreatmentPlan clears the value of the "treatment_plan" field.
func (auo *AppointmentUpdateOne) ClearTreatmentPlan() *AppointmentUpdateOne {
	auo.mutation.ClearTreatmentPlan()
	return auo
}

// SetPrescriptions sets the "prescriptions" field.
func (auo *AppointmentUpdateOne) SetPrescriptions(m []map[string]interface{}) *AppointmentUpdateOne {
	auo.mutation.SetPrescriptions(m)
	return auo
}

// AppendPrescriptions appends m to the "prescriptions" field.
func (auo *AppointmentUpdateOne) AppendPrescriptions(m []map[string]interface{}) *AppointmentUpdateOne {
	auo.mutation.AppendPrescriptions(m)
	return auo
}

// ClearPrescriptions clears the value of the "prescriptions" field.
func (auo *AppointmentUpdateOne) ClearPrescriptions() *AppointmentUpdateOne {
	auo.mutation.ClearPrescriptions()
	return auo
}

// SetTotalCost sets the "total_cost" field.
func (auo *AppointmentUpdateOne) SetTotalCost(f float64) *AppointmentUpdateOne {
	auo.mutation.ResetTotalCost()
	auo.mutation.SetTotalCost(f)
	return auo
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableTotalCost(f *float64) *AppointmentUpdateOne {
	if f != nil {
		auo.SetTotalCost(*f)
	}
	return auo
}

// AddTotalCost adds f to the "total_cost" field.
func (auo *AppointmentUpdateOne) AddTotalCost(f float64) *AppointmentUpdateOne {
	auo.mutation.AddTotalCost(f)
	return auo
}

// ClearTotalCost clears the value of the "total_cost" field.
func (auo *AppointmentUpdateOne) ClearTotalCost() *AppointmentUpdateOne {
	auo.mutation.ClearTotalCost()
	return auo
}

// SetPaymentStatus sets the "payment_status" field.
func (auo *AppointmentUpdateOne) SetPaymentStatus(as appointment.PaymentStatus) *AppointmentUpdateOne {
	auo.mutation.SetPaymentStatus(as)
	return auo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillablePaymentStatus(as *appointment.PaymentStatus) *AppointmentUpdateOne {
	if as != nil {
		auo.SetPaymentStatus(*as)
	}
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AppointmentUpdateOne) SetCreatedAt(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableCreatedAt(t *time.Time) *AppointmentUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AppointmentUpdateOne) SetUpdatedAt(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (auo *AppointmentUpdateOne) SetClinicID(id uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.SetClinicID(id)
	return auo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableClinicID(id *uuid.UUID) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetClinicID(*id)
	}
	return auo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (auo *AppointmentUpdateOne) SetClinic(c *Clinic) *AppointmentUpdateOne {
	return auo.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (auo *AppointmentUpdateOne) SetPatientID(id uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.SetPatientID(id)
	return auo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillablePatientID(id *uuid.UUID) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetPatientID(*id)
	}
	return auo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (auo *AppointmentUpdateOne) SetPatient(p *Patient) *AppointmentUpdateOne {
	return auo.SetPatientID(p.ID)
}

// SetDoctorID sets the "doctor" edge to the Doctor entity by ID.
func (auo *AppointmentUpdateOne) SetDoctorID(id uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.SetDoctorID(id)
	return auo
}

// SetNillableDoctorID sets the "doctor" edge to the Doctor entity by ID if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableDoctorID(id *uuid.UUID) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetDoctorID(*id)
	}
	return auo
}

// SetDoctor sets the "doctor" edge to the Doctor entity.
func (auo *AppointmentUpdateOne) SetDoctor(d *Doctor) *AppointmentUpdateOne {
	return auo.SetDoctorID(d.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (auo *AppointmentUpdateOne) SetServiceID(id uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.SetServiceID(id)
	return auo
}

// SetService sets the "service" edge to the Service entity.
func (auo *AppointmentUpdateOne) SetService(s *Service) *AppointmentUpdateOne {
	return auo.SetServiceID(s.ID)
}

// AddReminderIDs adds the "reminders" edge to the AppointmentReminder entity by IDs.
func (auo *AppointmentUpdateOne) AddReminderIDs(ids ...uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.AddReminderIDs(ids...)
	return auo
}

// AddReminders adds the "reminders" edges to the AppointmentReminder entity.
func (auo *AppointmentUpdateOne) AddReminders(a ...*AppointmentReminder) *AppointmentUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddReminderIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (auo *AppointmentUpdateOne) AddOrderItemIDs(ids ...uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.AddOrderItemIDs(ids...)
	return auo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (auo *AppointmentUpdateOne) AddOrderItems(o ...*OrderItem) *AppointmentUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOrderItemIDs(ids...)
}

// Mutation returns the AppointmentMutation object of the builder.
func (auo *AppointmentUpdateOne) Mutation() *AppointmentMutation {
	return auo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (auo *AppointmentUpdateOne) ClearClinic() *AppointmentUpdateOne {
	auo.mutation.ClearClinic()
	return auo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (auo *AppointmentUpdateOne) ClearPatient() *AppointmentUpdateOne {
	auo.mutation.ClearPatient()
	return auo
}

// ClearDoctor clears the "doctor" edge to the Doctor entity.
func (auo *AppointmentUpdateOne) ClearDoctor() *AppointmentUpdateOne {
	auo.mutation.ClearDoctor()
	return auo
}

// ClearService clears the "service" edge to the Service entity.
func (auo *AppointmentUpdateOne) ClearService() *AppointmentUpdateOne {
	auo.mutation.ClearService()
	return auo
}

// ClearReminders clears all "reminders" edges to the AppointmentReminder entity.
func (auo *AppointmentUpdateOne) ClearReminders() *AppointmentUpdateOne {
	auo.mutation.ClearReminders()
	return auo
}

// RemoveReminderIDs removes the "reminders" edge to AppointmentReminder entities by IDs.
func (auo *AppointmentUpdateOne) RemoveReminderIDs(ids ...uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.RemoveReminderIDs(ids...)
	return auo
}

// RemoveReminders removes "reminders" edges to AppointmentReminder entities.
func (auo *AppointmentUpdateOne) RemoveReminders(a ...*AppointmentReminder) *AppointmentUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveReminderIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (auo *AppointmentUpdateOne) ClearOrderItems() *AppointmentUpdateOne {
	auo.mutation.ClearOrderItems()
	return auo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (auo *AppointmentUpdateOne) RemoveOrderItemIDs(ids ...uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.RemoveOrderItemIDs(ids...)
	return auo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (auo *AppointmentUpdateOne) RemoveOrderItems(o ...*OrderItem) *AppointmentUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOrderItemIDs(ids...)
}

// Where appends a list predicates to the AppointmentUpdate builder.
func (auo *AppointmentUpdateOne) Where(ps ...predicate.Appointment) *AppointmentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppointmentUpdateOne) Select(field string, fields ...string) *AppointmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Appointment entity.
func (auo *AppointmentUpdateOne) Save(ctx context.Context) (*Appointment, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppointmentUpdateOne) SaveX(ctx context.Context) *Appointment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppointmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppointmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppointmentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := appointment.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppointmentUpdateOne) check() error {
	if v, ok := auo.mutation.Status(); ok {
		if err := appointment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Appointment.status": %w`, err)}
		}
	}
	if v, ok := auo.mutation.PaymentStatus(); ok {
		if err := appointment.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`db: validator failed for field "Appointment.payment_status": %w`, err)}
		}
	}
	if auo.mutation.ServiceCleared() && len(auo.mutation.ServiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Appointment.service"`)
	}
	return nil
}

func (auo *AppointmentUpdateOne) sqlSave(ctx context.Context) (_node *Appointment, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appointment.Table, appointment.Columns, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Appointment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appointment.FieldID)
		for _, f := range fields {
			if !appointment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != appointment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.AppointmentDate(); ok {
		_spec.SetField(appointment.FieldAppointmentDate, field.TypeTime, value)
	}
	if value, ok := auo.mutation.StartTime(); ok {
		_spec.SetField(appointment.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.EndTime(); ok {
		_spec.SetField(appointment.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Notes(); ok {
		_spec.SetField(appointment.FieldNotes, field.TypeString, value)
	}
	if auo.mutation.NotesCleared() {
		_spec.ClearField(appointment.FieldNotes, field.TypeString)
	}
	if value, ok := auo.mutation.Symptoms(); ok {
		_spec.SetField(appointment.FieldSymptoms, field.TypeString, value)
	}
	if auo.mutation.SymptomsCleared() {
		_spec.ClearField(appointment.FieldSymptoms, field.TypeString)
	}
	if value, ok := auo.mutation.Diagnosis(); ok {
		_spec.SetField(appointment.FieldDiagnosis, field.TypeString, value)
	}
	if auo.mutation.DiagnosisCleared() {
		_spec.ClearField(appointment.FieldDiagnosis, field.TypeString)
	}
	if value, ok := auo.mutation.TreatmentPlan(); ok {
		_spec.SetField(appointment.FieldTreatmentPlan, field.TypeString, value)
	}
	if auo.mutation.TreatmentPlanCleared() {
		_spec.ClearField(appointment.FieldTreatmentPlan, field.TypeString)
	}
	if value, ok := auo.mutation.Prescriptions(); ok {
		_spec.SetField(appointment.FieldPrescriptions, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedPrescriptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appointment.FieldPrescriptions, value)
		})
	}
	if auo.mutation.PrescriptionsCleared() {
		_spec.ClearField(appointment.FieldPrescriptions, field.TypeJSON)
	}
	if value, ok := auo.mutation.TotalCost(); ok {
		_spec.SetField(appointment.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedTotalCost(); ok {
		_spec.AddField(appointment.FieldTotalCost, field.TypeFloat64, value)
	}
	if auo.mutation.TotalCostCleared() {
		_spec.ClearField(appointment.FieldTotalCost, field.TypeFloat64)
	}
	if value, ok := auo.mutation.PaymentStatus(); ok {
		_spec.SetField(appointment.FieldPaymentStatus, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(appointment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(appointment.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ClinicTable,
			Columns: []string{appointment.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ClinicTable,
			Columns: []string{appointment.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.DoctorTable,
			Columns: []string{appointment.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.DoctorTable,
			Columns: []string{appointment.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ServiceTable,
			Columns: []string{appointment.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ServiceTable,
			Columns: []string{appointment.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RemindersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.RemindersTable,
			Columns: []string{appointment.RemindersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRemindersIDs(); len(nodes) > 0 && !auo.mutation.RemindersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.RemindersTable,
			Columns: []string{appointment.RemindersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemindersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.RemindersTable,
			Columns: []string{appointment.RemindersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.OrderItemsTable,
			Columns: []string{appointment.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !auo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.OrderItemsTable,
			Columns: []string{appointment.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.OrderItemsTable,
			Columns: []string{appointment.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Appointment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
