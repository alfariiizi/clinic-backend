// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/inventorymovement"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/google/uuid"
)

// InventoryMovementUpdate is the builder for updating InventoryMovement entities.
type InventoryMovementUpdate struct {
	config
	hooks    []Hook
	mutation *InventoryMovementMutation
}

// Where appends a list predicates to the InventoryMovementUpdate builder.
func (imu *InventoryMovementUpdate) Where(ps ...predicate.InventoryMovement) *InventoryMovementUpdate {
	imu.mutation.Where(ps...)
	return imu
}

// SetType sets the "type" field.
func (imu *InventoryMovementUpdate) SetType(i inventorymovement.Type) *InventoryMovementUpdate {
	imu.mutation.SetType(i)
	return imu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableType(i *inventorymovement.Type) *InventoryMovementUpdate {
	if i != nil {
		imu.SetType(*i)
	}
	return imu
}

// SetQuantity sets the "quantity" field.
func (imu *InventoryMovementUpdate) SetQuantity(i int) *InventoryMovementUpdate {
	imu.mutation.ResetQuantity()
	imu.mutation.SetQuantity(i)
	return imu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableQuantity(i *int) *InventoryMovementUpdate {
	if i != nil {
		imu.SetQuantity(*i)
	}
	return imu
}

// AddQuantity adds i to the "quantity" field.
func (imu *InventoryMovementUpdate) AddQuantity(i int) *InventoryMovementUpdate {
	imu.mutation.AddQuantity(i)
	return imu
}

// SetReferenceID sets the "reference_id" field.
func (imu *InventoryMovementUpdate) SetReferenceID(s string) *InventoryMovementUpdate {
	imu.mutation.SetReferenceID(s)
	return imu
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableReferenceID(s *string) *InventoryMovementUpdate {
	if s != nil {
		imu.SetReferenceID(*s)
	}
	return imu
}

// ClearReferenceID clears the value of the "reference_id" field.
func (imu *InventoryMovementUpdate) ClearReferenceID() *InventoryMovementUpdate {
	imu.mutation.ClearReferenceID()
	return imu
}

// SetNotes sets the "notes" field.
func (imu *InventoryMovementUpdate) SetNotes(s string) *InventoryMovementUpdate {
	imu.mutation.SetNotes(s)
	return imu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableNotes(s *string) *InventoryMovementUpdate {
	if s != nil {
		imu.SetNotes(*s)
	}
	return imu
}

// ClearNotes clears the value of the "notes" field.
func (imu *InventoryMovementUpdate) ClearNotes() *InventoryMovementUpdate {
	imu.mutation.ClearNotes()
	return imu
}

// SetPerformedBy sets the "performed_by" field.
func (imu *InventoryMovementUpdate) SetPerformedBy(s string) *InventoryMovementUpdate {
	imu.mutation.SetPerformedBy(s)
	return imu
}

// SetNillablePerformedBy sets the "performed_by" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillablePerformedBy(s *string) *InventoryMovementUpdate {
	if s != nil {
		imu.SetPerformedBy(*s)
	}
	return imu
}

// ClearPerformedBy clears the value of the "performed_by" field.
func (imu *InventoryMovementUpdate) ClearPerformedBy() *InventoryMovementUpdate {
	imu.mutation.ClearPerformedBy()
	return imu
}

// SetMovementDate sets the "movement_date" field.
func (imu *InventoryMovementUpdate) SetMovementDate(t time.Time) *InventoryMovementUpdate {
	imu.mutation.SetMovementDate(t)
	return imu
}

// SetNillableMovementDate sets the "movement_date" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableMovementDate(t *time.Time) *InventoryMovementUpdate {
	if t != nil {
		imu.SetMovementDate(*t)
	}
	return imu
}

// SetCreatedAt sets the "created_at" field.
func (imu *InventoryMovementUpdate) SetCreatedAt(t time.Time) *InventoryMovementUpdate {
	imu.mutation.SetCreatedAt(t)
	return imu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableCreatedAt(t *time.Time) *InventoryMovementUpdate {
	if t != nil {
		imu.SetCreatedAt(*t)
	}
	return imu
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (imu *InventoryMovementUpdate) SetClinicID(id uuid.UUID) *InventoryMovementUpdate {
	imu.mutation.SetClinicID(id)
	return imu
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableClinicID(id *uuid.UUID) *InventoryMovementUpdate {
	if id != nil {
		imu = imu.SetClinicID(*id)
	}
	return imu
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (imu *InventoryMovementUpdate) SetClinic(c *Clinic) *InventoryMovementUpdate {
	return imu.SetClinicID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (imu *InventoryMovementUpdate) SetProductID(id uuid.UUID) *InventoryMovementUpdate {
	imu.mutation.SetProductID(id)
	return imu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (imu *InventoryMovementUpdate) SetNillableProductID(id *uuid.UUID) *InventoryMovementUpdate {
	if id != nil {
		imu = imu.SetProductID(*id)
	}
	return imu
}

// SetProduct sets the "product" edge to the Product entity.
func (imu *InventoryMovementUpdate) SetProduct(p *Product) *InventoryMovementUpdate {
	return imu.SetProductID(p.ID)
}

// Mutation returns the InventoryMovementMutation object of the builder.
func (imu *InventoryMovementUpdate) Mutation() *InventoryMovementMutation {
	return imu.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (imu *InventoryMovementUpdate) ClearClinic() *InventoryMovementUpdate {
	imu.mutation.ClearClinic()
	return imu
}

// ClearProduct clears the "product" edge to the Product entity.
func (imu *InventoryMovementUpdate) ClearProduct() *InventoryMovementUpdate {
	imu.mutation.ClearProduct()
	return imu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (imu *InventoryMovementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, imu.sqlSave, imu.mutation, imu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imu *InventoryMovementUpdate) SaveX(ctx context.Context) int {
	affected, err := imu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (imu *InventoryMovementUpdate) Exec(ctx context.Context) error {
	_, err := imu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imu *InventoryMovementUpdate) ExecX(ctx context.Context) {
	if err := imu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imu *InventoryMovementUpdate) check() error {
	if v, ok := imu.mutation.GetType(); ok {
		if err := inventorymovement.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "InventoryMovement.type": %w`, err)}
		}
	}
	return nil
}

func (imu *InventoryMovementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := imu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventorymovement.Table, inventorymovement.Columns, sqlgraph.NewFieldSpec(inventorymovement.FieldID, field.TypeUUID))
	if ps := imu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imu.mutation.GetType(); ok {
		_spec.SetField(inventorymovement.FieldType, field.TypeEnum, value)
	}
	if value, ok := imu.mutation.Quantity(); ok {
		_spec.SetField(inventorymovement.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := imu.mutation.AddedQuantity(); ok {
		_spec.AddField(inventorymovement.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := imu.mutation.ReferenceID(); ok {
		_spec.SetField(inventorymovement.FieldReferenceID, field.TypeString, value)
	}
	if imu.mutation.ReferenceIDCleared() {
		_spec.ClearField(inventorymovement.FieldReferenceID, field.TypeString)
	}
	if value, ok := imu.mutation.Notes(); ok {
		_spec.SetField(inventorymovement.FieldNotes, field.TypeString, value)
	}
	if imu.mutation.NotesCleared() {
		_spec.ClearField(inventorymovement.FieldNotes, field.TypeString)
	}
	if value, ok := imu.mutation.PerformedBy(); ok {
		_spec.SetField(inventorymovement.FieldPerformedBy, field.TypeString, value)
	}
	if imu.mutation.PerformedByCleared() {
		_spec.ClearField(inventorymovement.FieldPerformedBy, field.TypeString)
	}
	if value, ok := imu.mutation.MovementDate(); ok {
		_spec.SetField(inventorymovement.FieldMovementDate, field.TypeTime, value)
	}
	if value, ok := imu.mutation.CreatedAt(); ok {
		_spec.SetField(inventorymovement.FieldCreatedAt, field.TypeTime, value)
	}
	if imu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ClinicTable,
			Columns: []string{inventorymovement.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ClinicTable,
			Columns: []string{inventorymovement.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if imu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ProductTable,
			Columns: []string{inventorymovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ProductTable,
			Columns: []string{inventorymovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, imu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventorymovement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	imu.mutation.done = true
	return n, nil
}

// InventoryMovementUpdateOne is the builder for updating a single InventoryMovement entity.
type InventoryMovementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InventoryMovementMutation
}

// SetType sets the "type" field.
func (imuo *InventoryMovementUpdateOne) SetType(i inventorymovement.Type) *InventoryMovementUpdateOne {
	imuo.mutation.SetType(i)
	return imuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableType(i *inventorymovement.Type) *InventoryMovementUpdateOne {
	if i != nil {
		imuo.SetType(*i)
	}
	return imuo
}

// SetQuantity sets the "quantity" field.
func (imuo *InventoryMovementUpdateOne) SetQuantity(i int) *InventoryMovementUpdateOne {
	imuo.mutation.ResetQuantity()
	imuo.mutation.SetQuantity(i)
	return imuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableQuantity(i *int) *InventoryMovementUpdateOne {
	if i != nil {
		imuo.SetQuantity(*i)
	}
	return imuo
}

// AddQuantity adds i to the "quantity" field.
func (imuo *InventoryMovementUpdateOne) AddQuantity(i int) *InventoryMovementUpdateOne {
	imuo.mutation.AddQuantity(i)
	return imuo
}

// SetReferenceID sets the "reference_id" field.
func (imuo *InventoryMovementUpdateOne) SetReferenceID(s string) *InventoryMovementUpdateOne {
	imuo.mutation.SetReferenceID(s)
	return imuo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableReferenceID(s *string) *InventoryMovementUpdateOne {
	if s != nil {
		imuo.SetReferenceID(*s)
	}
	return imuo
}

// ClearReferenceID clears the value of the "reference_id" field.
func (imuo *InventoryMovementUpdateOne) ClearReferenceID() *InventoryMovementUpdateOne {
	imuo.mutation.ClearReferenceID()
	return imuo
}

// SetNotes sets the "notes" field.
func (imuo *InventoryMovementUpdateOne) SetNotes(s string) *InventoryMovementUpdateOne {
	imuo.mutation.SetNotes(s)
	return imuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableNotes(s *string) *InventoryMovementUpdateOne {
	if s != nil {
		imuo.SetNotes(*s)
	}
	return imuo
}

// ClearNotes clears the value of the "notes" field.
func (imuo *InventoryMovementUpdateOne) ClearNotes() *InventoryMovementUpdateOne {
	imuo.mutation.ClearNotes()
	return imuo
}

// SetPerformedBy sets the "performed_by" field.
func (imuo *InventoryMovementUpdateOne) SetPerformedBy(s string) *InventoryMovementUpdateOne {
	imuo.mutation.SetPerformedBy(s)
	return imuo
}

// SetNillablePerformedBy sets the "performed_by" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillablePerformedBy(s *string) *InventoryMovementUpdateOne {
	if s != nil {
		imuo.SetPerformedBy(*s)
	}
	return imuo
}

// ClearPerformedBy clears the value of the "performed_by" field.
func (imuo *InventoryMovementUpdateOne) ClearPerformedBy() *InventoryMovementUpdateOne {
	imuo.mutation.ClearPerformedBy()
	return imuo
}

// SetMovementDate sets the "movement_date" field.
func (imuo *InventoryMovementUpdateOne) SetMovementDate(t time.Time) *InventoryMovementUpdateOne {
	imuo.mutation.SetMovementDate(t)
	return imuo
}

// SetNillableMovementDate sets the "movement_date" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableMovementDate(t *time.Time) *InventoryMovementUpdateOne {
	if t != nil {
		imuo.SetMovementDate(*t)
	}
	return imuo
}

// SetCreatedAt sets the "created_at" field.
func (imuo *InventoryMovementUpdateOne) SetCreatedAt(t time.Time) *InventoryMovementUpdateOne {
	imuo.mutation.SetCreatedAt(t)
	return imuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableCreatedAt(t *time.Time) *InventoryMovementUpdateOne {
	if t != nil {
		imuo.SetCreatedAt(*t)
	}
	return imuo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (imuo *InventoryMovementUpdateOne) SetClinicID(id uuid.UUID) *InventoryMovementUpdateOne {
	imuo.mutation.SetClinicID(id)
	return imuo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableClinicID(id *uuid.UUID) *InventoryMovementUpdateOne {
	if id != nil {
		imuo = imuo.SetClinicID(*id)
	}
	return imuo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (imuo *InventoryMovementUpdateOne) SetClinic(c *Clinic) *InventoryMovementUpdateOne {
	return imuo.SetClinicID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (imuo *InventoryMovementUpdateOne) SetProductID(id uuid.UUID) *InventoryMovementUpdateOne {
	imuo.mutation.SetProductID(id)
	return imuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (imuo *InventoryMovementUpdateOne) SetNillableProductID(id *uuid.UUID) *InventoryMovementUpdateOne {
	if id != nil {
		imuo = imuo.SetProductID(*id)
	}
	return imuo
}

// SetProduct sets the "product" edge to the Product entity.
func (imuo *InventoryMovementUpdateOne) SetProduct(p *Product) *InventoryMovementUpdateOne {
	return imuo.SetProductID(p.ID)
}

// Mutation returns the InventoryMovementMutation object of the builder.
func (imuo *InventoryMovementUpdateOne) Mutation() *InventoryMovementMutation {
	return imuo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (imuo *InventoryMovementUpdateOne) ClearClinic() *InventoryMovementUpdateOne {
	imuo.mutation.ClearClinic()
	return imuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (imuo *InventoryMovementUpdateOne) ClearProduct() *InventoryMovementUpdateOne {
	imuo.mutation.ClearProduct()
	return imuo
}

// Where appends a list predicates to the InventoryMovementUpdate builder.
func (imuo *InventoryMovementUpdateOne) Where(ps ...predicate.InventoryMovement) *InventoryMovementUpdateOne {
	imuo.mutation.Where(ps...)
	return imuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (imuo *InventoryMovementUpdateOne) Select(field string, fields ...string) *InventoryMovementUpdateOne {
	imuo.fields = append([]string{field}, fields...)
	return imuo
}

// Save executes the query and returns the updated InventoryMovement entity.
func (imuo *InventoryMovementUpdateOne) Save(ctx context.Context) (*InventoryMovement, error) {
	return withHooks(ctx, imuo.sqlSave, imuo.mutation, imuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imuo *InventoryMovementUpdateOne) SaveX(ctx context.Context) *InventoryMovement {
	node, err := imuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (imuo *InventoryMovementUpdateOne) Exec(ctx context.Context) error {
	_, err := imuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imuo *InventoryMovementUpdateOne) ExecX(ctx context.Context) {
	if err := imuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imuo *InventoryMovementUpdateOne) check() error {
	if v, ok := imuo.mutation.GetType(); ok {
		if err := inventorymovement.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "InventoryMovement.type": %w`, err)}
		}
	}
	return nil
}

func (imuo *InventoryMovementUpdateOne) sqlSave(ctx context.Context) (_node *InventoryMovement, err error) {
	if err := imuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventorymovement.Table, inventorymovement.Columns, sqlgraph.NewFieldSpec(inventorymovement.FieldID, field.TypeUUID))
	id, ok := imuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "InventoryMovement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := imuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventorymovement.FieldID)
		for _, f := range fields {
			if !inventorymovement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != inventorymovement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := imuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imuo.mutation.GetType(); ok {
		_spec.SetField(inventorymovement.FieldType, field.TypeEnum, value)
	}
	if value, ok := imuo.mutation.Quantity(); ok {
		_spec.SetField(inventorymovement.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := imuo.mutation.AddedQuantity(); ok {
		_spec.AddField(inventorymovement.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := imuo.mutation.ReferenceID(); ok {
		_spec.SetField(inventorymovement.FieldReferenceID, field.TypeString, value)
	}
	if imuo.mutation.ReferenceIDCleared() {
		_spec.ClearField(inventorymovement.FieldReferenceID, field.TypeString)
	}
	if value, ok := imuo.mutation.Notes(); ok {
		_spec.SetField(inventorymovement.FieldNotes, field.TypeString, value)
	}
	if imuo.mutation.NotesCleared() {
		_spec.ClearField(inventorymovement.FieldNotes, field.TypeString)
	}
	if value, ok := imuo.mutation.PerformedBy(); ok {
		_spec.SetField(inventorymovement.FieldPerformedBy, field.TypeString, value)
	}
	if imuo.mutation.PerformedByCleared() {
		_spec.ClearField(inventorymovement.FieldPerformedBy, field.TypeString)
	}
	if value, ok := imuo.mutation.MovementDate(); ok {
		_spec.SetField(inventorymovement.FieldMovementDate, field.TypeTime, value)
	}
	if value, ok := imuo.mutation.CreatedAt(); ok {
		_spec.SetField(inventorymovement.FieldCreatedAt, field.TypeTime, value)
	}
	if imuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ClinicTable,
			Columns: []string{inventorymovement.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ClinicTable,
			Columns: []string{inventorymovement.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if imuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ProductTable,
			Columns: []string{inventorymovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventorymovement.ProductTable,
			Columns: []string{inventorymovement.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InventoryMovement{config: imuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, imuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventorymovement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	imuo.mutation.done = true
	return _node, nil
}
