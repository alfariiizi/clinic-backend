// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/billingrecord"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// BillingRecordUpdate is the builder for updating BillingRecord entities.
type BillingRecordUpdate struct {
	config
	hooks    []Hook
	mutation *BillingRecordMutation
}

// Where appends a list predicates to the BillingRecordUpdate builder.
func (bru *BillingRecordUpdate) Where(ps ...predicate.BillingRecord) *BillingRecordUpdate {
	bru.mutation.Where(ps...)
	return bru
}

// SetInvoiceNumber sets the "invoice_number" field.
func (bru *BillingRecordUpdate) SetInvoiceNumber(s string) *BillingRecordUpdate {
	bru.mutation.SetInvoiceNumber(s)
	return bru
}

// SetNillableInvoiceNumber sets the "invoice_number" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableInvoiceNumber(s *string) *BillingRecordUpdate {
	if s != nil {
		bru.SetInvoiceNumber(*s)
	}
	return bru
}

// SetAmount sets the "amount" field.
func (bru *BillingRecordUpdate) SetAmount(f float64) *BillingRecordUpdate {
	bru.mutation.ResetAmount()
	bru.mutation.SetAmount(f)
	return bru
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableAmount(f *float64) *BillingRecordUpdate {
	if f != nil {
		bru.SetAmount(*f)
	}
	return bru
}

// AddAmount adds f to the "amount" field.
func (bru *BillingRecordUpdate) AddAmount(f float64) *BillingRecordUpdate {
	bru.mutation.AddAmount(f)
	return bru
}

// SetTaxAmount sets the "tax_amount" field.
func (bru *BillingRecordUpdate) SetTaxAmount(f float64) *BillingRecordUpdate {
	bru.mutation.ResetTaxAmount()
	bru.mutation.SetTaxAmount(f)
	return bru
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableTaxAmount(f *float64) *BillingRecordUpdate {
	if f != nil {
		bru.SetTaxAmount(*f)
	}
	return bru
}

// AddTaxAmount adds f to the "tax_amount" field.
func (bru *BillingRecordUpdate) AddTaxAmount(f float64) *BillingRecordUpdate {
	bru.mutation.AddTaxAmount(f)
	return bru
}

// SetDiscountAmount sets the "discount_amount" field.
func (bru *BillingRecordUpdate) SetDiscountAmount(f float64) *BillingRecordUpdate {
	bru.mutation.ResetDiscountAmount()
	bru.mutation.SetDiscountAmount(f)
	return bru
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableDiscountAmount(f *float64) *BillingRecordUpdate {
	if f != nil {
		bru.SetDiscountAmount(*f)
	}
	return bru
}

// AddDiscountAmount adds f to the "discount_amount" field.
func (bru *BillingRecordUpdate) AddDiscountAmount(f float64) *BillingRecordUpdate {
	bru.mutation.AddDiscountAmount(f)
	return bru
}

// SetTotalAmount sets the "total_amount" field.
func (bru *BillingRecordUpdate) SetTotalAmount(f float64) *BillingRecordUpdate {
	bru.mutation.ResetTotalAmount()
	bru.mutation.SetTotalAmount(f)
	return bru
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableTotalAmount(f *float64) *BillingRecordUpdate {
	if f != nil {
		bru.SetTotalAmount(*f)
	}
	return bru
}

// AddTotalAmount adds f to the "total_amount" field.
func (bru *BillingRecordUpdate) AddTotalAmount(f float64) *BillingRecordUpdate {
	bru.mutation.AddTotalAmount(f)
	return bru
}

// SetCurrency sets the "currency" field.
func (bru *BillingRecordUpdate) SetCurrency(s string) *BillingRecordUpdate {
	bru.mutation.SetCurrency(s)
	return bru
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableCurrency(s *string) *BillingRecordUpdate {
	if s != nil {
		bru.SetCurrency(*s)
	}
	return bru
}

// SetPaymentMethod sets the "payment_method" field.
func (bru *BillingRecordUpdate) SetPaymentMethod(bm billingrecord.PaymentMethod) *BillingRecordUpdate {
	bru.mutation.SetPaymentMethod(bm)
	return bru
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillablePaymentMethod(bm *billingrecord.PaymentMethod) *BillingRecordUpdate {
	if bm != nil {
		bru.SetPaymentMethod(*bm)
	}
	return bru
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (bru *BillingRecordUpdate) ClearPaymentMethod() *BillingRecordUpdate {
	bru.mutation.ClearPaymentMethod()
	return bru
}

// SetPaymentStatus sets the "payment_status" field.
func (bru *BillingRecordUpdate) SetPaymentStatus(bs billingrecord.PaymentStatus) *BillingRecordUpdate {
	bru.mutation.SetPaymentStatus(bs)
	return bru
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillablePaymentStatus(bs *billingrecord.PaymentStatus) *BillingRecordUpdate {
	if bs != nil {
		bru.SetPaymentStatus(*bs)
	}
	return bru
}

// SetLineItems sets the "line_items" field.
func (bru *BillingRecordUpdate) SetLineItems(m []map[string]interface{}) *BillingRecordUpdate {
	bru.mutation.SetLineItems(m)
	return bru
}

// AppendLineItems appends m to the "line_items" field.
func (bru *BillingRecordUpdate) AppendLineItems(m []map[string]interface{}) *BillingRecordUpdate {
	bru.mutation.AppendLineItems(m)
	return bru
}

// ClearLineItems clears the value of the "line_items" field.
func (bru *BillingRecordUpdate) ClearLineItems() *BillingRecordUpdate {
	bru.mutation.ClearLineItems()
	return bru
}

// SetDueDate sets the "due_date" field.
func (bru *BillingRecordUpdate) SetDueDate(t time.Time) *BillingRecordUpdate {
	bru.mutation.SetDueDate(t)
	return bru
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableDueDate(t *time.Time) *BillingRecordUpdate {
	if t != nil {
		bru.SetDueDate(*t)
	}
	return bru
}

// ClearDueDate clears the value of the "due_date" field.
func (bru *BillingRecordUpdate) ClearDueDate() *BillingRecordUpdate {
	bru.mutation.ClearDueDate()
	return bru
}

// SetPaidAt sets the "paid_at" field.
func (bru *BillingRecordUpdate) SetPaidAt(t time.Time) *BillingRecordUpdate {
	bru.mutation.SetPaidAt(t)
	return bru
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillablePaidAt(t *time.Time) *BillingRecordUpdate {
	if t != nil {
		bru.SetPaidAt(*t)
	}
	return bru
}

// ClearPaidAt clears the value of the "paid_at" field.
func (bru *BillingRecordUpdate) ClearPaidAt() *BillingRecordUpdate {
	bru.mutation.ClearPaidAt()
	return bru
}

// SetNotes sets the "notes" field.
func (bru *BillingRecordUpdate) SetNotes(s string) *BillingRecordUpdate {
	bru.mutation.SetNotes(s)
	return bru
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableNotes(s *string) *BillingRecordUpdate {
	if s != nil {
		bru.SetNotes(*s)
	}
	return bru
}

// ClearNotes clears the value of the "notes" field.
func (bru *BillingRecordUpdate) ClearNotes() *BillingRecordUpdate {
	bru.mutation.ClearNotes()
	return bru
}

// SetCreatedAt sets the "created_at" field.
func (bru *BillingRecordUpdate) SetCreatedAt(t time.Time) *BillingRecordUpdate {
	bru.mutation.SetCreatedAt(t)
	return bru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableCreatedAt(t *time.Time) *BillingRecordUpdate {
	if t != nil {
		bru.SetCreatedAt(*t)
	}
	return bru
}

// SetUpdatedAt sets the "updated_at" field.
func (bru *BillingRecordUpdate) SetUpdatedAt(t time.Time) *BillingRecordUpdate {
	bru.mutation.SetUpdatedAt(t)
	return bru
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (bru *BillingRecordUpdate) SetClinicID(id uuid.UUID) *BillingRecordUpdate {
	bru.mutation.SetClinicID(id)
	return bru
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillableClinicID(id *uuid.UUID) *BillingRecordUpdate {
	if id != nil {
		bru = bru.SetClinicID(*id)
	}
	return bru
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (bru *BillingRecordUpdate) SetClinic(c *Clinic) *BillingRecordUpdate {
	return bru.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (bru *BillingRecordUpdate) SetPatientID(id uuid.UUID) *BillingRecordUpdate {
	bru.mutation.SetPatientID(id)
	return bru
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (bru *BillingRecordUpdate) SetNillablePatientID(id *uuid.UUID) *BillingRecordUpdate {
	if id != nil {
		bru = bru.SetPatientID(*id)
	}
	return bru
}

// SetPatient sets the "patient" edge to the Patient entity.
func (bru *BillingRecordUpdate) SetPatient(p *Patient) *BillingRecordUpdate {
	return bru.SetPatientID(p.ID)
}

// Mutation returns the BillingRecordMutation object of the builder.
func (bru *BillingRecordUpdate) Mutation() *BillingRecordMutation {
	return bru.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (bru *BillingRecordUpdate) ClearClinic() *BillingRecordUpdate {
	bru.mutation.ClearClinic()
	return bru
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (bru *BillingRecordUpdate) ClearPatient() *BillingRecordUpdate {
	bru.mutation.ClearPatient()
	return bru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bru *BillingRecordUpdate) Save(ctx context.Context) (int, error) {
	bru.defaults()
	return withHooks(ctx, bru.sqlSave, bru.mutation, bru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bru *BillingRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := bru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bru *BillingRecordUpdate) Exec(ctx context.Context) error {
	_, err := bru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bru *BillingRecordUpdate) ExecX(ctx context.Context) {
	if err := bru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bru *BillingRecordUpdate) defaults() {
	if _, ok := bru.mutation.UpdatedAt(); !ok {
		v := billingrecord.UpdateDefaultUpdatedAt()
		bru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bru *BillingRecordUpdate) check() error {
	if v, ok := bru.mutation.PaymentMethod(); ok {
		if err := billingrecord.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`db: validator failed for field "BillingRecord.payment_method": %w`, err)}
		}
	}
	if v, ok := bru.mutation.PaymentStatus(); ok {
		if err := billingrecord.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`db: validator failed for field "BillingRecord.payment_status": %w`, err)}
		}
	}
	return nil
}

func (bru *BillingRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingrecord.Table, billingrecord.Columns, sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID))
	if ps := bru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bru.mutation.InvoiceNumber(); ok {
		_spec.SetField(billingrecord.FieldInvoiceNumber, field.TypeString, value)
	}
	if value, ok := bru.mutation.Amount(); ok {
		_spec.SetField(billingrecord.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedAmount(); ok {
		_spec.AddField(billingrecord.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.TaxAmount(); ok {
		_spec.SetField(billingrecord.FieldTaxAmount, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedTaxAmount(); ok {
		_spec.AddField(billingrecord.FieldTaxAmount, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.DiscountAmount(); ok {
		_spec.SetField(billingrecord.FieldDiscountAmount, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedDiscountAmount(); ok {
		_spec.AddField(billingrecord.FieldDiscountAmount, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.TotalAmount(); ok {
		_spec.SetField(billingrecord.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedTotalAmount(); ok {
		_spec.AddField(billingrecord.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.Currency(); ok {
		_spec.SetField(billingrecord.FieldCurrency, field.TypeString, value)
	}
	if value, ok := bru.mutation.PaymentMethod(); ok {
		_spec.SetField(billingrecord.FieldPaymentMethod, field.TypeEnum, value)
	}
	if bru.mutation.PaymentMethodCleared() {
		_spec.ClearField(billingrecord.FieldPaymentMethod, field.TypeEnum)
	}
	if value, ok := bru.mutation.PaymentStatus(); ok {
		_spec.SetField(billingrecord.FieldPaymentStatus, field.TypeEnum, value)
	}
	if value, ok := bru.mutation.LineItems(); ok {
		_spec.SetField(billingrecord.FieldLineItems, field.TypeJSON, value)
	}
	if value, ok := bru.mutation.AppendedLineItems(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, billingrecord.FieldLineItems, value)
		})
	}
	if bru.mutation.LineItemsCleared() {
		_spec.ClearField(billingrecord.FieldLineItems, field.TypeJSON)
	}
	if value, ok := bru.mutation.DueDate(); ok {
		_spec.SetField(billingrecord.FieldDueDate, field.TypeTime, value)
	}
	if bru.mutation.DueDateCleared() {
		_spec.ClearField(billingrecord.FieldDueDate, field.TypeTime)
	}
	if value, ok := bru.mutation.PaidAt(); ok {
		_spec.SetField(billingrecord.FieldPaidAt, field.TypeTime, value)
	}
	if bru.mutation.PaidAtCleared() {
		_spec.ClearField(billingrecord.FieldPaidAt, field.TypeTime)
	}
	if value, ok := bru.mutation.Notes(); ok {
		_spec.SetField(billingrecord.FieldNotes, field.TypeString, value)
	}
	if bru.mutation.NotesCleared() {
		_spec.ClearField(billingrecord.FieldNotes, field.TypeString)
	}
	if value, ok := bru.mutation.CreatedAt(); ok {
		_spec.SetField(billingrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bru.mutation.UpdatedAt(); ok {
		_spec.SetField(billingrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if bru.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.ClinicTable,
			Columns: []string{billingrecord.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.ClinicTable,
			Columns: []string{billingrecord.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bru.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.PatientTable,
			Columns: []string{billingrecord.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.PatientTable,
			Columns: []string{billingrecord.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bru.mutation.done = true
	return n, nil
}

// BillingRecordUpdateOne is the builder for updating a single BillingRecord entity.
type BillingRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingRecordMutation
}

// SetInvoiceNumber sets the "invoice_number" field.
func (bruo *BillingRecordUpdateOne) SetInvoiceNumber(s string) *BillingRecordUpdateOne {
	bruo.mutation.SetInvoiceNumber(s)
	return bruo
}

// SetNillableInvoiceNumber sets the "invoice_number" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableInvoiceNumber(s *string) *BillingRecordUpdateOne {
	if s != nil {
		bruo.SetInvoiceNumber(*s)
	}
	return bruo
}

// SetAmount sets the "amount" field.
func (bruo *BillingRecordUpdateOne) SetAmount(f float64) *BillingRecordUpdateOne {
	bruo.mutation.ResetAmount()
	bruo.mutation.SetAmount(f)
	return bruo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableAmount(f *float64) *BillingRecordUpdateOne {
	if f != nil {
		bruo.SetAmount(*f)
	}
	return bruo
}

// AddAmount adds f to the "amount" field.
func (bruo *BillingRecordUpdateOne) AddAmount(f float64) *BillingRecordUpdateOne {
	bruo.mutation.AddAmount(f)
	return bruo
}

// SetTaxAmount sets the "tax_amount" field.
func (bruo *BillingRecordUpdateOne) SetTaxAmount(f float64) *BillingRecordUpdateOne {
	bruo.mutation.ResetTaxAmount()
	bruo.mutation.SetTaxAmount(f)
	return bruo
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableTaxAmount(f *float64) *BillingRecordUpdateOne {
	if f != nil {
		bruo.SetTaxAmount(*f)
	}
	return bruo
}

// AddTaxAmount adds f to the "tax_amount" field.
func (bruo *BillingRecordUpdateOne) AddTaxAmount(f float64) *BillingRecordUpdateOne {
	bruo.mutation.AddTaxAmount(f)
	return bruo
}

// SetDiscountAmount sets the "discount_amount" field.
func (bruo *BillingRecordUpdateOne) SetDiscountAmount(f float64) *BillingRecordUpdateOne {
	bruo.mutation.ResetDiscountAmount()
	bruo.mutation.SetDiscountAmount(f)
	return bruo
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableDiscountAmount(f *float64) *BillingRecordUpdateOne {
	if f != nil {
		bruo.SetDiscountAmount(*f)
	}
	return bruo
}

// AddDiscountAmount adds f to the "discount_amount" field.
func (bruo *BillingRecordUpdateOne) AddDiscountAmount(f float64) *BillingRecordUpdateOne {
	bruo.mutation.AddDiscountAmount(f)
	return bruo
}

// SetTotalAmount sets the "total_amount" field.
func (bruo *BillingRecordUpdateOne) SetTotalAmount(f float64) *BillingRecordUpdateOne {
	bruo.mutation.ResetTotalAmount()
	bruo.mutation.SetTotalAmount(f)
	return bruo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableTotalAmount(f *float64) *BillingRecordUpdateOne {
	if f != nil {
		bruo.SetTotalAmount(*f)
	}
	return bruo
}

// AddTotalAmount adds f to the "total_amount" field.
func (bruo *BillingRecordUpdateOne) AddTotalAmount(f float64) *BillingRecordUpdateOne {
	bruo.mutation.AddTotalAmount(f)
	return bruo
}

// SetCurrency sets the "currency" field.
func (bruo *BillingRecordUpdateOne) SetCurrency(s string) *BillingRecordUpdateOne {
	bruo.mutation.SetCurrency(s)
	return bruo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableCurrency(s *string) *BillingRecordUpdateOne {
	if s != nil {
		bruo.SetCurrency(*s)
	}
	return bruo
}

// SetPaymentMethod sets the "payment_method" field.
func (bruo *BillingRecordUpdateOne) SetPaymentMethod(bm billingrecord.PaymentMethod) *BillingRecordUpdateOne {
	bruo.mutation.SetPaymentMethod(bm)
	return bruo
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillablePaymentMethod(bm *billingrecord.PaymentMethod) *BillingRecordUpdateOne {
	if bm != nil {
		bruo.SetPaymentMethod(*bm)
	}
	return bruo
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (bruo *BillingRecordUpdateOne) ClearPaymentMethod() *BillingRecordUpdateOne {
	bruo.mutation.ClearPaymentMethod()
	return bruo
}

// SetPaymentStatus sets the "payment_status" field.
func (bruo *BillingRecordUpdateOne) SetPaymentStatus(bs billingrecord.PaymentStatus) *BillingRecordUpdateOne {
	bruo.mutation.SetPaymentStatus(bs)
	return bruo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillablePaymentStatus(bs *billingrecord.PaymentStatus) *BillingRecordUpdateOne {
	if bs != nil {
		bruo.SetPaymentStatus(*bs)
	}
	return bruo
}

// SetLineItems sets the "line_items" field.
func (bruo *BillingRecordUpdateOne) SetLineItems(m []map[string]interface{}) *BillingRecordUpdateOne {
	bruo.mutation.SetLineItems(m)
	return bruo
}

// AppendLineItems appends m to the "line_items" field.
func (bruo *BillingRecordUpdateOne) AppendLineItems(m []map[string]interface{}) *BillingRecordUpdateOne {
	bruo.mutation.AppendLineItems(m)
	return bruo
}

// ClearLineItems clears the value of the "line_items" field.
func (bruo *BillingRecordUpdateOne) ClearLineItems() *BillingRecordUpdateOne {
	bruo.mutation.ClearLineItems()
	return bruo
}

// SetDueDate sets the "due_date" field.
func (bruo *BillingRecordUpdateOne) SetDueDate(t time.Time) *BillingRecordUpdateOne {
	bruo.mutation.SetDueDate(t)
	return bruo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableDueDate(t *time.Time) *BillingRecordUpdateOne {
	if t != nil {
		bruo.SetDueDate(*t)
	}
	return bruo
}

// ClearDueDate clears the value of the "due_date" field.
func (bruo *BillingRecordUpdateOne) ClearDueDate() *BillingRecordUpdateOne {
	bruo.mutation.ClearDueDate()
	return bruo
}

// SetPaidAt sets the "paid_at" field.
func (bruo *BillingRecordUpdateOne) SetPaidAt(t time.Time) *BillingRecordUpdateOne {
	bruo.mutation.SetPaidAt(t)
	return bruo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillablePaidAt(t *time.Time) *BillingRecordUpdateOne {
	if t != nil {
		bruo.SetPaidAt(*t)
	}
	return bruo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (bruo *BillingRecordUpdateOne) ClearPaidAt() *BillingRecordUpdateOne {
	bruo.mutation.ClearPaidAt()
	return bruo
}

// SetNotes sets the "notes" field.
func (bruo *BillingRecordUpdateOne) SetNotes(s string) *BillingRecordUpdateOne {
	bruo.mutation.SetNotes(s)
	return bruo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableNotes(s *string) *BillingRecordUpdateOne {
	if s != nil {
		bruo.SetNotes(*s)
	}
	return bruo
}

// ClearNotes clears the value of the "notes" field.
func (bruo *BillingRecordUpdateOne) ClearNotes() *BillingRecordUpdateOne {
	bruo.mutation.ClearNotes()
	return bruo
}

// SetCreatedAt sets the "created_at" field.
func (bruo *BillingRecordUpdateOne) SetCreatedAt(t time.Time) *BillingRecordUpdateOne {
	bruo.mutation.SetCreatedAt(t)
	return bruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableCreatedAt(t *time.Time) *BillingRecordUpdateOne {
	if t != nil {
		bruo.SetCreatedAt(*t)
	}
	return bruo
}

// SetUpdatedAt sets the "updated_at" field.
func (bruo *BillingRecordUpdateOne) SetUpdatedAt(t time.Time) *BillingRecordUpdateOne {
	bruo.mutation.SetUpdatedAt(t)
	return bruo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (bruo *BillingRecordUpdateOne) SetClinicID(id uuid.UUID) *BillingRecordUpdateOne {
	bruo.mutation.SetClinicID(id)
	return bruo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillableClinicID(id *uuid.UUID) *BillingRecordUpdateOne {
	if id != nil {
		bruo = bruo.SetClinicID(*id)
	}
	return bruo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (bruo *BillingRecordUpdateOne) SetClinic(c *Clinic) *BillingRecordUpdateOne {
	return bruo.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (bruo *BillingRecordUpdateOne) SetPatientID(id uuid.UUID) *BillingRecordUpdateOne {
	bruo.mutation.SetPatientID(id)
	return bruo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (bruo *BillingRecordUpdateOne) SetNillablePatientID(id *uuid.UUID) *BillingRecordUpdateOne {
	if id != nil {
		bruo = bruo.SetPatientID(*id)
	}
	return bruo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (bruo *BillingRecordUpdateOne) SetPatient(p *Patient) *BillingRecordUpdateOne {
	return bruo.SetPatientID(p.ID)
}

// Mutation returns the BillingRecordMutation object of the builder.
func (bruo *BillingRecordUpdateOne) Mutation() *BillingRecordMutation {
	return bruo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (bruo *BillingRecordUpdateOne) ClearClinic() *BillingRecordUpdateOne {
	bruo.mutation.ClearClinic()
	return bruo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (bruo *BillingRecordUpdateOne) ClearPatient() *BillingRecordUpdateOne {
	bruo.mutation.ClearPatient()
	return bruo
}

// Where appends a list predicates to the BillingRecordUpdate builder.
func (bruo *BillingRecordUpdateOne) Where(ps ...predicate.BillingRecord) *BillingRecordUpdateOne {
	bruo.mutation.Where(ps...)
	return bruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bruo *BillingRecordUpdateOne) Select(field string, fields ...string) *BillingRecordUpdateOne {
	bruo.fields = append([]string{field}, fields...)
	return bruo
}

// Save executes the query and returns the updated BillingRecord entity.
func (bruo *BillingRecordUpdateOne) Save(ctx context.Context) (*BillingRecord, error) {
	bruo.defaults()
	return withHooks(ctx, bruo.sqlSave, bruo.mutation, bruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bruo *BillingRecordUpdateOne) SaveX(ctx context.Context) *BillingRecord {
	node, err := bruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bruo *BillingRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := bruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bruo *BillingRecordUpdateOne) ExecX(ctx context.Context) {
	if err := bruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bruo *BillingRecordUpdateOne) defaults() {
	if _, ok := bruo.mutation.UpdatedAt(); !ok {
		v := billingrecord.UpdateDefaultUpdatedAt()
		bruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bruo *BillingRecordUpdateOne) check() error {
	if v, ok := bruo.mutation.PaymentMethod(); ok {
		if err := billingrecord.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`db: validator failed for field "BillingRecord.payment_method": %w`, err)}
		}
	}
	if v, ok := bruo.mutation.PaymentStatus(); ok {
		if err := billingrecord.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`db: validator failed for field "BillingRecord.payment_status": %w`, err)}
		}
	}
	return nil
}

func (bruo *BillingRecordUpdateOne) sqlSave(ctx context.Context) (_node *BillingRecord, err error) {
	if err := bruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingrecord.Table, billingrecord.Columns, sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID))
	id, ok := bruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingrecord.FieldID)
		for _, f := range fields {
			if !billingrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bruo.mutation.InvoiceNumber(); ok {
		_spec.SetField(billingrecord.FieldInvoiceNumber, field.TypeString, value)
	}
	if value, ok := bruo.mutation.Amount(); ok {
		_spec.SetField(billingrecord.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedAmount(); ok {
		_spec.AddField(billingrecord.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.TaxAmount(); ok {
		_spec.SetField(billingrecord.FieldTaxAmount, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedTaxAmount(); ok {
		_spec.AddField(billingrecord.FieldTaxAmount, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.DiscountAmount(); ok {
		_spec.SetField(billingrecord.FieldDiscountAmount, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedDiscountAmount(); ok {
		_spec.AddField(billingrecord.FieldDiscountAmount, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.TotalAmount(); ok {
		_spec.SetField(billingrecord.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(billingrecord.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.Currency(); ok {
		_spec.SetField(billingrecord.FieldCurrency, field.TypeString, value)
	}
	if value, ok := bruo.mutation.PaymentMethod(); ok {
		_spec.SetField(billingrecord.FieldPaymentMethod, field.TypeEnum, value)
	}
	if bruo.mutation.PaymentMethodCleared() {
		_spec.ClearField(billingrecord.FieldPaymentMethod, field.TypeEnum)
	}
	if value, ok := bruo.mutation.PaymentStatus(); ok {
		_spec.SetField(billingrecord.FieldPaymentStatus, field.TypeEnum, value)
	}
	if value, ok := bruo.mutation.LineItems(); ok {
		_spec.SetField(billingrecord.FieldLineItems, field.TypeJSON, value)
	}
	if value, ok := bruo.mutation.AppendedLineItems(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, billingrecord.FieldLineItems, value)
		})
	}
	if bruo.mutation.LineItemsCleared() {
		_spec.ClearField(billingrecord.FieldLineItems, field.TypeJSON)
	}
	if value, ok := bruo.mutation.DueDate(); ok {
		_spec.SetField(billingrecord.FieldDueDate, field.TypeTime, value)
	}
	if bruo.mutation.DueDateCleared() {
		_spec.ClearField(billingrecord.FieldDueDate, field.TypeTime)
	}
	if value, ok := bruo.mutation.PaidAt(); ok {
		_spec.SetField(billingrecord.FieldPaidAt, field.TypeTime, value)
	}
	if bruo.mutation.PaidAtCleared() {
		_spec.ClearField(billingrecord.FieldPaidAt, field.TypeTime)
	}
	if value, ok := bruo.mutation.Notes(); ok {
		_spec.SetField(billingrecord.FieldNotes, field.TypeString, value)
	}
	if bruo.mutation.NotesCleared() {
		_spec.ClearField(billingrecord.FieldNotes, field.TypeString)
	}
	if value, ok := bruo.mutation.CreatedAt(); ok {
		_spec.SetField(billingrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bruo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if bruo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.ClinicTable,
			Columns: []string{billingrecord.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.ClinicTable,
			Columns: []string{billingrecord.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bruo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.PatientTable,
			Columns: []string{billingrecord.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingrecord.PatientTable,
			Columns: []string{billingrecord.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingRecord{config: bruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bruo.mutation.done = true
	return _node, nil
}
