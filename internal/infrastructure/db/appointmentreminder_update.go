// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointmentreminder"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// AppointmentReminderUpdate is the builder for updating AppointmentReminder entities.
type AppointmentReminderUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentReminderMutation
}

// Where appends a list predicates to the AppointmentReminderUpdate builder.
func (aru *AppointmentReminderUpdate) Where(ps ...predicate.AppointmentReminder) *AppointmentReminderUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetType sets the "type" field.
func (aru *AppointmentReminderUpdate) SetType(a appointmentreminder.Type) *AppointmentReminderUpdate {
	aru.mutation.SetType(a)
	return aru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aru *AppointmentReminderUpdate) SetNillableType(a *appointmentreminder.Type) *AppointmentReminderUpdate {
	if a != nil {
		aru.SetType(*a)
	}
	return aru
}

// SetScheduledTime sets the "scheduled_time" field.
func (aru *AppointmentReminderUpdate) SetScheduledTime(t time.Time) *AppointmentReminderUpdate {
	aru.mutation.SetScheduledTime(t)
	return aru
}

// SetNillableScheduledTime sets the "scheduled_time" field if the given value is not nil.
func (aru *AppointmentReminderUpdate) SetNillableScheduledTime(t *time.Time) *AppointmentReminderUpdate {
	if t != nil {
		aru.SetScheduledTime(*t)
	}
	return aru
}

// SetMessage sets the "message" field.
func (aru *AppointmentReminderUpdate) SetMessage(s string) *AppointmentReminderUpdate {
	aru.mutation.SetMessage(s)
	return aru
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (aru *AppointmentReminderUpdate) SetNillableMessage(s *string) *AppointmentReminderUpdate {
	if s != nil {
		aru.SetMessage(*s)
	}
	return aru
}

// SetStatus sets the "status" field.
func (aru *AppointmentReminderUpdate) SetStatus(a appointmentreminder.Status) *AppointmentReminderUpdate {
	aru.mutation.SetStatus(a)
	return aru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aru *AppointmentReminderUpdate) SetNillableStatus(a *appointmentreminder.Status) *AppointmentReminderUpdate {
	if a != nil {
		aru.SetStatus(*a)
	}
	return aru
}

// SetSentAt sets the "sent_at" field.
func (aru *AppointmentReminderUpdate) SetSentAt(t time.Time) *AppointmentReminderUpdate {
	aru.mutation.SetSentAt(t)
	return aru
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (aru *AppointmentReminderUpdate) SetNillableSentAt(t *time.Time) *AppointmentReminderUpdate {
	if t != nil {
		aru.SetSentAt(*t)
	}
	return aru
}

// ClearSentAt clears the value of the "sent_at" field.
func (aru *AppointmentReminderUpdate) ClearSentAt() *AppointmentReminderUpdate {
	aru.mutation.ClearSentAt()
	return aru
}

// SetCreatedAt sets the "created_at" field.
func (aru *AppointmentReminderUpdate) SetCreatedAt(t time.Time) *AppointmentReminderUpdate {
	aru.mutation.SetCreatedAt(t)
	return aru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aru *AppointmentReminderUpdate) SetNillableCreatedAt(t *time.Time) *AppointmentReminderUpdate {
	if t != nil {
		aru.SetCreatedAt(*t)
	}
	return aru
}

// SetAppointmentID sets the "appointment" edge to the Appointment entity by ID.
func (aru *AppointmentReminderUpdate) SetAppointmentID(id uuid.UUID) *AppointmentReminderUpdate {
	aru.mutation.SetAppointmentID(id)
	return aru
}

// SetNillableAppointmentID sets the "appointment" edge to the Appointment entity by ID if the given value is not nil.
func (aru *AppointmentReminderUpdate) SetNillableAppointmentID(id *uuid.UUID) *AppointmentReminderUpdate {
	if id != nil {
		aru = aru.SetAppointmentID(*id)
	}
	return aru
}

// SetAppointment sets the "appointment" edge to the Appointment entity.
func (aru *AppointmentReminderUpdate) SetAppointment(a *Appointment) *AppointmentReminderUpdate {
	return aru.SetAppointmentID(a.ID)
}

// Mutation returns the AppointmentReminderMutation object of the builder.
func (aru *AppointmentReminderUpdate) Mutation() *AppointmentReminderMutation {
	return aru.mutation
}

// ClearAppointment clears the "appointment" edge to the Appointment entity.
func (aru *AppointmentReminderUpdate) ClearAppointment() *AppointmentReminderUpdate {
	aru.mutation.ClearAppointment()
	return aru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AppointmentReminderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AppointmentReminderUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AppointmentReminderUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AppointmentReminderUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *AppointmentReminderUpdate) check() error {
	if v, ok := aru.mutation.GetType(); ok {
		if err := appointmentreminder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "AppointmentReminder.type": %w`, err)}
		}
	}
	if v, ok := aru.mutation.Status(); ok {
		if err := appointmentreminder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "AppointmentReminder.status": %w`, err)}
		}
	}
	return nil
}

func (aru *AppointmentReminderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appointmentreminder.Table, appointmentreminder.Columns, sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.GetType(); ok {
		_spec.SetField(appointmentreminder.FieldType, field.TypeEnum, value)
	}
	if value, ok := aru.mutation.ScheduledTime(); ok {
		_spec.SetField(appointmentreminder.FieldScheduledTime, field.TypeTime, value)
	}
	if value, ok := aru.mutation.Message(); ok {
		_spec.SetField(appointmentreminder.FieldMessage, field.TypeString, value)
	}
	if value, ok := aru.mutation.Status(); ok {
		_spec.SetField(appointmentreminder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := aru.mutation.SentAt(); ok {
		_spec.SetField(appointmentreminder.FieldSentAt, field.TypeTime, value)
	}
	if aru.mutation.SentAtCleared() {
		_spec.ClearField(appointmentreminder.FieldSentAt, field.TypeTime)
	}
	if value, ok := aru.mutation.CreatedAt(); ok {
		_spec.SetField(appointmentreminder.FieldCreatedAt, field.TypeTime, value)
	}
	if aru.mutation.AppointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentreminder.AppointmentTable,
			Columns: []string{appointmentreminder.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentreminder.AppointmentTable,
			Columns: []string{appointmentreminder.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointmentreminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AppointmentReminderUpdateOne is the builder for updating a single AppointmentReminder entity.
type AppointmentReminderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppointmentReminderMutation
}

// SetType sets the "type" field.
func (aruo *AppointmentReminderUpdateOne) SetType(a appointmentreminder.Type) *AppointmentReminderUpdateOne {
	aruo.mutation.SetType(a)
	return aruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aruo *AppointmentReminderUpdateOne) SetNillableType(a *appointmentreminder.Type) *AppointmentReminderUpdateOne {
	if a != nil {
		aruo.SetType(*a)
	}
	return aruo
}

// SetScheduledTime sets the "scheduled_time" field.
func (aruo *AppointmentReminderUpdateOne) SetScheduledTime(t time.Time) *AppointmentReminderUpdateOne {
	aruo.mutation.SetScheduledTime(t)
	return aruo
}

// SetNillableScheduledTime sets the "scheduled_time" field if the given value is not nil.
func (aruo *AppointmentReminderUpdateOne) SetNillableScheduledTime(t *time.Time) *AppointmentReminderUpdateOne {
	if t != nil {
		aruo.SetScheduledTime(*t)
	}
	return aruo
}

// SetMessage sets the "message" field.
func (aruo *AppointmentReminderUpdateOne) SetMessage(s string) *AppointmentReminderUpdateOne {
	aruo.mutation.SetMessage(s)
	return aruo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (aruo *AppointmentReminderUpdateOne) SetNillableMessage(s *string) *AppointmentReminderUpdateOne {
	if s != nil {
		aruo.SetMessage(*s)
	}
	return aruo
}

// SetStatus sets the "status" field.
func (aruo *AppointmentReminderUpdateOne) SetStatus(a appointmentreminder.Status) *AppointmentReminderUpdateOne {
	aruo.mutation.SetStatus(a)
	return aruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aruo *AppointmentReminderUpdateOne) SetNillableStatus(a *appointmentreminder.Status) *AppointmentReminderUpdateOne {
	if a != nil {
		aruo.SetStatus(*a)
	}
	return aruo
}

// SetSentAt sets the "sent_at" field.
func (aruo *AppointmentReminderUpdateOne) SetSentAt(t time.Time) *AppointmentReminderUpdateOne {
	aruo.mutation.SetSentAt(t)
	return aruo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (aruo *AppointmentReminderUpdateOne) SetNillableSentAt(t *time.Time) *AppointmentReminderUpdateOne {
	if t != nil {
		aruo.SetSentAt(*t)
	}
	return aruo
}

// ClearSentAt clears the value of the "sent_at" field.
func (aruo *AppointmentReminderUpdateOne) ClearSentAt() *AppointmentReminderUpdateOne {
	aruo.mutation.ClearSentAt()
	return aruo
}

// SetCreatedAt sets the "created_at" field.
func (aruo *AppointmentReminderUpdateOne) SetCreatedAt(t time.Time) *AppointmentReminderUpdateOne {
	aruo.mutation.SetCreatedAt(t)
	return aruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aruo *AppointmentReminderUpdateOne) SetNillableCreatedAt(t *time.Time) *AppointmentReminderUpdateOne {
	if t != nil {
		aruo.SetCreatedAt(*t)
	}
	return aruo
}

// SetAppointmentID sets the "appointment" edge to the Appointment entity by ID.
func (aruo *AppointmentReminderUpdateOne) SetAppointmentID(id uuid.UUID) *AppointmentReminderUpdateOne {
	aruo.mutation.SetAppointmentID(id)
	return aruo
}

// SetNillableAppointmentID sets the "appointment" edge to the Appointment entity by ID if the given value is not nil.
func (aruo *AppointmentReminderUpdateOne) SetNillableAppointmentID(id *uuid.UUID) *AppointmentReminderUpdateOne {
	if id != nil {
		aruo = aruo.SetAppointmentID(*id)
	}
	return aruo
}

// SetAppointment sets the "appointment" edge to the Appointment entity.
func (aruo *AppointmentReminderUpdateOne) SetAppointment(a *Appointment) *AppointmentReminderUpdateOne {
	return aruo.SetAppointmentID(a.ID)
}

// Mutation returns the AppointmentReminderMutation object of the builder.
func (aruo *AppointmentReminderUpdateOne) Mutation() *AppointmentReminderMutation {
	return aruo.mutation
}

// ClearAppointment clears the "appointment" edge to the Appointment entity.
func (aruo *AppointmentReminderUpdateOne) ClearAppointment() *AppointmentReminderUpdateOne {
	aruo.mutation.ClearAppointment()
	return aruo
}

// Where appends a list predicates to the AppointmentReminderUpdate builder.
func (aruo *AppointmentReminderUpdateOne) Where(ps ...predicate.AppointmentReminder) *AppointmentReminderUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AppointmentReminderUpdateOne) Select(field string, fields ...string) *AppointmentReminderUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AppointmentReminder entity.
func (aruo *AppointmentReminderUpdateOne) Save(ctx context.Context) (*AppointmentReminder, error) {
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AppointmentReminderUpdateOne) SaveX(ctx context.Context) *AppointmentReminder {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AppointmentReminderUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AppointmentReminderUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *AppointmentReminderUpdateOne) check() error {
	if v, ok := aruo.mutation.GetType(); ok {
		if err := appointmentreminder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "AppointmentReminder.type": %w`, err)}
		}
	}
	if v, ok := aruo.mutation.Status(); ok {
		if err := appointmentreminder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "AppointmentReminder.status": %w`, err)}
		}
	}
	return nil
}

func (aruo *AppointmentReminderUpdateOne) sqlSave(ctx context.Context) (_node *AppointmentReminder, err error) {
	if err := aruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appointmentreminder.Table, appointmentreminder.Columns, sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "AppointmentReminder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appointmentreminder.FieldID)
		for _, f := range fields {
			if !appointmentreminder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != appointmentreminder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.GetType(); ok {
		_spec.SetField(appointmentreminder.FieldType, field.TypeEnum, value)
	}
	if value, ok := aruo.mutation.ScheduledTime(); ok {
		_spec.SetField(appointmentreminder.FieldScheduledTime, field.TypeTime, value)
	}
	if value, ok := aruo.mutation.Message(); ok {
		_spec.SetField(appointmentreminder.FieldMessage, field.TypeString, value)
	}
	if value, ok := aruo.mutation.Status(); ok {
		_spec.SetField(appointmentreminder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := aruo.mutation.SentAt(); ok {
		_spec.SetField(appointmentreminder.FieldSentAt, field.TypeTime, value)
	}
	if aruo.mutation.SentAtCleared() {
		_spec.ClearField(appointmentreminder.FieldSentAt, field.TypeTime)
	}
	if value, ok := aruo.mutation.CreatedAt(); ok {
		_spec.SetField(appointmentreminder.FieldCreatedAt, field.TypeTime, value)
	}
	if aruo.mutation.AppointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentreminder.AppointmentTable,
			Columns: []string{appointmentreminder.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentreminder.AppointmentTable,
			Columns: []string{appointmentreminder.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppointmentReminder{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointmentreminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
