// Code generated by ent, DO NOT EDIT.

package doctorschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the doctorschedule type in the database.
	Label = "doctor_schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldAvailable holds the string denoting the available field in the database.
	FieldAvailable = "available"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeDoctor holds the string denoting the doctor edge name in mutations.
	EdgeDoctor = "doctor"
	// Table holds the table name of the doctorschedule in the database.
	Table = "doctor_schedules"
	// DoctorTable is the table that holds the doctor relation/edge.
	DoctorTable = "doctor_schedules"
	// DoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	DoctorInverseTable = "doctors"
	// DoctorColumn is the table column denoting the doctor relation/edge.
	DoctorColumn = "doctor_schedules"
)

// Columns holds all SQL columns for doctorschedule fields.
var Columns = []string{
	FieldID,
	FieldDate,
	FieldStartTime,
	FieldEndTime,
	FieldAvailable,
	FieldNotes,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "doctor_schedules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"doctor_schedules",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAvailable holds the default value on creation for the "available" field.
	DefaultAvailable bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the DoctorSchedule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByAvailable orders the results by the available field.
func ByAvailable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvailable, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDoctorField orders the results by doctor field.
func ByDoctorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDoctorStep(), sql.OrderByField(field, opts...))
	}
}
func newDoctorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DoctorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
	)
}
