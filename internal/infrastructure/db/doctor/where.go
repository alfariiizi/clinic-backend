// Code generated by ent, DO NOT EDIT.

package doctor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldName, v))
}

// Specialization applies equality check predicate on the "specialization" field. It's identical to SpecializationEQ.
func Specialization(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldSpecialization, v))
}

// LicenseNumber applies equality check predicate on the "license_number" field. It's identical to LicenseNumberEQ.
func LicenseNumber(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldLicenseNumber, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldPhone, v))
}

// Bio applies equality check predicate on the "bio" field. It's identical to BioEQ.
func Bio(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldBio, v))
}

// ConsultationDuration applies equality check predicate on the "consultation_duration" field. It's identical to ConsultationDurationEQ.
func ConsultationDuration(v int) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldConsultationDuration, v))
}

// ConsultationFee applies equality check predicate on the "consultation_fee" field. It's identical to ConsultationFeeEQ.
func ConsultationFee(v float64) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldConsultationFee, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContainsFold(FieldName, v))
}

// SpecializationEQ applies the EQ predicate on the "specialization" field.
func SpecializationEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldSpecialization, v))
}

// SpecializationNEQ applies the NEQ predicate on the "specialization" field.
func SpecializationNEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldSpecialization, v))
}

// SpecializationIn applies the In predicate on the "specialization" field.
func SpecializationIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldSpecialization, vs...))
}

// SpecializationNotIn applies the NotIn predicate on the "specialization" field.
func SpecializationNotIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldSpecialization, vs...))
}

// SpecializationGT applies the GT predicate on the "specialization" field.
func SpecializationGT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldSpecialization, v))
}

// SpecializationGTE applies the GTE predicate on the "specialization" field.
func SpecializationGTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldSpecialization, v))
}

// SpecializationLT applies the LT predicate on the "specialization" field.
func SpecializationLT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldSpecialization, v))
}

// SpecializationLTE applies the LTE predicate on the "specialization" field.
func SpecializationLTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldSpecialization, v))
}

// SpecializationContains applies the Contains predicate on the "specialization" field.
func SpecializationContains(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContains(FieldSpecialization, v))
}

// SpecializationHasPrefix applies the HasPrefix predicate on the "specialization" field.
func SpecializationHasPrefix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasPrefix(FieldSpecialization, v))
}

// SpecializationHasSuffix applies the HasSuffix predicate on the "specialization" field.
func SpecializationHasSuffix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasSuffix(FieldSpecialization, v))
}

// SpecializationEqualFold applies the EqualFold predicate on the "specialization" field.
func SpecializationEqualFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEqualFold(FieldSpecialization, v))
}

// SpecializationContainsFold applies the ContainsFold predicate on the "specialization" field.
func SpecializationContainsFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContainsFold(FieldSpecialization, v))
}

// LicenseNumberEQ applies the EQ predicate on the "license_number" field.
func LicenseNumberEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldLicenseNumber, v))
}

// LicenseNumberNEQ applies the NEQ predicate on the "license_number" field.
func LicenseNumberNEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldLicenseNumber, v))
}

// LicenseNumberIn applies the In predicate on the "license_number" field.
func LicenseNumberIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldLicenseNumber, vs...))
}

// LicenseNumberNotIn applies the NotIn predicate on the "license_number" field.
func LicenseNumberNotIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldLicenseNumber, vs...))
}

// LicenseNumberGT applies the GT predicate on the "license_number" field.
func LicenseNumberGT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldLicenseNumber, v))
}

// LicenseNumberGTE applies the GTE predicate on the "license_number" field.
func LicenseNumberGTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldLicenseNumber, v))
}

// LicenseNumberLT applies the LT predicate on the "license_number" field.
func LicenseNumberLT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldLicenseNumber, v))
}

// LicenseNumberLTE applies the LTE predicate on the "license_number" field.
func LicenseNumberLTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldLicenseNumber, v))
}

// LicenseNumberContains applies the Contains predicate on the "license_number" field.
func LicenseNumberContains(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContains(FieldLicenseNumber, v))
}

// LicenseNumberHasPrefix applies the HasPrefix predicate on the "license_number" field.
func LicenseNumberHasPrefix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasPrefix(FieldLicenseNumber, v))
}

// LicenseNumberHasSuffix applies the HasSuffix predicate on the "license_number" field.
func LicenseNumberHasSuffix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasSuffix(FieldLicenseNumber, v))
}

// LicenseNumberIsNil applies the IsNil predicate on the "license_number" field.
func LicenseNumberIsNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldIsNull(FieldLicenseNumber))
}

// LicenseNumberNotNil applies the NotNil predicate on the "license_number" field.
func LicenseNumberNotNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldNotNull(FieldLicenseNumber))
}

// LicenseNumberEqualFold applies the EqualFold predicate on the "license_number" field.
func LicenseNumberEqualFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEqualFold(FieldLicenseNumber, v))
}

// LicenseNumberContainsFold applies the ContainsFold predicate on the "license_number" field.
func LicenseNumberContainsFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContainsFold(FieldLicenseNumber, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContainsFold(FieldPhone, v))
}

// BioEQ applies the EQ predicate on the "bio" field.
func BioEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldBio, v))
}

// BioNEQ applies the NEQ predicate on the "bio" field.
func BioNEQ(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldBio, v))
}

// BioIn applies the In predicate on the "bio" field.
func BioIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldBio, vs...))
}

// BioNotIn applies the NotIn predicate on the "bio" field.
func BioNotIn(vs ...string) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldBio, vs...))
}

// BioGT applies the GT predicate on the "bio" field.
func BioGT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldBio, v))
}

// BioGTE applies the GTE predicate on the "bio" field.
func BioGTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldBio, v))
}

// BioLT applies the LT predicate on the "bio" field.
func BioLT(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldBio, v))
}

// BioLTE applies the LTE predicate on the "bio" field.
func BioLTE(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldBio, v))
}

// BioContains applies the Contains predicate on the "bio" field.
func BioContains(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContains(FieldBio, v))
}

// BioHasPrefix applies the HasPrefix predicate on the "bio" field.
func BioHasPrefix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasPrefix(FieldBio, v))
}

// BioHasSuffix applies the HasSuffix predicate on the "bio" field.
func BioHasSuffix(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldHasSuffix(FieldBio, v))
}

// BioIsNil applies the IsNil predicate on the "bio" field.
func BioIsNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldIsNull(FieldBio))
}

// BioNotNil applies the NotNil predicate on the "bio" field.
func BioNotNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldNotNull(FieldBio))
}

// BioEqualFold applies the EqualFold predicate on the "bio" field.
func BioEqualFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldEqualFold(FieldBio, v))
}

// BioContainsFold applies the ContainsFold predicate on the "bio" field.
func BioContainsFold(v string) predicate.Doctor {
	return predicate.Doctor(sql.FieldContainsFold(FieldBio, v))
}

// QualificationsIsNil applies the IsNil predicate on the "qualifications" field.
func QualificationsIsNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldIsNull(FieldQualifications))
}

// QualificationsNotNil applies the NotNil predicate on the "qualifications" field.
func QualificationsNotNil() predicate.Doctor {
	return predicate.Doctor(sql.FieldNotNull(FieldQualifications))
}

// ConsultationDurationEQ applies the EQ predicate on the "consultation_duration" field.
func ConsultationDurationEQ(v int) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldConsultationDuration, v))
}

// ConsultationDurationNEQ applies the NEQ predicate on the "consultation_duration" field.
func ConsultationDurationNEQ(v int) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldConsultationDuration, v))
}

// ConsultationDurationIn applies the In predicate on the "consultation_duration" field.
func ConsultationDurationIn(vs ...int) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldConsultationDuration, vs...))
}

// ConsultationDurationNotIn applies the NotIn predicate on the "consultation_duration" field.
func ConsultationDurationNotIn(vs ...int) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldConsultationDuration, vs...))
}

// ConsultationDurationGT applies the GT predicate on the "consultation_duration" field.
func ConsultationDurationGT(v int) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldConsultationDuration, v))
}

// ConsultationDurationGTE applies the GTE predicate on the "consultation_duration" field.
func ConsultationDurationGTE(v int) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldConsultationDuration, v))
}

// ConsultationDurationLT applies the LT predicate on the "consultation_duration" field.
func ConsultationDurationLT(v int) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldConsultationDuration, v))
}

// ConsultationDurationLTE applies the LTE predicate on the "consultation_duration" field.
func ConsultationDurationLTE(v int) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldConsultationDuration, v))
}

// ConsultationFeeEQ applies the EQ predicate on the "consultation_fee" field.
func ConsultationFeeEQ(v float64) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldConsultationFee, v))
}

// ConsultationFeeNEQ applies the NEQ predicate on the "consultation_fee" field.
func ConsultationFeeNEQ(v float64) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldConsultationFee, v))
}

// ConsultationFeeIn applies the In predicate on the "consultation_fee" field.
func ConsultationFeeIn(vs ...float64) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldConsultationFee, vs...))
}

// ConsultationFeeNotIn applies the NotIn predicate on the "consultation_fee" field.
func ConsultationFeeNotIn(vs ...float64) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldConsultationFee, vs...))
}

// ConsultationFeeGT applies the GT predicate on the "consultation_fee" field.
func ConsultationFeeGT(v float64) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldConsultationFee, v))
}

// ConsultationFeeGTE applies the GTE predicate on the "consultation_fee" field.
func ConsultationFeeGTE(v float64) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldConsultationFee, v))
}

// ConsultationFeeLT applies the LT predicate on the "consultation_fee" field.
func ConsultationFeeLT(v float64) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldConsultationFee, v))
}

// ConsultationFeeLTE applies the LTE predicate on the "consultation_fee" field.
func ConsultationFeeLTE(v float64) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldConsultationFee, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Doctor {
	return predicate.Doctor(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.Doctor {
	return predicate.Doctor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.Doctor {
	return predicate.Doctor(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppointments applies the HasEdge predicate on the "appointments" edge.
func HasAppointments() predicate.Doctor {
	return predicate.Doctor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppointmentsTable, AppointmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentsWith applies the HasEdge predicate on the "appointments" edge with a given conditions (other predicates).
func HasAppointmentsWith(preds ...predicate.Appointment) predicate.Doctor {
	return predicate.Doctor(func(s *sql.Selector) {
		step := newAppointmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchedules applies the HasEdge predicate on the "schedules" edge.
func HasSchedules() predicate.Doctor {
	return predicate.Doctor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SchedulesTable, SchedulesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSchedulesWith applies the HasEdge predicate on the "schedules" edge with a given conditions (other predicates).
func HasSchedulesWith(preds ...predicate.DoctorSchedule) predicate.Doctor {
	return predicate.Doctor(func(s *sql.Selector) {
		step := newSchedulesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Doctor) predicate.Doctor {
	return predicate.Doctor(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Doctor) predicate.Doctor {
	return predicate.Doctor(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Doctor) predicate.Doctor {
	return predicate.Doctor(sql.NotPredicates(p))
}
