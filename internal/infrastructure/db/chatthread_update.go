// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatmessage"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ChatThreadUpdate is the builder for updating ChatThread entities.
type ChatThreadUpdate struct {
	config
	hooks    []Hook
	mutation *ChatThreadMutation
}

// Where appends a list predicates to the ChatThreadUpdate builder.
func (ctu *ChatThreadUpdate) Where(ps ...predicate.ChatThread) *ChatThreadUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetWhatsappThreadID sets the "whatsapp_thread_id" field.
func (ctu *ChatThreadUpdate) SetWhatsappThreadID(s string) *ChatThreadUpdate {
	ctu.mutation.SetWhatsappThreadID(s)
	return ctu
}

// SetNillableWhatsappThreadID sets the "whatsapp_thread_id" field if the given value is not nil.
func (ctu *ChatThreadUpdate) SetNillableWhatsappThreadID(s *string) *ChatThreadUpdate {
	if s != nil {
		ctu.SetWhatsappThreadID(*s)
	}
	return ctu
}

// ClearWhatsappThreadID clears the value of the "whatsapp_thread_id" field.
func (ctu *ChatThreadUpdate) ClearWhatsappThreadID() *ChatThreadUpdate {
	ctu.mutation.ClearWhatsappThreadID()
	return ctu
}

// SetStatus sets the "status" field.
func (ctu *ChatThreadUpdate) SetStatus(c chatthread.Status) *ChatThreadUpdate {
	ctu.mutation.SetStatus(c)
	return ctu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ctu *ChatThreadUpdate) SetNillableStatus(c *chatthread.Status) *ChatThreadUpdate {
	if c != nil {
		ctu.SetStatus(*c)
	}
	return ctu
}

// SetContext sets the "context" field.
func (ctu *ChatThreadUpdate) SetContext(m map[string]interface{}) *ChatThreadUpdate {
	ctu.mutation.SetContext(m)
	return ctu
}

// ClearContext clears the value of the "context" field.
func (ctu *ChatThreadUpdate) ClearContext() *ChatThreadUpdate {
	ctu.mutation.ClearContext()
	return ctu
}

// SetLastMessageAt sets the "last_message_at" field.
func (ctu *ChatThreadUpdate) SetLastMessageAt(t time.Time) *ChatThreadUpdate {
	ctu.mutation.SetLastMessageAt(t)
	return ctu
}

// SetNillableLastMessageAt sets the "last_message_at" field if the given value is not nil.
func (ctu *ChatThreadUpdate) SetNillableLastMessageAt(t *time.Time) *ChatThreadUpdate {
	if t != nil {
		ctu.SetLastMessageAt(*t)
	}
	return ctu
}

// ClearLastMessageAt clears the value of the "last_message_at" field.
func (ctu *ChatThreadUpdate) ClearLastMessageAt() *ChatThreadUpdate {
	ctu.mutation.ClearLastMessageAt()
	return ctu
}

// SetCreatedAt sets the "created_at" field.
func (ctu *ChatThreadUpdate) SetCreatedAt(t time.Time) *ChatThreadUpdate {
	ctu.mutation.SetCreatedAt(t)
	return ctu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctu *ChatThreadUpdate) SetNillableCreatedAt(t *time.Time) *ChatThreadUpdate {
	if t != nil {
		ctu.SetCreatedAt(*t)
	}
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *ChatThreadUpdate) SetUpdatedAt(t time.Time) *ChatThreadUpdate {
	ctu.mutation.SetUpdatedAt(t)
	return ctu
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (ctu *ChatThreadUpdate) SetClinicID(id uuid.UUID) *ChatThreadUpdate {
	ctu.mutation.SetClinicID(id)
	return ctu
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (ctu *ChatThreadUpdate) SetNillableClinicID(id *uuid.UUID) *ChatThreadUpdate {
	if id != nil {
		ctu = ctu.SetClinicID(*id)
	}
	return ctu
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ctu *ChatThreadUpdate) SetClinic(c *Clinic) *ChatThreadUpdate {
	return ctu.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (ctu *ChatThreadUpdate) SetPatientID(id uuid.UUID) *ChatThreadUpdate {
	ctu.mutation.SetPatientID(id)
	return ctu
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (ctu *ChatThreadUpdate) SetNillablePatientID(id *uuid.UUID) *ChatThreadUpdate {
	if id != nil {
		ctu = ctu.SetPatientID(*id)
	}
	return ctu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ctu *ChatThreadUpdate) SetPatient(p *Patient) *ChatThreadUpdate {
	return ctu.SetPatientID(p.ID)
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by IDs.
func (ctu *ChatThreadUpdate) AddMessageIDs(ids ...uuid.UUID) *ChatThreadUpdate {
	ctu.mutation.AddMessageIDs(ids...)
	return ctu
}

// AddMessages adds the "messages" edges to the ChatMessage entity.
func (ctu *ChatThreadUpdate) AddMessages(c ...*ChatMessage) *ChatThreadUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.AddMessageIDs(ids...)
}

// Mutation returns the ChatThreadMutation object of the builder.
func (ctu *ChatThreadUpdate) Mutation() *ChatThreadMutation {
	return ctu.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (ctu *ChatThreadUpdate) ClearClinic() *ChatThreadUpdate {
	ctu.mutation.ClearClinic()
	return ctu
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (ctu *ChatThreadUpdate) ClearPatient() *ChatThreadUpdate {
	ctu.mutation.ClearPatient()
	return ctu
}

// ClearMessages clears all "messages" edges to the ChatMessage entity.
func (ctu *ChatThreadUpdate) ClearMessages() *ChatThreadUpdate {
	ctu.mutation.ClearMessages()
	return ctu
}

// RemoveMessageIDs removes the "messages" edge to ChatMessage entities by IDs.
func (ctu *ChatThreadUpdate) RemoveMessageIDs(ids ...uuid.UUID) *ChatThreadUpdate {
	ctu.mutation.RemoveMessageIDs(ids...)
	return ctu
}

// RemoveMessages removes "messages" edges to ChatMessage entities.
func (ctu *ChatThreadUpdate) RemoveMessages(c ...*ChatMessage) *ChatThreadUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *ChatThreadUpdate) Save(ctx context.Context) (int, error) {
	ctu.defaults()
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *ChatThreadUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *ChatThreadUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *ChatThreadUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *ChatThreadUpdate) defaults() {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		v := chatthread.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctu *ChatThreadUpdate) check() error {
	if v, ok := ctu.mutation.Status(); ok {
		if err := chatthread.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "ChatThread.status": %w`, err)}
		}
	}
	return nil
}

func (ctu *ChatThreadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ctu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatthread.Table, chatthread.Columns, sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.WhatsappThreadID(); ok {
		_spec.SetField(chatthread.FieldWhatsappThreadID, field.TypeString, value)
	}
	if ctu.mutation.WhatsappThreadIDCleared() {
		_spec.ClearField(chatthread.FieldWhatsappThreadID, field.TypeString)
	}
	if value, ok := ctu.mutation.Status(); ok {
		_spec.SetField(chatthread.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ctu.mutation.Context(); ok {
		_spec.SetField(chatthread.FieldContext, field.TypeJSON, value)
	}
	if ctu.mutation.ContextCleared() {
		_spec.ClearField(chatthread.FieldContext, field.TypeJSON)
	}
	if value, ok := ctu.mutation.LastMessageAt(); ok {
		_spec.SetField(chatthread.FieldLastMessageAt, field.TypeTime, value)
	}
	if ctu.mutation.LastMessageAtCleared() {
		_spec.ClearField(chatthread.FieldLastMessageAt, field.TypeTime)
	}
	if value, ok := ctu.mutation.CreatedAt(); ok {
		_spec.SetField(chatthread.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.SetField(chatthread.FieldUpdatedAt, field.TypeTime, value)
	}
	if ctu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.ClinicTable,
			Columns: []string{chatthread.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.ClinicTable,
			Columns: []string{chatthread.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.PatientTable,
			Columns: []string{chatthread.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.PatientTable,
			Columns: []string{chatthread.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatthread.MessagesTable,
			Columns: []string{chatthread.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !ctu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatthread.MessagesTable,
			Columns: []string{chatthread.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatthread.MessagesTable,
			Columns: []string{chatthread.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatthread.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// ChatThreadUpdateOne is the builder for updating a single ChatThread entity.
type ChatThreadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatThreadMutation
}

// SetWhatsappThreadID sets the "whatsapp_thread_id" field.
func (ctuo *ChatThreadUpdateOne) SetWhatsappThreadID(s string) *ChatThreadUpdateOne {
	ctuo.mutation.SetWhatsappThreadID(s)
	return ctuo
}

// SetNillableWhatsappThreadID sets the "whatsapp_thread_id" field if the given value is not nil.
func (ctuo *ChatThreadUpdateOne) SetNillableWhatsappThreadID(s *string) *ChatThreadUpdateOne {
	if s != nil {
		ctuo.SetWhatsappThreadID(*s)
	}
	return ctuo
}

// ClearWhatsappThreadID clears the value of the "whatsapp_thread_id" field.
func (ctuo *ChatThreadUpdateOne) ClearWhatsappThreadID() *ChatThreadUpdateOne {
	ctuo.mutation.ClearWhatsappThreadID()
	return ctuo
}

// SetStatus sets the "status" field.
func (ctuo *ChatThreadUpdateOne) SetStatus(c chatthread.Status) *ChatThreadUpdateOne {
	ctuo.mutation.SetStatus(c)
	return ctuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ctuo *ChatThreadUpdateOne) SetNillableStatus(c *chatthread.Status) *ChatThreadUpdateOne {
	if c != nil {
		ctuo.SetStatus(*c)
	}
	return ctuo
}

// SetContext sets the "context" field.
func (ctuo *ChatThreadUpdateOne) SetContext(m map[string]interface{}) *ChatThreadUpdateOne {
	ctuo.mutation.SetContext(m)
	return ctuo
}

// ClearContext clears the value of the "context" field.
func (ctuo *ChatThreadUpdateOne) ClearContext() *ChatThreadUpdateOne {
	ctuo.mutation.ClearContext()
	return ctuo
}

// SetLastMessageAt sets the "last_message_at" field.
func (ctuo *ChatThreadUpdateOne) SetLastMessageAt(t time.Time) *ChatThreadUpdateOne {
	ctuo.mutation.SetLastMessageAt(t)
	return ctuo
}

// SetNillableLastMessageAt sets the "last_message_at" field if the given value is not nil.
func (ctuo *ChatThreadUpdateOne) SetNillableLastMessageAt(t *time.Time) *ChatThreadUpdateOne {
	if t != nil {
		ctuo.SetLastMessageAt(*t)
	}
	return ctuo
}

// ClearLastMessageAt clears the value of the "last_message_at" field.
func (ctuo *ChatThreadUpdateOne) ClearLastMessageAt() *ChatThreadUpdateOne {
	ctuo.mutation.ClearLastMessageAt()
	return ctuo
}

// SetCreatedAt sets the "created_at" field.
func (ctuo *ChatThreadUpdateOne) SetCreatedAt(t time.Time) *ChatThreadUpdateOne {
	ctuo.mutation.SetCreatedAt(t)
	return ctuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctuo *ChatThreadUpdateOne) SetNillableCreatedAt(t *time.Time) *ChatThreadUpdateOne {
	if t != nil {
		ctuo.SetCreatedAt(*t)
	}
	return ctuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *ChatThreadUpdateOne) SetUpdatedAt(t time.Time) *ChatThreadUpdateOne {
	ctuo.mutation.SetUpdatedAt(t)
	return ctuo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (ctuo *ChatThreadUpdateOne) SetClinicID(id uuid.UUID) *ChatThreadUpdateOne {
	ctuo.mutation.SetClinicID(id)
	return ctuo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (ctuo *ChatThreadUpdateOne) SetNillableClinicID(id *uuid.UUID) *ChatThreadUpdateOne {
	if id != nil {
		ctuo = ctuo.SetClinicID(*id)
	}
	return ctuo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ctuo *ChatThreadUpdateOne) SetClinic(c *Clinic) *ChatThreadUpdateOne {
	return ctuo.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (ctuo *ChatThreadUpdateOne) SetPatientID(id uuid.UUID) *ChatThreadUpdateOne {
	ctuo.mutation.SetPatientID(id)
	return ctuo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (ctuo *ChatThreadUpdateOne) SetNillablePatientID(id *uuid.UUID) *ChatThreadUpdateOne {
	if id != nil {
		ctuo = ctuo.SetPatientID(*id)
	}
	return ctuo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ctuo *ChatThreadUpdateOne) SetPatient(p *Patient) *ChatThreadUpdateOne {
	return ctuo.SetPatientID(p.ID)
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by IDs.
func (ctuo *ChatThreadUpdateOne) AddMessageIDs(ids ...uuid.UUID) *ChatThreadUpdateOne {
	ctuo.mutation.AddMessageIDs(ids...)
	return ctuo
}

// AddMessages adds the "messages" edges to the ChatMessage entity.
func (ctuo *ChatThreadUpdateOne) AddMessages(c ...*ChatMessage) *ChatThreadUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.AddMessageIDs(ids...)
}

// Mutation returns the ChatThreadMutation object of the builder.
func (ctuo *ChatThreadUpdateOne) Mutation() *ChatThreadMutation {
	return ctuo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (ctuo *ChatThreadUpdateOne) ClearClinic() *ChatThreadUpdateOne {
	ctuo.mutation.ClearClinic()
	return ctuo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (ctuo *ChatThreadUpdateOne) ClearPatient() *ChatThreadUpdateOne {
	ctuo.mutation.ClearPatient()
	return ctuo
}

// ClearMessages clears all "messages" edges to the ChatMessage entity.
func (ctuo *ChatThreadUpdateOne) ClearMessages() *ChatThreadUpdateOne {
	ctuo.mutation.ClearMessages()
	return ctuo
}

// RemoveMessageIDs removes the "messages" edge to ChatMessage entities by IDs.
func (ctuo *ChatThreadUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *ChatThreadUpdateOne {
	ctuo.mutation.RemoveMessageIDs(ids...)
	return ctuo
}

// RemoveMessages removes "messages" edges to ChatMessage entities.
func (ctuo *ChatThreadUpdateOne) RemoveMessages(c ...*ChatMessage) *ChatThreadUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the ChatThreadUpdate builder.
func (ctuo *ChatThreadUpdateOne) Where(ps ...predicate.ChatThread) *ChatThreadUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *ChatThreadUpdateOne) Select(field string, fields ...string) *ChatThreadUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated ChatThread entity.
func (ctuo *ChatThreadUpdateOne) Save(ctx context.Context) (*ChatThread, error) {
	ctuo.defaults()
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *ChatThreadUpdateOne) SaveX(ctx context.Context) *ChatThread {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *ChatThreadUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *ChatThreadUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *ChatThreadUpdateOne) defaults() {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		v := chatthread.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctuo *ChatThreadUpdateOne) check() error {
	if v, ok := ctuo.mutation.Status(); ok {
		if err := chatthread.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "ChatThread.status": %w`, err)}
		}
	}
	return nil
}

func (ctuo *ChatThreadUpdateOne) sqlSave(ctx context.Context) (_node *ChatThread, err error) {
	if err := ctuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatthread.Table, chatthread.Columns, sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ChatThread.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatthread.FieldID)
		for _, f := range fields {
			if !chatthread.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != chatthread.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.WhatsappThreadID(); ok {
		_spec.SetField(chatthread.FieldWhatsappThreadID, field.TypeString, value)
	}
	if ctuo.mutation.WhatsappThreadIDCleared() {
		_spec.ClearField(chatthread.FieldWhatsappThreadID, field.TypeString)
	}
	if value, ok := ctuo.mutation.Status(); ok {
		_spec.SetField(chatthread.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ctuo.mutation.Context(); ok {
		_spec.SetField(chatthread.FieldContext, field.TypeJSON, value)
	}
	if ctuo.mutation.ContextCleared() {
		_spec.ClearField(chatthread.FieldContext, field.TypeJSON)
	}
	if value, ok := ctuo.mutation.LastMessageAt(); ok {
		_spec.SetField(chatthread.FieldLastMessageAt, field.TypeTime, value)
	}
	if ctuo.mutation.LastMessageAtCleared() {
		_spec.ClearField(chatthread.FieldLastMessageAt, field.TypeTime)
	}
	if value, ok := ctuo.mutation.CreatedAt(); ok {
		_spec.SetField(chatthread.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(chatthread.FieldUpdatedAt, field.TypeTime, value)
	}
	if ctuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.ClinicTable,
			Columns: []string{chatthread.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.ClinicTable,
			Columns: []string{chatthread.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.PatientTable,
			Columns: []string{chatthread.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.PatientTable,
			Columns: []string{chatthread.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatthread.MessagesTable,
			Columns: []string{chatthread.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !ctuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatthread.MessagesTable,
			Columns: []string{chatthread.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatthread.MessagesTable,
			Columns: []string{chatthread.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatThread{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatthread.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
