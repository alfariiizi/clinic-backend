// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatmessage"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/google/uuid"
)

// ChatMessage is the model entity for the ChatMessage schema.
type ChatMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// external message ID from WhatsApp
	WhatsappMessageID string `json:"whatsapp_message_id,omitempty"`
	// SenderType holds the value of the "sender_type" field.
	SenderType chatmessage.SenderType `json:"sender_type,omitempty"`
	// MessageType holds the value of the "message_type" field.
	MessageType chatmessage.MessageType `json:"message_type,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// file info, location data, etc
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// tool call made by AI
	AiToolCall string `json:"ai_tool_call,omitempty"`
	// AiToolResult holds the value of the "ai_tool_result" field.
	AiToolResult map[string]interface{} `json:"ai_tool_result,omitempty"`
	// IsRead holds the value of the "is_read" field.
	IsRead bool `json:"is_read,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatMessageQuery when eager-loading is set.
	Edges                ChatMessageEdges `json:"edges"`
	chat_thread_messages *uuid.UUID
	selectValues         sql.SelectValues
}

// ChatMessageEdges holds the relations/edges for other nodes in the graph.
type ChatMessageEdges struct {
	// Thread holds the value of the thread edge.
	Thread *ChatThread `json:"thread,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ThreadOrErr returns the Thread value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatMessageEdges) ThreadOrErr() (*ChatThread, error) {
	if e.Thread != nil {
		return e.Thread, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: chatthread.Label}
	}
	return nil, &NotLoadedError{edge: "thread"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatmessage.FieldMetadata, chatmessage.FieldAiToolResult:
			values[i] = new([]byte)
		case chatmessage.FieldIsRead:
			values[i] = new(sql.NullBool)
		case chatmessage.FieldWhatsappMessageID, chatmessage.FieldSenderType, chatmessage.FieldMessageType, chatmessage.FieldContent, chatmessage.FieldAiToolCall:
			values[i] = new(sql.NullString)
		case chatmessage.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case chatmessage.FieldID:
			values[i] = new(uuid.UUID)
		case chatmessage.ForeignKeys[0]: // chat_thread_messages
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatMessage fields.
func (cm *ChatMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatmessage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cm.ID = *value
			}
		case chatmessage.FieldWhatsappMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whatsapp_message_id", values[i])
			} else if value.Valid {
				cm.WhatsappMessageID = value.String
			}
		case chatmessage.FieldSenderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender_type", values[i])
			} else if value.Valid {
				cm.SenderType = chatmessage.SenderType(value.String)
			}
		case chatmessage.FieldMessageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_type", values[i])
			} else if value.Valid {
				cm.MessageType = chatmessage.MessageType(value.String)
			}
		case chatmessage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				cm.Content = value.String
			}
		case chatmessage.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cm.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case chatmessage.FieldAiToolCall:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_tool_call", values[i])
			} else if value.Valid {
				cm.AiToolCall = value.String
			}
		case chatmessage.FieldAiToolResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ai_tool_result", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cm.AiToolResult); err != nil {
					return fmt.Errorf("unmarshal field ai_tool_result: %w", err)
				}
			}
		case chatmessage.FieldIsRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_read", values[i])
			} else if value.Valid {
				cm.IsRead = value.Bool
			}
		case chatmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Time
			}
		case chatmessage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field chat_thread_messages", values[i])
			} else if value.Valid {
				cm.chat_thread_messages = new(uuid.UUID)
				*cm.chat_thread_messages = *value.S.(*uuid.UUID)
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatMessage.
// This includes values selected through modifiers, order, etc.
func (cm *ChatMessage) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QueryThread queries the "thread" edge of the ChatMessage entity.
func (cm *ChatMessage) QueryThread() *ChatThreadQuery {
	return NewChatMessageClient(cm.config).QueryThread(cm)
}

// Update returns a builder for updating this ChatMessage.
// Note that you need to call ChatMessage.Unwrap() before calling this method if this ChatMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ChatMessage) Update() *ChatMessageUpdateOne {
	return NewChatMessageClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the ChatMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ChatMessage) Unwrap() *ChatMessage {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("db: ChatMessage is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ChatMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ChatMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("whatsapp_message_id=")
	builder.WriteString(cm.WhatsappMessageID)
	builder.WriteString(", ")
	builder.WriteString("sender_type=")
	builder.WriteString(fmt.Sprintf("%v", cm.SenderType))
	builder.WriteString(", ")
	builder.WriteString("message_type=")
	builder.WriteString(fmt.Sprintf("%v", cm.MessageType))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(cm.Content)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", cm.Metadata))
	builder.WriteString(", ")
	builder.WriteString("ai_tool_call=")
	builder.WriteString(cm.AiToolCall)
	builder.WriteString(", ")
	builder.WriteString("ai_tool_result=")
	builder.WriteString(fmt.Sprintf("%v", cm.AiToolResult))
	builder.WriteString(", ")
	builder.WriteString("is_read=")
	builder.WriteString(fmt.Sprintf("%v", cm.IsRead))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cm.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChatMessages is a parsable slice of ChatMessage.
type ChatMessages []*ChatMessage
