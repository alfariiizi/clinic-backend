// Code generated by ent, DO NOT EDIT.

package orderitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldID, id))
}

// ItemName applies equality check predicate on the "item_name" field. It's identical to ItemNameEQ.
func ItemName(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldItemName, v))
}

// ItemDescription applies equality check predicate on the "item_description" field. It's identical to ItemDescriptionEQ.
func ItemDescription(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldItemDescription, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldQuantity, v))
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldUnitPrice, v))
}

// DiscountAmount applies equality check predicate on the "discount_amount" field. It's identical to DiscountAmountEQ.
func DiscountAmount(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldDiscountAmount, v))
}

// TotalPrice applies equality check predicate on the "total_price" field. It's identical to TotalPriceEQ.
func TotalPrice(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldTotalPrice, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldCreatedAt, v))
}

// ItemTypeEQ applies the EQ predicate on the "item_type" field.
func ItemTypeEQ(v ItemType) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldItemType, v))
}

// ItemTypeNEQ applies the NEQ predicate on the "item_type" field.
func ItemTypeNEQ(v ItemType) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldItemType, v))
}

// ItemTypeIn applies the In predicate on the "item_type" field.
func ItemTypeIn(vs ...ItemType) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldItemType, vs...))
}

// ItemTypeNotIn applies the NotIn predicate on the "item_type" field.
func ItemTypeNotIn(vs ...ItemType) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldItemType, vs...))
}

// ItemNameEQ applies the EQ predicate on the "item_name" field.
func ItemNameEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldItemName, v))
}

// ItemNameNEQ applies the NEQ predicate on the "item_name" field.
func ItemNameNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldItemName, v))
}

// ItemNameIn applies the In predicate on the "item_name" field.
func ItemNameIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldItemName, vs...))
}

// ItemNameNotIn applies the NotIn predicate on the "item_name" field.
func ItemNameNotIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldItemName, vs...))
}

// ItemNameGT applies the GT predicate on the "item_name" field.
func ItemNameGT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldItemName, v))
}

// ItemNameGTE applies the GTE predicate on the "item_name" field.
func ItemNameGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldItemName, v))
}

// ItemNameLT applies the LT predicate on the "item_name" field.
func ItemNameLT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldItemName, v))
}

// ItemNameLTE applies the LTE predicate on the "item_name" field.
func ItemNameLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldItemName, v))
}

// ItemNameContains applies the Contains predicate on the "item_name" field.
func ItemNameContains(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContains(FieldItemName, v))
}

// ItemNameHasPrefix applies the HasPrefix predicate on the "item_name" field.
func ItemNameHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasPrefix(FieldItemName, v))
}

// ItemNameHasSuffix applies the HasSuffix predicate on the "item_name" field.
func ItemNameHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasSuffix(FieldItemName, v))
}

// ItemNameEqualFold applies the EqualFold predicate on the "item_name" field.
func ItemNameEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEqualFold(FieldItemName, v))
}

// ItemNameContainsFold applies the ContainsFold predicate on the "item_name" field.
func ItemNameContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContainsFold(FieldItemName, v))
}

// ItemDescriptionEQ applies the EQ predicate on the "item_description" field.
func ItemDescriptionEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldItemDescription, v))
}

// ItemDescriptionNEQ applies the NEQ predicate on the "item_description" field.
func ItemDescriptionNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldItemDescription, v))
}

// ItemDescriptionIn applies the In predicate on the "item_description" field.
func ItemDescriptionIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldItemDescription, vs...))
}

// ItemDescriptionNotIn applies the NotIn predicate on the "item_description" field.
func ItemDescriptionNotIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldItemDescription, vs...))
}

// ItemDescriptionGT applies the GT predicate on the "item_description" field.
func ItemDescriptionGT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldItemDescription, v))
}

// ItemDescriptionGTE applies the GTE predicate on the "item_description" field.
func ItemDescriptionGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldItemDescription, v))
}

// ItemDescriptionLT applies the LT predicate on the "item_description" field.
func ItemDescriptionLT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldItemDescription, v))
}

// ItemDescriptionLTE applies the LTE predicate on the "item_description" field.
func ItemDescriptionLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldItemDescription, v))
}

// ItemDescriptionContains applies the Contains predicate on the "item_description" field.
func ItemDescriptionContains(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContains(FieldItemDescription, v))
}

// ItemDescriptionHasPrefix applies the HasPrefix predicate on the "item_description" field.
func ItemDescriptionHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasPrefix(FieldItemDescription, v))
}

// ItemDescriptionHasSuffix applies the HasSuffix predicate on the "item_description" field.
func ItemDescriptionHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasSuffix(FieldItemDescription, v))
}

// ItemDescriptionIsNil applies the IsNil predicate on the "item_description" field.
func ItemDescriptionIsNil() predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIsNull(FieldItemDescription))
}

// ItemDescriptionNotNil applies the NotNil predicate on the "item_description" field.
func ItemDescriptionNotNil() predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotNull(FieldItemDescription))
}

// ItemDescriptionEqualFold applies the EqualFold predicate on the "item_description" field.
func ItemDescriptionEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEqualFold(FieldItemDescription, v))
}

// ItemDescriptionContainsFold applies the ContainsFold predicate on the "item_description" field.
func ItemDescriptionContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContainsFold(FieldItemDescription, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldQuantity, v))
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldUnitPrice, v))
}

// DiscountAmountEQ applies the EQ predicate on the "discount_amount" field.
func DiscountAmountEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldDiscountAmount, v))
}

// DiscountAmountNEQ applies the NEQ predicate on the "discount_amount" field.
func DiscountAmountNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldDiscountAmount, v))
}

// DiscountAmountIn applies the In predicate on the "discount_amount" field.
func DiscountAmountIn(vs ...float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldDiscountAmount, vs...))
}

// DiscountAmountNotIn applies the NotIn predicate on the "discount_amount" field.
func DiscountAmountNotIn(vs ...float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldDiscountAmount, vs...))
}

// DiscountAmountGT applies the GT predicate on the "discount_amount" field.
func DiscountAmountGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldDiscountAmount, v))
}

// DiscountAmountGTE applies the GTE predicate on the "discount_amount" field.
func DiscountAmountGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldDiscountAmount, v))
}

// DiscountAmountLT applies the LT predicate on the "discount_amount" field.
func DiscountAmountLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldDiscountAmount, v))
}

// DiscountAmountLTE applies the LTE predicate on the "discount_amount" field.
func DiscountAmountLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldDiscountAmount, v))
}

// TotalPriceEQ applies the EQ predicate on the "total_price" field.
func TotalPriceEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldTotalPrice, v))
}

// TotalPriceNEQ applies the NEQ predicate on the "total_price" field.
func TotalPriceNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldTotalPrice, v))
}

// TotalPriceIn applies the In predicate on the "total_price" field.
func TotalPriceIn(vs ...float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldTotalPrice, vs...))
}

// TotalPriceNotIn applies the NotIn predicate on the "total_price" field.
func TotalPriceNotIn(vs ...float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldTotalPrice, vs...))
}

// TotalPriceGT applies the GT predicate on the "total_price" field.
func TotalPriceGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldTotalPrice, v))
}

// TotalPriceGTE applies the GTE predicate on the "total_price" field.
func TotalPriceGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldTotalPrice, v))
}

// TotalPriceLT applies the LT predicate on the "total_price" field.
func TotalPriceLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldTotalPrice, v))
}

// TotalPriceLTE applies the LTE predicate on the "total_price" field.
func TotalPriceLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldTotalPrice, v))
}

// ItemMetadataIsNil applies the IsNil predicate on the "item_metadata" field.
func ItemMetadataIsNil() predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIsNull(FieldItemMetadata))
}

// ItemMetadataNotNil applies the NotNil predicate on the "item_metadata" field.
func ItemMetadataNotNil() predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotNull(FieldItemMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldCreatedAt, v))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppointment applies the HasEdge predicate on the "appointment" edge.
func HasAppointment() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentTable, AppointmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentWith applies the HasEdge predicate on the "appointment" edge with a given conditions (other predicates).
func HasAppointmentWith(preds ...predicate.Appointment) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := newAppointmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(sql.NotPredicates(p))
}
