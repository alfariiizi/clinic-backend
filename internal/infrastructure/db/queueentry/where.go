// Code generated by ent, DO NOT EDIT.

package queueentry

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldID, id))
}

// ClinicID applies equality check predicate on the "clinic_id" field. It's identical to ClinicIDEQ.
func ClinicID(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldClinicID, v))
}

// PatientID applies equality check predicate on the "patient_id" field. It's identical to PatientIDEQ.
func PatientID(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldPatientID, v))
}

// DoctorID applies equality check predicate on the "doctor_id" field. It's identical to DoctorIDEQ.
func DoctorID(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldDoctorID, v))
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldServiceID, v))
}

// QueueNumber applies equality check predicate on the "queue_number" field. It's identical to QueueNumberEQ.
func QueueNumber(v int) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldQueueNumber, v))
}

// EstimatedTime applies equality check predicate on the "estimated_time" field. It's identical to EstimatedTimeEQ.
func EstimatedTime(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldEstimatedTime, v))
}

// CalledAt applies equality check predicate on the "called_at" field. It's identical to CalledAtEQ.
func CalledAt(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldCalledAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldCompletedAt, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldNotes, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldUpdatedAt, v))
}

// ClinicIDEQ applies the EQ predicate on the "clinic_id" field.
func ClinicIDEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldClinicID, v))
}

// ClinicIDNEQ applies the NEQ predicate on the "clinic_id" field.
func ClinicIDNEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldClinicID, v))
}

// ClinicIDIn applies the In predicate on the "clinic_id" field.
func ClinicIDIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldClinicID, vs...))
}

// ClinicIDNotIn applies the NotIn predicate on the "clinic_id" field.
func ClinicIDNotIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldClinicID, vs...))
}

// ClinicIDGT applies the GT predicate on the "clinic_id" field.
func ClinicIDGT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldClinicID, v))
}

// ClinicIDGTE applies the GTE predicate on the "clinic_id" field.
func ClinicIDGTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldClinicID, v))
}

// ClinicIDLT applies the LT predicate on the "clinic_id" field.
func ClinicIDLT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldClinicID, v))
}

// ClinicIDLTE applies the LTE predicate on the "clinic_id" field.
func ClinicIDLTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldClinicID, v))
}

// ClinicIDContains applies the Contains predicate on the "clinic_id" field.
func ClinicIDContains(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContains(FieldClinicID, v))
}

// ClinicIDHasPrefix applies the HasPrefix predicate on the "clinic_id" field.
func ClinicIDHasPrefix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasPrefix(FieldClinicID, v))
}

// ClinicIDHasSuffix applies the HasSuffix predicate on the "clinic_id" field.
func ClinicIDHasSuffix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasSuffix(FieldClinicID, v))
}

// ClinicIDEqualFold applies the EqualFold predicate on the "clinic_id" field.
func ClinicIDEqualFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEqualFold(FieldClinicID, v))
}

// ClinicIDContainsFold applies the ContainsFold predicate on the "clinic_id" field.
func ClinicIDContainsFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContainsFold(FieldClinicID, v))
}

// PatientIDEQ applies the EQ predicate on the "patient_id" field.
func PatientIDEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldPatientID, v))
}

// PatientIDNEQ applies the NEQ predicate on the "patient_id" field.
func PatientIDNEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldPatientID, v))
}

// PatientIDIn applies the In predicate on the "patient_id" field.
func PatientIDIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldPatientID, vs...))
}

// PatientIDNotIn applies the NotIn predicate on the "patient_id" field.
func PatientIDNotIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldPatientID, vs...))
}

// PatientIDGT applies the GT predicate on the "patient_id" field.
func PatientIDGT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldPatientID, v))
}

// PatientIDGTE applies the GTE predicate on the "patient_id" field.
func PatientIDGTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldPatientID, v))
}

// PatientIDLT applies the LT predicate on the "patient_id" field.
func PatientIDLT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldPatientID, v))
}

// PatientIDLTE applies the LTE predicate on the "patient_id" field.
func PatientIDLTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldPatientID, v))
}

// PatientIDContains applies the Contains predicate on the "patient_id" field.
func PatientIDContains(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContains(FieldPatientID, v))
}

// PatientIDHasPrefix applies the HasPrefix predicate on the "patient_id" field.
func PatientIDHasPrefix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasPrefix(FieldPatientID, v))
}

// PatientIDHasSuffix applies the HasSuffix predicate on the "patient_id" field.
func PatientIDHasSuffix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasSuffix(FieldPatientID, v))
}

// PatientIDEqualFold applies the EqualFold predicate on the "patient_id" field.
func PatientIDEqualFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEqualFold(FieldPatientID, v))
}

// PatientIDContainsFold applies the ContainsFold predicate on the "patient_id" field.
func PatientIDContainsFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContainsFold(FieldPatientID, v))
}

// DoctorIDEQ applies the EQ predicate on the "doctor_id" field.
func DoctorIDEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldDoctorID, v))
}

// DoctorIDNEQ applies the NEQ predicate on the "doctor_id" field.
func DoctorIDNEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldDoctorID, v))
}

// DoctorIDIn applies the In predicate on the "doctor_id" field.
func DoctorIDIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldDoctorID, vs...))
}

// DoctorIDNotIn applies the NotIn predicate on the "doctor_id" field.
func DoctorIDNotIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldDoctorID, vs...))
}

// DoctorIDGT applies the GT predicate on the "doctor_id" field.
func DoctorIDGT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldDoctorID, v))
}

// DoctorIDGTE applies the GTE predicate on the "doctor_id" field.
func DoctorIDGTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldDoctorID, v))
}

// DoctorIDLT applies the LT predicate on the "doctor_id" field.
func DoctorIDLT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldDoctorID, v))
}

// DoctorIDLTE applies the LTE predicate on the "doctor_id" field.
func DoctorIDLTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldDoctorID, v))
}

// DoctorIDContains applies the Contains predicate on the "doctor_id" field.
func DoctorIDContains(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContains(FieldDoctorID, v))
}

// DoctorIDHasPrefix applies the HasPrefix predicate on the "doctor_id" field.
func DoctorIDHasPrefix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasPrefix(FieldDoctorID, v))
}

// DoctorIDHasSuffix applies the HasSuffix predicate on the "doctor_id" field.
func DoctorIDHasSuffix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasSuffix(FieldDoctorID, v))
}

// DoctorIDIsNil applies the IsNil predicate on the "doctor_id" field.
func DoctorIDIsNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIsNull(FieldDoctorID))
}

// DoctorIDNotNil applies the NotNil predicate on the "doctor_id" field.
func DoctorIDNotNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotNull(FieldDoctorID))
}

// DoctorIDEqualFold applies the EqualFold predicate on the "doctor_id" field.
func DoctorIDEqualFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEqualFold(FieldDoctorID, v))
}

// DoctorIDContainsFold applies the ContainsFold predicate on the "doctor_id" field.
func DoctorIDContainsFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContainsFold(FieldDoctorID, v))
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldServiceID, v))
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldServiceID, v))
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldServiceID, vs...))
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldServiceID, vs...))
}

// ServiceIDGT applies the GT predicate on the "service_id" field.
func ServiceIDGT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldServiceID, v))
}

// ServiceIDGTE applies the GTE predicate on the "service_id" field.
func ServiceIDGTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldServiceID, v))
}

// ServiceIDLT applies the LT predicate on the "service_id" field.
func ServiceIDLT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldServiceID, v))
}

// ServiceIDLTE applies the LTE predicate on the "service_id" field.
func ServiceIDLTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldServiceID, v))
}

// ServiceIDContains applies the Contains predicate on the "service_id" field.
func ServiceIDContains(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContains(FieldServiceID, v))
}

// ServiceIDHasPrefix applies the HasPrefix predicate on the "service_id" field.
func ServiceIDHasPrefix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasPrefix(FieldServiceID, v))
}

// ServiceIDHasSuffix applies the HasSuffix predicate on the "service_id" field.
func ServiceIDHasSuffix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasSuffix(FieldServiceID, v))
}

// ServiceIDIsNil applies the IsNil predicate on the "service_id" field.
func ServiceIDIsNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIsNull(FieldServiceID))
}

// ServiceIDNotNil applies the NotNil predicate on the "service_id" field.
func ServiceIDNotNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotNull(FieldServiceID))
}

// ServiceIDEqualFold applies the EqualFold predicate on the "service_id" field.
func ServiceIDEqualFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEqualFold(FieldServiceID, v))
}

// ServiceIDContainsFold applies the ContainsFold predicate on the "service_id" field.
func ServiceIDContainsFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContainsFold(FieldServiceID, v))
}

// QueueNumberEQ applies the EQ predicate on the "queue_number" field.
func QueueNumberEQ(v int) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldQueueNumber, v))
}

// QueueNumberNEQ applies the NEQ predicate on the "queue_number" field.
func QueueNumberNEQ(v int) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldQueueNumber, v))
}

// QueueNumberIn applies the In predicate on the "queue_number" field.
func QueueNumberIn(vs ...int) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldQueueNumber, vs...))
}

// QueueNumberNotIn applies the NotIn predicate on the "queue_number" field.
func QueueNumberNotIn(vs ...int) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldQueueNumber, vs...))
}

// QueueNumberGT applies the GT predicate on the "queue_number" field.
func QueueNumberGT(v int) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldQueueNumber, v))
}

// QueueNumberGTE applies the GTE predicate on the "queue_number" field.
func QueueNumberGTE(v int) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldQueueNumber, v))
}

// QueueNumberLT applies the LT predicate on the "queue_number" field.
func QueueNumberLT(v int) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldQueueNumber, v))
}

// QueueNumberLTE applies the LTE predicate on the "queue_number" field.
func QueueNumberLTE(v int) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldQueueNumber, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldStatus, vs...))
}

// EstimatedTimeEQ applies the EQ predicate on the "estimated_time" field.
func EstimatedTimeEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldEstimatedTime, v))
}

// EstimatedTimeNEQ applies the NEQ predicate on the "estimated_time" field.
func EstimatedTimeNEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldEstimatedTime, v))
}

// EstimatedTimeIn applies the In predicate on the "estimated_time" field.
func EstimatedTimeIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldEstimatedTime, vs...))
}

// EstimatedTimeNotIn applies the NotIn predicate on the "estimated_time" field.
func EstimatedTimeNotIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldEstimatedTime, vs...))
}

// EstimatedTimeGT applies the GT predicate on the "estimated_time" field.
func EstimatedTimeGT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldEstimatedTime, v))
}

// EstimatedTimeGTE applies the GTE predicate on the "estimated_time" field.
func EstimatedTimeGTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldEstimatedTime, v))
}

// EstimatedTimeLT applies the LT predicate on the "estimated_time" field.
func EstimatedTimeLT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldEstimatedTime, v))
}

// EstimatedTimeLTE applies the LTE predicate on the "estimated_time" field.
func EstimatedTimeLTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldEstimatedTime, v))
}

// EstimatedTimeIsNil applies the IsNil predicate on the "estimated_time" field.
func EstimatedTimeIsNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIsNull(FieldEstimatedTime))
}

// EstimatedTimeNotNil applies the NotNil predicate on the "estimated_time" field.
func EstimatedTimeNotNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotNull(FieldEstimatedTime))
}

// CalledAtEQ applies the EQ predicate on the "called_at" field.
func CalledAtEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldCalledAt, v))
}

// CalledAtNEQ applies the NEQ predicate on the "called_at" field.
func CalledAtNEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldCalledAt, v))
}

// CalledAtIn applies the In predicate on the "called_at" field.
func CalledAtIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldCalledAt, vs...))
}

// CalledAtNotIn applies the NotIn predicate on the "called_at" field.
func CalledAtNotIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldCalledAt, vs...))
}

// CalledAtGT applies the GT predicate on the "called_at" field.
func CalledAtGT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldCalledAt, v))
}

// CalledAtGTE applies the GTE predicate on the "called_at" field.
func CalledAtGTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldCalledAt, v))
}

// CalledAtLT applies the LT predicate on the "called_at" field.
func CalledAtLT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldCalledAt, v))
}

// CalledAtLTE applies the LTE predicate on the "called_at" field.
func CalledAtLTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldCalledAt, v))
}

// CalledAtIsNil applies the IsNil predicate on the "called_at" field.
func CalledAtIsNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIsNull(FieldCalledAt))
}

// CalledAtNotNil applies the NotNil predicate on the "called_at" field.
func CalledAtNotNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotNull(FieldCalledAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotNull(FieldCompletedAt))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldContainsFold(FieldNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.QueueEntry {
	return predicate.QueueEntry(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QueueEntry) predicate.QueueEntry {
	return predicate.QueueEntry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QueueEntry) predicate.QueueEntry {
	return predicate.QueueEntry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QueueEntry) predicate.QueueEntry {
	return predicate.QueueEntry(sql.NotPredicates(p))
}
