// Code generated by ent, DO NOT EDIT.

package queueentry

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the queueentry type in the database.
	Label = "queue_entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClinicID holds the string denoting the clinic_id field in the database.
	FieldClinicID = "clinic_id"
	// FieldPatientID holds the string denoting the patient_id field in the database.
	FieldPatientID = "patient_id"
	// FieldDoctorID holds the string denoting the doctor_id field in the database.
	FieldDoctorID = "doctor_id"
	// FieldServiceID holds the string denoting the service_id field in the database.
	FieldServiceID = "service_id"
	// FieldQueueNumber holds the string denoting the queue_number field in the database.
	FieldQueueNumber = "queue_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEstimatedTime holds the string denoting the estimated_time field in the database.
	FieldEstimatedTime = "estimated_time"
	// FieldCalledAt holds the string denoting the called_at field in the database.
	FieldCalledAt = "called_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the queueentry in the database.
	Table = "queue_entries"
)

// Columns holds all SQL columns for queueentry fields.
var Columns = []string{
	FieldID,
	FieldClinicID,
	FieldPatientID,
	FieldDoctorID,
	FieldServiceID,
	FieldQueueNumber,
	FieldStatus,
	FieldEstimatedTime,
	FieldCalledAt,
	FieldCompletedAt,
	FieldNotes,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusWAITING is the default value of the Status enum.
const DefaultStatus = StatusWAITING

// Status values.
const (
	StatusWAITING     Status = "WAITING"
	StatusCALLED      Status = "CALLED"
	StatusIN_PROGRESS Status = "IN_PROGRESS"
	StatusCOMPLETED   Status = "COMPLETED"
	StatusCANCELLED   Status = "CANCELLED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusWAITING, StatusCALLED, StatusIN_PROGRESS, StatusCOMPLETED, StatusCANCELLED:
		return nil
	default:
		return fmt.Errorf("queueentry: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the QueueEntry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClinicID orders the results by the clinic_id field.
func ByClinicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicID, opts...).ToFunc()
}

// ByPatientID orders the results by the patient_id field.
func ByPatientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientID, opts...).ToFunc()
}

// ByDoctorID orders the results by the doctor_id field.
func ByDoctorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoctorID, opts...).ToFunc()
}

// ByServiceID orders the results by the service_id field.
func ByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceID, opts...).ToFunc()
}

// ByQueueNumber orders the results by the queue_number field.
func ByQueueNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQueueNumber, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEstimatedTime orders the results by the estimated_time field.
func ByEstimatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedTime, opts...).ToFunc()
}

// ByCalledAt orders the results by the called_at field.
func ByCalledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalledAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
