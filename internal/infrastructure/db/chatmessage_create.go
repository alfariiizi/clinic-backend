// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatmessage"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/google/uuid"
)

// ChatMessageCreate is the builder for creating a ChatMessage entity.
type ChatMessageCreate struct {
	config
	mutation *ChatMessageMutation
	hooks    []Hook
}

// SetWhatsappMessageID sets the "whatsapp_message_id" field.
func (cmc *ChatMessageCreate) SetWhatsappMessageID(s string) *ChatMessageCreate {
	cmc.mutation.SetWhatsappMessageID(s)
	return cmc
}

// SetNillableWhatsappMessageID sets the "whatsapp_message_id" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableWhatsappMessageID(s *string) *ChatMessageCreate {
	if s != nil {
		cmc.SetWhatsappMessageID(*s)
	}
	return cmc
}

// SetSenderType sets the "sender_type" field.
func (cmc *ChatMessageCreate) SetSenderType(ct chatmessage.SenderType) *ChatMessageCreate {
	cmc.mutation.SetSenderType(ct)
	return cmc
}

// SetMessageType sets the "message_type" field.
func (cmc *ChatMessageCreate) SetMessageType(ct chatmessage.MessageType) *ChatMessageCreate {
	cmc.mutation.SetMessageType(ct)
	return cmc
}

// SetNillableMessageType sets the "message_type" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableMessageType(ct *chatmessage.MessageType) *ChatMessageCreate {
	if ct != nil {
		cmc.SetMessageType(*ct)
	}
	return cmc
}

// SetContent sets the "content" field.
func (cmc *ChatMessageCreate) SetContent(s string) *ChatMessageCreate {
	cmc.mutation.SetContent(s)
	return cmc
}

// SetMetadata sets the "metadata" field.
func (cmc *ChatMessageCreate) SetMetadata(m map[string]interface{}) *ChatMessageCreate {
	cmc.mutation.SetMetadata(m)
	return cmc
}

// SetAiToolCall sets the "ai_tool_call" field.
func (cmc *ChatMessageCreate) SetAiToolCall(s string) *ChatMessageCreate {
	cmc.mutation.SetAiToolCall(s)
	return cmc
}

// SetNillableAiToolCall sets the "ai_tool_call" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableAiToolCall(s *string) *ChatMessageCreate {
	if s != nil {
		cmc.SetAiToolCall(*s)
	}
	return cmc
}

// SetAiToolResult sets the "ai_tool_result" field.
func (cmc *ChatMessageCreate) SetAiToolResult(m map[string]interface{}) *ChatMessageCreate {
	cmc.mutation.SetAiToolResult(m)
	return cmc
}

// SetIsRead sets the "is_read" field.
func (cmc *ChatMessageCreate) SetIsRead(b bool) *ChatMessageCreate {
	cmc.mutation.SetIsRead(b)
	return cmc
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableIsRead(b *bool) *ChatMessageCreate {
	if b != nil {
		cmc.SetIsRead(*b)
	}
	return cmc
}

// SetCreatedAt sets the "created_at" field.
func (cmc *ChatMessageCreate) SetCreatedAt(t time.Time) *ChatMessageCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableCreatedAt(t *time.Time) *ChatMessageCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetID sets the "id" field.
func (cmc *ChatMessageCreate) SetID(u uuid.UUID) *ChatMessageCreate {
	cmc.mutation.SetID(u)
	return cmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableID(u *uuid.UUID) *ChatMessageCreate {
	if u != nil {
		cmc.SetID(*u)
	}
	return cmc
}

// SetThreadID sets the "thread" edge to the ChatThread entity by ID.
func (cmc *ChatMessageCreate) SetThreadID(id uuid.UUID) *ChatMessageCreate {
	cmc.mutation.SetThreadID(id)
	return cmc
}

// SetNillableThreadID sets the "thread" edge to the ChatThread entity by ID if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableThreadID(id *uuid.UUID) *ChatMessageCreate {
	if id != nil {
		cmc = cmc.SetThreadID(*id)
	}
	return cmc
}

// SetThread sets the "thread" edge to the ChatThread entity.
func (cmc *ChatMessageCreate) SetThread(c *ChatThread) *ChatMessageCreate {
	return cmc.SetThreadID(c.ID)
}

// Mutation returns the ChatMessageMutation object of the builder.
func (cmc *ChatMessageCreate) Mutation() *ChatMessageMutation {
	return cmc.mutation
}

// Save creates the ChatMessage in the database.
func (cmc *ChatMessageCreate) Save(ctx context.Context) (*ChatMessage, error) {
	cmc.defaults()
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *ChatMessageCreate) SaveX(ctx context.Context) *ChatMessage {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *ChatMessageCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *ChatMessageCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *ChatMessageCreate) defaults() {
	if _, ok := cmc.mutation.MessageType(); !ok {
		v := chatmessage.DefaultMessageType
		cmc.mutation.SetMessageType(v)
	}
	if _, ok := cmc.mutation.IsRead(); !ok {
		v := chatmessage.DefaultIsRead
		cmc.mutation.SetIsRead(v)
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := chatmessage.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.ID(); !ok {
		v := chatmessage.DefaultID()
		cmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *ChatMessageCreate) check() error {
	if _, ok := cmc.mutation.SenderType(); !ok {
		return &ValidationError{Name: "sender_type", err: errors.New(`db: missing required field "ChatMessage.sender_type"`)}
	}
	if v, ok := cmc.mutation.SenderType(); ok {
		if err := chatmessage.SenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "sender_type", err: fmt.Errorf(`db: validator failed for field "ChatMessage.sender_type": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.MessageType(); !ok {
		return &ValidationError{Name: "message_type", err: errors.New(`db: missing required field "ChatMessage.message_type"`)}
	}
	if v, ok := cmc.mutation.MessageType(); ok {
		if err := chatmessage.MessageTypeValidator(v); err != nil {
			return &ValidationError{Name: "message_type", err: fmt.Errorf(`db: validator failed for field "ChatMessage.message_type": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`db: missing required field "ChatMessage.content"`)}
	}
	if _, ok := cmc.mutation.IsRead(); !ok {
		return &ValidationError{Name: "is_read", err: errors.New(`db: missing required field "ChatMessage.is_read"`)}
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ChatMessage.created_at"`)}
	}
	return nil
}

func (cmc *ChatMessageCreate) sqlSave(ctx context.Context) (*ChatMessage, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *ChatMessageCreate) createSpec() (*ChatMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatMessage{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(chatmessage.Table, sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID))
	)
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cmc.mutation.WhatsappMessageID(); ok {
		_spec.SetField(chatmessage.FieldWhatsappMessageID, field.TypeString, value)
		_node.WhatsappMessageID = value
	}
	if value, ok := cmc.mutation.SenderType(); ok {
		_spec.SetField(chatmessage.FieldSenderType, field.TypeEnum, value)
		_node.SenderType = value
	}
	if value, ok := cmc.mutation.MessageType(); ok {
		_spec.SetField(chatmessage.FieldMessageType, field.TypeEnum, value)
		_node.MessageType = value
	}
	if value, ok := cmc.mutation.Content(); ok {
		_spec.SetField(chatmessage.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := cmc.mutation.Metadata(); ok {
		_spec.SetField(chatmessage.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := cmc.mutation.AiToolCall(); ok {
		_spec.SetField(chatmessage.FieldAiToolCall, field.TypeString, value)
		_node.AiToolCall = value
	}
	if value, ok := cmc.mutation.AiToolResult(); ok {
		_spec.SetField(chatmessage.FieldAiToolResult, field.TypeJSON, value)
		_node.AiToolResult = value
	}
	if value, ok := cmc.mutation.IsRead(); ok {
		_spec.SetField(chatmessage.FieldIsRead, field.TypeBool, value)
		_node.IsRead = value
	}
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.SetField(chatmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := cmc.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.ThreadTable,
			Columns: []string{chatmessage.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.chat_thread_messages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChatMessageCreateBulk is the builder for creating many ChatMessage entities in bulk.
type ChatMessageCreateBulk struct {
	config
	err      error
	builders []*ChatMessageCreate
}

// Save creates the ChatMessage entities in the database.
func (cmcb *ChatMessageCreateBulk) Save(ctx context.Context) ([]*ChatMessage, error) {
	if cmcb.err != nil {
		return nil, cmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*ChatMessage, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *ChatMessageCreateBulk) SaveX(ctx context.Context) []*ChatMessage {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *ChatMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *ChatMessageCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
