// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatmessage"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/google/uuid"
)

// ChatThreadCreate is the builder for creating a ChatThread entity.
type ChatThreadCreate struct {
	config
	mutation *ChatThreadMutation
	hooks    []Hook
}

// SetWhatsappThreadID sets the "whatsapp_thread_id" field.
func (ctc *ChatThreadCreate) SetWhatsappThreadID(s string) *ChatThreadCreate {
	ctc.mutation.SetWhatsappThreadID(s)
	return ctc
}

// SetNillableWhatsappThreadID sets the "whatsapp_thread_id" field if the given value is not nil.
func (ctc *ChatThreadCreate) SetNillableWhatsappThreadID(s *string) *ChatThreadCreate {
	if s != nil {
		ctc.SetWhatsappThreadID(*s)
	}
	return ctc
}

// SetStatus sets the "status" field.
func (ctc *ChatThreadCreate) SetStatus(c chatthread.Status) *ChatThreadCreate {
	ctc.mutation.SetStatus(c)
	return ctc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ctc *ChatThreadCreate) SetNillableStatus(c *chatthread.Status) *ChatThreadCreate {
	if c != nil {
		ctc.SetStatus(*c)
	}
	return ctc
}

// SetContext sets the "context" field.
func (ctc *ChatThreadCreate) SetContext(m map[string]interface{}) *ChatThreadCreate {
	ctc.mutation.SetContext(m)
	return ctc
}

// SetLastMessageAt sets the "last_message_at" field.
func (ctc *ChatThreadCreate) SetLastMessageAt(t time.Time) *ChatThreadCreate {
	ctc.mutation.SetLastMessageAt(t)
	return ctc
}

// SetNillableLastMessageAt sets the "last_message_at" field if the given value is not nil.
func (ctc *ChatThreadCreate) SetNillableLastMessageAt(t *time.Time) *ChatThreadCreate {
	if t != nil {
		ctc.SetLastMessageAt(*t)
	}
	return ctc
}

// SetCreatedAt sets the "created_at" field.
func (ctc *ChatThreadCreate) SetCreatedAt(t time.Time) *ChatThreadCreate {
	ctc.mutation.SetCreatedAt(t)
	return ctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctc *ChatThreadCreate) SetNillableCreatedAt(t *time.Time) *ChatThreadCreate {
	if t != nil {
		ctc.SetCreatedAt(*t)
	}
	return ctc
}

// SetUpdatedAt sets the "updated_at" field.
func (ctc *ChatThreadCreate) SetUpdatedAt(t time.Time) *ChatThreadCreate {
	ctc.mutation.SetUpdatedAt(t)
	return ctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ctc *ChatThreadCreate) SetNillableUpdatedAt(t *time.Time) *ChatThreadCreate {
	if t != nil {
		ctc.SetUpdatedAt(*t)
	}
	return ctc
}

// SetID sets the "id" field.
func (ctc *ChatThreadCreate) SetID(u uuid.UUID) *ChatThreadCreate {
	ctc.mutation.SetID(u)
	return ctc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ctc *ChatThreadCreate) SetNillableID(u *uuid.UUID) *ChatThreadCreate {
	if u != nil {
		ctc.SetID(*u)
	}
	return ctc
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (ctc *ChatThreadCreate) SetClinicID(id uuid.UUID) *ChatThreadCreate {
	ctc.mutation.SetClinicID(id)
	return ctc
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (ctc *ChatThreadCreate) SetNillableClinicID(id *uuid.UUID) *ChatThreadCreate {
	if id != nil {
		ctc = ctc.SetClinicID(*id)
	}
	return ctc
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ctc *ChatThreadCreate) SetClinic(c *Clinic) *ChatThreadCreate {
	return ctc.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (ctc *ChatThreadCreate) SetPatientID(id uuid.UUID) *ChatThreadCreate {
	ctc.mutation.SetPatientID(id)
	return ctc
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (ctc *ChatThreadCreate) SetNillablePatientID(id *uuid.UUID) *ChatThreadCreate {
	if id != nil {
		ctc = ctc.SetPatientID(*id)
	}
	return ctc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ctc *ChatThreadCreate) SetPatient(p *Patient) *ChatThreadCreate {
	return ctc.SetPatientID(p.ID)
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by IDs.
func (ctc *ChatThreadCreate) AddMessageIDs(ids ...uuid.UUID) *ChatThreadCreate {
	ctc.mutation.AddMessageIDs(ids...)
	return ctc
}

// AddMessages adds the "messages" edges to the ChatMessage entity.
func (ctc *ChatThreadCreate) AddMessages(c ...*ChatMessage) *ChatThreadCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctc.AddMessageIDs(ids...)
}

// Mutation returns the ChatThreadMutation object of the builder.
func (ctc *ChatThreadCreate) Mutation() *ChatThreadMutation {
	return ctc.mutation
}

// Save creates the ChatThread in the database.
func (ctc *ChatThreadCreate) Save(ctx context.Context) (*ChatThread, error) {
	ctc.defaults()
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *ChatThreadCreate) SaveX(ctx context.Context) *ChatThread {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *ChatThreadCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *ChatThreadCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *ChatThreadCreate) defaults() {
	if _, ok := ctc.mutation.Status(); !ok {
		v := chatthread.DefaultStatus
		ctc.mutation.SetStatus(v)
	}
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		v := chatthread.DefaultCreatedAt()
		ctc.mutation.SetCreatedAt(v)
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		v := chatthread.DefaultUpdatedAt()
		ctc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ctc.mutation.ID(); !ok {
		v := chatthread.DefaultID()
		ctc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *ChatThreadCreate) check() error {
	if _, ok := ctc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "ChatThread.status"`)}
	}
	if v, ok := ctc.mutation.Status(); ok {
		if err := chatthread.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "ChatThread.status": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ChatThread.created_at"`)}
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ChatThread.updated_at"`)}
	}
	return nil
}

func (ctc *ChatThreadCreate) sqlSave(ctx context.Context) (*ChatThread, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *ChatThreadCreate) createSpec() (*ChatThread, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatThread{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(chatthread.Table, sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID))
	)
	if id, ok := ctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ctc.mutation.WhatsappThreadID(); ok {
		_spec.SetField(chatthread.FieldWhatsappThreadID, field.TypeString, value)
		_node.WhatsappThreadID = value
	}
	if value, ok := ctc.mutation.Status(); ok {
		_spec.SetField(chatthread.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ctc.mutation.Context(); ok {
		_spec.SetField(chatthread.FieldContext, field.TypeJSON, value)
		_node.Context = value
	}
	if value, ok := ctc.mutation.LastMessageAt(); ok {
		_spec.SetField(chatthread.FieldLastMessageAt, field.TypeTime, value)
		_node.LastMessageAt = value
	}
	if value, ok := ctc.mutation.CreatedAt(); ok {
		_spec.SetField(chatthread.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ctc.mutation.UpdatedAt(); ok {
		_spec.SetField(chatthread.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ctc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.ClinicTable,
			Columns: []string{chatthread.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clinic_chat_threads = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatthread.PatientTable,
			Columns: []string{chatthread.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.patient_chat_threads = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatthread.MessagesTable,
			Columns: []string{chatthread.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChatThreadCreateBulk is the builder for creating many ChatThread entities in bulk.
type ChatThreadCreateBulk struct {
	config
	err      error
	builders []*ChatThreadCreate
}

// Save creates the ChatThread entities in the database.
func (ctcb *ChatThreadCreateBulk) Save(ctx context.Context) ([]*ChatThread, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*ChatThread, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatThreadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *ChatThreadCreateBulk) SaveX(ctx context.Context) []*ChatThread {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *ChatThreadCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *ChatThreadCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
