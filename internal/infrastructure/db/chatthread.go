// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/google/uuid"
)

// ChatThread is the model entity for the ChatThread schema.
type ChatThread struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// external thread ID from WhatsApp
	WhatsappThreadID string `json:"whatsapp_thread_id,omitempty"`
	// Status holds the value of the "status" field.
	Status chatthread.Status `json:"status,omitempty"`
	// AI context data
	Context map[string]interface{} `json:"context,omitempty"`
	// LastMessageAt holds the value of the "last_message_at" field.
	LastMessageAt time.Time `json:"last_message_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatThreadQuery when eager-loading is set.
	Edges                ChatThreadEdges `json:"edges"`
	clinic_chat_threads  *uuid.UUID
	patient_chat_threads *uuid.UUID
	selectValues         sql.SelectValues
}

// ChatThreadEdges holds the relations/edges for other nodes in the graph.
type ChatThreadEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*ChatMessage `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatThreadEdges) ClinicOrErr() (*Clinic, error) {
	if e.Clinic != nil {
		return e.Clinic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: clinic.Label}
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatThreadEdges) PatientOrErr() (*Patient, error) {
	if e.Patient != nil {
		return e.Patient, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: patient.Label}
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e ChatThreadEdges) MessagesOrErr() ([]*ChatMessage, error) {
	if e.loadedTypes[2] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatThread) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatthread.FieldContext:
			values[i] = new([]byte)
		case chatthread.FieldWhatsappThreadID, chatthread.FieldStatus:
			values[i] = new(sql.NullString)
		case chatthread.FieldLastMessageAt, chatthread.FieldCreatedAt, chatthread.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case chatthread.FieldID:
			values[i] = new(uuid.UUID)
		case chatthread.ForeignKeys[0]: // clinic_chat_threads
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case chatthread.ForeignKeys[1]: // patient_chat_threads
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatThread fields.
func (ct *ChatThread) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatthread.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ct.ID = *value
			}
		case chatthread.FieldWhatsappThreadID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whatsapp_thread_id", values[i])
			} else if value.Valid {
				ct.WhatsappThreadID = value.String
			}
		case chatthread.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ct.Status = chatthread.Status(value.String)
			}
		case chatthread.FieldContext:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ct.Context); err != nil {
					return fmt.Errorf("unmarshal field context: %w", err)
				}
			}
		case chatthread.FieldLastMessageAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_message_at", values[i])
			} else if value.Valid {
				ct.LastMessageAt = value.Time
			}
		case chatthread.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		case chatthread.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ct.UpdatedAt = value.Time
			}
		case chatthread.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_chat_threads", values[i])
			} else if value.Valid {
				ct.clinic_chat_threads = new(uuid.UUID)
				*ct.clinic_chat_threads = *value.S.(*uuid.UUID)
			}
		case chatthread.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field patient_chat_threads", values[i])
			} else if value.Valid {
				ct.patient_chat_threads = new(uuid.UUID)
				*ct.patient_chat_threads = *value.S.(*uuid.UUID)
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatThread.
// This includes values selected through modifiers, order, etc.
func (ct *ChatThread) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the ChatThread entity.
func (ct *ChatThread) QueryClinic() *ClinicQuery {
	return NewChatThreadClient(ct.config).QueryClinic(ct)
}

// QueryPatient queries the "patient" edge of the ChatThread entity.
func (ct *ChatThread) QueryPatient() *PatientQuery {
	return NewChatThreadClient(ct.config).QueryPatient(ct)
}

// QueryMessages queries the "messages" edge of the ChatThread entity.
func (ct *ChatThread) QueryMessages() *ChatMessageQuery {
	return NewChatThreadClient(ct.config).QueryMessages(ct)
}

// Update returns a builder for updating this ChatThread.
// Note that you need to call ChatThread.Unwrap() before calling this method if this ChatThread
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *ChatThread) Update() *ChatThreadUpdateOne {
	return NewChatThreadClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the ChatThread entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *ChatThread) Unwrap() *ChatThread {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("db: ChatThread is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *ChatThread) String() string {
	var builder strings.Builder
	builder.WriteString("ChatThread(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("whatsapp_thread_id=")
	builder.WriteString(ct.WhatsappThreadID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ct.Status))
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(fmt.Sprintf("%v", ct.Context))
	builder.WriteString(", ")
	builder.WriteString("last_message_at=")
	builder.WriteString(ct.LastMessageAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ct.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChatThreads is a parsable slice of ChatThread.
type ChatThreads []*ChatThread
