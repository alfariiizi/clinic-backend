// Code generated by ent, DO NOT EDIT.

package billingrecord

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the billingrecord type in the database.
	Label = "billing_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInvoiceNumber holds the string denoting the invoice_number field in the database.
	FieldInvoiceNumber = "invoice_number"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldTaxAmount holds the string denoting the tax_amount field in the database.
	FieldTaxAmount = "tax_amount"
	// FieldDiscountAmount holds the string denoting the discount_amount field in the database.
	FieldDiscountAmount = "discount_amount"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// FieldPaymentStatus holds the string denoting the payment_status field in the database.
	FieldPaymentStatus = "payment_status"
	// FieldLineItems holds the string denoting the line_items field in the database.
	FieldLineItems = "line_items"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldPaidAt holds the string denoting the paid_at field in the database.
	FieldPaidAt = "paid_at"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"
	// Table holds the table name of the billingrecord in the database.
	Table = "billing_records"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "billing_records"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinics"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_billing_records"
	// PatientTable is the table that holds the patient relation/edge.
	PatientTable = "billing_records"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patients"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "patient_billing_records"
)

// Columns holds all SQL columns for billingrecord fields.
var Columns = []string{
	FieldID,
	FieldInvoiceNumber,
	FieldAmount,
	FieldTaxAmount,
	FieldDiscountAmount,
	FieldTotalAmount,
	FieldCurrency,
	FieldPaymentMethod,
	FieldPaymentStatus,
	FieldLineItems,
	FieldDueDate,
	FieldPaidAt,
	FieldNotes,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "billing_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"clinic_billing_records",
	"patient_billing_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTaxAmount holds the default value on creation for the "tax_amount" field.
	DefaultTaxAmount float64
	// DefaultDiscountAmount holds the default value on creation for the "discount_amount" field.
	DefaultDiscountAmount float64
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// PaymentMethod defines the type for the "payment_method" enum field.
type PaymentMethod string

// PaymentMethod values.
const (
	PaymentMethodCASH           PaymentMethod = "CASH"
	PaymentMethodCREDIT_CARD    PaymentMethod = "CREDIT_CARD"
	PaymentMethodDEBIT_CARD     PaymentMethod = "DEBIT_CARD"
	PaymentMethodBANK_TRANSFER  PaymentMethod = "BANK_TRANSFER"
	PaymentMethodDIGITAL_WALLET PaymentMethod = "DIGITAL_WALLET"
)

func (pm PaymentMethod) String() string {
	return string(pm)
}

// PaymentMethodValidator is a validator for the "payment_method" field enum values. It is called by the builders before save.
func PaymentMethodValidator(pm PaymentMethod) error {
	switch pm {
	case PaymentMethodCASH, PaymentMethodCREDIT_CARD, PaymentMethodDEBIT_CARD, PaymentMethodBANK_TRANSFER, PaymentMethodDIGITAL_WALLET:
		return nil
	default:
		return fmt.Errorf("billingrecord: invalid enum value for payment_method field: %q", pm)
	}
}

// PaymentStatus defines the type for the "payment_status" enum field.
type PaymentStatus string

// PaymentStatusPENDING is the default value of the PaymentStatus enum.
const DefaultPaymentStatus = PaymentStatusPENDING

// PaymentStatus values.
const (
	PaymentStatusPENDING   PaymentStatus = "PENDING"
	PaymentStatusPAID      PaymentStatus = "PAID"
	PaymentStatusPARTIAL   PaymentStatus = "PARTIAL"
	PaymentStatusOVERDUE   PaymentStatus = "OVERDUE"
	PaymentStatusCANCELLED PaymentStatus = "CANCELLED"
)

func (ps PaymentStatus) String() string {
	return string(ps)
}

// PaymentStatusValidator is a validator for the "payment_status" field enum values. It is called by the builders before save.
func PaymentStatusValidator(ps PaymentStatus) error {
	switch ps {
	case PaymentStatusPENDING, PaymentStatusPAID, PaymentStatusPARTIAL, PaymentStatusOVERDUE, PaymentStatusCANCELLED:
		return nil
	default:
		return fmt.Errorf("billingrecord: invalid enum value for payment_status field: %q", ps)
	}
}

// OrderOption defines the ordering options for the BillingRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInvoiceNumber orders the results by the invoice_number field.
func ByInvoiceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceNumber, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByTaxAmount orders the results by the tax_amount field.
func ByTaxAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxAmount, opts...).ToFunc()
}

// ByDiscountAmount orders the results by the discount_amount field.
func ByDiscountAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountAmount, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByPaymentMethod orders the results by the payment_method field.
func ByPaymentMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethod, opts...).ToFunc()
}

// ByPaymentStatus orders the results by the payment_status field.
func ByPaymentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentStatus, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByPaidAt orders the results by the paid_at field.
func ByPaidAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaidAt, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// ByPatientField orders the results by patient field.
func ByPatientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientStep(), sql.OrderByField(field, opts...))
	}
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newPatientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
	)
}
