// Code generated by ent, DO NOT EDIT.

package billingrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldID, id))
}

// InvoiceNumber applies equality check predicate on the "invoice_number" field. It's identical to InvoiceNumberEQ.
func InvoiceNumber(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldInvoiceNumber, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldAmount, v))
}

// TaxAmount applies equality check predicate on the "tax_amount" field. It's identical to TaxAmountEQ.
func TaxAmount(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldTaxAmount, v))
}

// DiscountAmount applies equality check predicate on the "discount_amount" field. It's identical to DiscountAmountEQ.
func DiscountAmount(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldDiscountAmount, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldTotalAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldCurrency, v))
}

// DueDate applies equality check predicate on the "due_date" field. It's identical to DueDateEQ.
func DueDate(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldDueDate, v))
}

// PaidAt applies equality check predicate on the "paid_at" field. It's identical to PaidAtEQ.
func PaidAt(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldPaidAt, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldNotes, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// InvoiceNumberEQ applies the EQ predicate on the "invoice_number" field.
func InvoiceNumberEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldInvoiceNumber, v))
}

// InvoiceNumberNEQ applies the NEQ predicate on the "invoice_number" field.
func InvoiceNumberNEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldInvoiceNumber, v))
}

// InvoiceNumberIn applies the In predicate on the "invoice_number" field.
func InvoiceNumberIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldInvoiceNumber, vs...))
}

// InvoiceNumberNotIn applies the NotIn predicate on the "invoice_number" field.
func InvoiceNumberNotIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldInvoiceNumber, vs...))
}

// InvoiceNumberGT applies the GT predicate on the "invoice_number" field.
func InvoiceNumberGT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldInvoiceNumber, v))
}

// InvoiceNumberGTE applies the GTE predicate on the "invoice_number" field.
func InvoiceNumberGTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldInvoiceNumber, v))
}

// InvoiceNumberLT applies the LT predicate on the "invoice_number" field.
func InvoiceNumberLT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldInvoiceNumber, v))
}

// InvoiceNumberLTE applies the LTE predicate on the "invoice_number" field.
func InvoiceNumberLTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldInvoiceNumber, v))
}

// InvoiceNumberContains applies the Contains predicate on the "invoice_number" field.
func InvoiceNumberContains(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContains(FieldInvoiceNumber, v))
}

// InvoiceNumberHasPrefix applies the HasPrefix predicate on the "invoice_number" field.
func InvoiceNumberHasPrefix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasPrefix(FieldInvoiceNumber, v))
}

// InvoiceNumberHasSuffix applies the HasSuffix predicate on the "invoice_number" field.
func InvoiceNumberHasSuffix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasSuffix(FieldInvoiceNumber, v))
}

// InvoiceNumberEqualFold applies the EqualFold predicate on the "invoice_number" field.
func InvoiceNumberEqualFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEqualFold(FieldInvoiceNumber, v))
}

// InvoiceNumberContainsFold applies the ContainsFold predicate on the "invoice_number" field.
func InvoiceNumberContainsFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContainsFold(FieldInvoiceNumber, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldAmount, v))
}

// TaxAmountEQ applies the EQ predicate on the "tax_amount" field.
func TaxAmountEQ(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldTaxAmount, v))
}

// TaxAmountNEQ applies the NEQ predicate on the "tax_amount" field.
func TaxAmountNEQ(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldTaxAmount, v))
}

// TaxAmountIn applies the In predicate on the "tax_amount" field.
func TaxAmountIn(vs ...float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldTaxAmount, vs...))
}

// TaxAmountNotIn applies the NotIn predicate on the "tax_amount" field.
func TaxAmountNotIn(vs ...float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldTaxAmount, vs...))
}

// TaxAmountGT applies the GT predicate on the "tax_amount" field.
func TaxAmountGT(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldTaxAmount, v))
}

// TaxAmountGTE applies the GTE predicate on the "tax_amount" field.
func TaxAmountGTE(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldTaxAmount, v))
}

// TaxAmountLT applies the LT predicate on the "tax_amount" field.
func TaxAmountLT(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldTaxAmount, v))
}

// TaxAmountLTE applies the LTE predicate on the "tax_amount" field.
func TaxAmountLTE(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldTaxAmount, v))
}

// DiscountAmountEQ applies the EQ predicate on the "discount_amount" field.
func DiscountAmountEQ(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldDiscountAmount, v))
}

// DiscountAmountNEQ applies the NEQ predicate on the "discount_amount" field.
func DiscountAmountNEQ(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldDiscountAmount, v))
}

// DiscountAmountIn applies the In predicate on the "discount_amount" field.
func DiscountAmountIn(vs ...float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldDiscountAmount, vs...))
}

// DiscountAmountNotIn applies the NotIn predicate on the "discount_amount" field.
func DiscountAmountNotIn(vs ...float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldDiscountAmount, vs...))
}

// DiscountAmountGT applies the GT predicate on the "discount_amount" field.
func DiscountAmountGT(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldDiscountAmount, v))
}

// DiscountAmountGTE applies the GTE predicate on the "discount_amount" field.
func DiscountAmountGTE(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldDiscountAmount, v))
}

// DiscountAmountLT applies the LT predicate on the "discount_amount" field.
func DiscountAmountLT(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldDiscountAmount, v))
}

// DiscountAmountLTE applies the LTE predicate on the "discount_amount" field.
func DiscountAmountLTE(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldDiscountAmount, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldTotalAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContainsFold(FieldCurrency, v))
}

// PaymentMethodEQ applies the EQ predicate on the "payment_method" field.
func PaymentMethodEQ(v PaymentMethod) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "payment_method" field.
func PaymentMethodNEQ(v PaymentMethod) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "payment_method" field.
func PaymentMethodIn(vs ...PaymentMethod) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "payment_method" field.
func PaymentMethodNotIn(vs ...PaymentMethod) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodIsNil applies the IsNil predicate on the "payment_method" field.
func PaymentMethodIsNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIsNull(FieldPaymentMethod))
}

// PaymentMethodNotNil applies the NotNil predicate on the "payment_method" field.
func PaymentMethodNotNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotNull(FieldPaymentMethod))
}

// PaymentStatusEQ applies the EQ predicate on the "payment_status" field.
func PaymentStatusEQ(v PaymentStatus) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldPaymentStatus, v))
}

// PaymentStatusNEQ applies the NEQ predicate on the "payment_status" field.
func PaymentStatusNEQ(v PaymentStatus) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldPaymentStatus, v))
}

// PaymentStatusIn applies the In predicate on the "payment_status" field.
func PaymentStatusIn(vs ...PaymentStatus) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldPaymentStatus, vs...))
}

// PaymentStatusNotIn applies the NotIn predicate on the "payment_status" field.
func PaymentStatusNotIn(vs ...PaymentStatus) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldPaymentStatus, vs...))
}

// LineItemsIsNil applies the IsNil predicate on the "line_items" field.
func LineItemsIsNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIsNull(FieldLineItems))
}

// LineItemsNotNil applies the NotNil predicate on the "line_items" field.
func LineItemsNotNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotNull(FieldLineItems))
}

// DueDateEQ applies the EQ predicate on the "due_date" field.
func DueDateEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldDueDate, v))
}

// DueDateNEQ applies the NEQ predicate on the "due_date" field.
func DueDateNEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldDueDate, v))
}

// DueDateIn applies the In predicate on the "due_date" field.
func DueDateIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldDueDate, vs...))
}

// DueDateNotIn applies the NotIn predicate on the "due_date" field.
func DueDateNotIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldDueDate, vs...))
}

// DueDateGT applies the GT predicate on the "due_date" field.
func DueDateGT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldDueDate, v))
}

// DueDateGTE applies the GTE predicate on the "due_date" field.
func DueDateGTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldDueDate, v))
}

// DueDateLT applies the LT predicate on the "due_date" field.
func DueDateLT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldDueDate, v))
}

// DueDateLTE applies the LTE predicate on the "due_date" field.
func DueDateLTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldDueDate, v))
}

// DueDateIsNil applies the IsNil predicate on the "due_date" field.
func DueDateIsNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIsNull(FieldDueDate))
}

// DueDateNotNil applies the NotNil predicate on the "due_date" field.
func DueDateNotNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotNull(FieldDueDate))
}

// PaidAtEQ applies the EQ predicate on the "paid_at" field.
func PaidAtEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldPaidAt, v))
}

// PaidAtNEQ applies the NEQ predicate on the "paid_at" field.
func PaidAtNEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldPaidAt, v))
}

// PaidAtIn applies the In predicate on the "paid_at" field.
func PaidAtIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldPaidAt, vs...))
}

// PaidAtNotIn applies the NotIn predicate on the "paid_at" field.
func PaidAtNotIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldPaidAt, vs...))
}

// PaidAtGT applies the GT predicate on the "paid_at" field.
func PaidAtGT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldPaidAt, v))
}

// PaidAtGTE applies the GTE predicate on the "paid_at" field.
func PaidAtGTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldPaidAt, v))
}

// PaidAtLT applies the LT predicate on the "paid_at" field.
func PaidAtLT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldPaidAt, v))
}

// PaidAtLTE applies the LTE predicate on the "paid_at" field.
func PaidAtLTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldPaidAt, v))
}

// PaidAtIsNil applies the IsNil predicate on the "paid_at" field.
func PaidAtIsNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIsNull(FieldPaidAt))
}

// PaidAtNotNil applies the NotNil predicate on the "paid_at" field.
func PaidAtNotNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotNull(FieldPaidAt))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContainsFold(FieldNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.BillingRecord {
	return predicate.BillingRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.BillingRecord {
	return predicate.BillingRecord(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.BillingRecord {
	return predicate.BillingRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.BillingRecord {
	return predicate.BillingRecord(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingRecord) predicate.BillingRecord {
	return predicate.BillingRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingRecord) predicate.BillingRecord {
	return predicate.BillingRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingRecord) predicate.BillingRecord {
	return predicate.BillingRecord(sql.NotPredicates(p))
}
