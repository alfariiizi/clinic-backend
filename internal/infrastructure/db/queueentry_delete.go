// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/queueentry"
)

// QueueEntryDelete is the builder for deleting a QueueEntry entity.
type QueueEntryDelete struct {
	config
	hooks    []Hook
	mutation *QueueEntryMutation
}

// Where appends a list predicates to the QueueEntryDelete builder.
func (qed *QueueEntryDelete) Where(ps ...predicate.QueueEntry) *QueueEntryDelete {
	qed.mutation.Where(ps...)
	return qed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qed *QueueEntryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qed.sqlExec, qed.mutation, qed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qed *QueueEntryDelete) ExecX(ctx context.Context) int {
	n, err := qed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qed *QueueEntryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(queueentry.Table, sqlgraph.NewFieldSpec(queueentry.FieldID, field.TypeUUID))
	if ps := qed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qed.mutation.done = true
	return affected, err
}

// QueueEntryDeleteOne is the builder for deleting a single QueueEntry entity.
type QueueEntryDeleteOne struct {
	qed *QueueEntryDelete
}

// Where appends a list predicates to the QueueEntryDelete builder.
func (qedo *QueueEntryDeleteOne) Where(ps ...predicate.QueueEntry) *QueueEntryDeleteOne {
	qedo.qed.mutation.Where(ps...)
	return qedo
}

// Exec executes the deletion query.
func (qedo *QueueEntryDeleteOne) Exec(ctx context.Context) error {
	n, err := qedo.qed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{queueentry.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qedo *QueueEntryDeleteOne) ExecX(ctx context.Context) {
	if err := qedo.Exec(ctx); err != nil {
		panic(err)
	}
}
