// Code generated by ent, DO NOT EDIT.

package inventorymovement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLTE(FieldID, id))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldQuantity, v))
}

// ReferenceID applies equality check predicate on the "reference_id" field. It's identical to ReferenceIDEQ.
func ReferenceID(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldReferenceID, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldNotes, v))
}

// PerformedBy applies equality check predicate on the "performed_by" field. It's identical to PerformedByEQ.
func PerformedBy(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldPerformedBy, v))
}

// MovementDate applies equality check predicate on the "movement_date" field. It's identical to MovementDateEQ.
func MovementDate(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldMovementDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldCreatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotIn(FieldType, vs...))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLTE(FieldQuantity, v))
}

// ReferenceIDEQ applies the EQ predicate on the "reference_id" field.
func ReferenceIDEQ(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldReferenceID, v))
}

// ReferenceIDNEQ applies the NEQ predicate on the "reference_id" field.
func ReferenceIDNEQ(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNEQ(FieldReferenceID, v))
}

// ReferenceIDIn applies the In predicate on the "reference_id" field.
func ReferenceIDIn(vs ...string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIn(FieldReferenceID, vs...))
}

// ReferenceIDNotIn applies the NotIn predicate on the "reference_id" field.
func ReferenceIDNotIn(vs ...string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotIn(FieldReferenceID, vs...))
}

// ReferenceIDGT applies the GT predicate on the "reference_id" field.
func ReferenceIDGT(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGT(FieldReferenceID, v))
}

// ReferenceIDGTE applies the GTE predicate on the "reference_id" field.
func ReferenceIDGTE(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGTE(FieldReferenceID, v))
}

// ReferenceIDLT applies the LT predicate on the "reference_id" field.
func ReferenceIDLT(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLT(FieldReferenceID, v))
}

// ReferenceIDLTE applies the LTE predicate on the "reference_id" field.
func ReferenceIDLTE(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLTE(FieldReferenceID, v))
}

// ReferenceIDContains applies the Contains predicate on the "reference_id" field.
func ReferenceIDContains(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldContains(FieldReferenceID, v))
}

// ReferenceIDHasPrefix applies the HasPrefix predicate on the "reference_id" field.
func ReferenceIDHasPrefix(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldHasPrefix(FieldReferenceID, v))
}

// ReferenceIDHasSuffix applies the HasSuffix predicate on the "reference_id" field.
func ReferenceIDHasSuffix(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldHasSuffix(FieldReferenceID, v))
}

// ReferenceIDIsNil applies the IsNil predicate on the "reference_id" field.
func ReferenceIDIsNil() predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIsNull(FieldReferenceID))
}

// ReferenceIDNotNil applies the NotNil predicate on the "reference_id" field.
func ReferenceIDNotNil() predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotNull(FieldReferenceID))
}

// ReferenceIDEqualFold applies the EqualFold predicate on the "reference_id" field.
func ReferenceIDEqualFold(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEqualFold(FieldReferenceID, v))
}

// ReferenceIDContainsFold applies the ContainsFold predicate on the "reference_id" field.
func ReferenceIDContainsFold(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldContainsFold(FieldReferenceID, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldContainsFold(FieldNotes, v))
}

// PerformedByEQ applies the EQ predicate on the "performed_by" field.
func PerformedByEQ(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldPerformedBy, v))
}

// PerformedByNEQ applies the NEQ predicate on the "performed_by" field.
func PerformedByNEQ(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNEQ(FieldPerformedBy, v))
}

// PerformedByIn applies the In predicate on the "performed_by" field.
func PerformedByIn(vs ...string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIn(FieldPerformedBy, vs...))
}

// PerformedByNotIn applies the NotIn predicate on the "performed_by" field.
func PerformedByNotIn(vs ...string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotIn(FieldPerformedBy, vs...))
}

// PerformedByGT applies the GT predicate on the "performed_by" field.
func PerformedByGT(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGT(FieldPerformedBy, v))
}

// PerformedByGTE applies the GTE predicate on the "performed_by" field.
func PerformedByGTE(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGTE(FieldPerformedBy, v))
}

// PerformedByLT applies the LT predicate on the "performed_by" field.
func PerformedByLT(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLT(FieldPerformedBy, v))
}

// PerformedByLTE applies the LTE predicate on the "performed_by" field.
func PerformedByLTE(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLTE(FieldPerformedBy, v))
}

// PerformedByContains applies the Contains predicate on the "performed_by" field.
func PerformedByContains(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldContains(FieldPerformedBy, v))
}

// PerformedByHasPrefix applies the HasPrefix predicate on the "performed_by" field.
func PerformedByHasPrefix(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldHasPrefix(FieldPerformedBy, v))
}

// PerformedByHasSuffix applies the HasSuffix predicate on the "performed_by" field.
func PerformedByHasSuffix(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldHasSuffix(FieldPerformedBy, v))
}

// PerformedByIsNil applies the IsNil predicate on the "performed_by" field.
func PerformedByIsNil() predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIsNull(FieldPerformedBy))
}

// PerformedByNotNil applies the NotNil predicate on the "performed_by" field.
func PerformedByNotNil() predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotNull(FieldPerformedBy))
}

// PerformedByEqualFold applies the EqualFold predicate on the "performed_by" field.
func PerformedByEqualFold(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEqualFold(FieldPerformedBy, v))
}

// PerformedByContainsFold applies the ContainsFold predicate on the "performed_by" field.
func PerformedByContainsFold(v string) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldContainsFold(FieldPerformedBy, v))
}

// MovementDateEQ applies the EQ predicate on the "movement_date" field.
func MovementDateEQ(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldMovementDate, v))
}

// MovementDateNEQ applies the NEQ predicate on the "movement_date" field.
func MovementDateNEQ(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNEQ(FieldMovementDate, v))
}

// MovementDateIn applies the In predicate on the "movement_date" field.
func MovementDateIn(vs ...time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIn(FieldMovementDate, vs...))
}

// MovementDateNotIn applies the NotIn predicate on the "movement_date" field.
func MovementDateNotIn(vs ...time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotIn(FieldMovementDate, vs...))
}

// MovementDateGT applies the GT predicate on the "movement_date" field.
func MovementDateGT(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGT(FieldMovementDate, v))
}

// MovementDateGTE applies the GTE predicate on the "movement_date" field.
func MovementDateGTE(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGTE(FieldMovementDate, v))
}

// MovementDateLT applies the LT predicate on the "movement_date" field.
func MovementDateLT(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLT(FieldMovementDate, v))
}

// MovementDateLTE applies the LTE predicate on the "movement_date" field.
func MovementDateLTE(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLTE(FieldMovementDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.FieldLTE(FieldCreatedAt, v))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.InventoryMovement {
	return predicate.InventoryMovement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.InventoryMovement {
	return predicate.InventoryMovement(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.InventoryMovement {
	return predicate.InventoryMovement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.InventoryMovement {
	return predicate.InventoryMovement(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InventoryMovement) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InventoryMovement) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InventoryMovement) predicate.InventoryMovement {
	return predicate.InventoryMovement(sql.NotPredicates(p))
}
