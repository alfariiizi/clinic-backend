// Code generated by ent, DO NOT EDIT.

package inventorymovement

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the inventorymovement type in the database.
	Label = "inventory_movement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldReferenceID holds the string denoting the reference_id field in the database.
	FieldReferenceID = "reference_id"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldPerformedBy holds the string denoting the performed_by field in the database.
	FieldPerformedBy = "performed_by"
	// FieldMovementDate holds the string denoting the movement_date field in the database.
	FieldMovementDate = "movement_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// Table holds the table name of the inventorymovement in the database.
	Table = "inventory_movements"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "inventory_movements"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinics"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_inventory_movements"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "inventory_movements"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_inventory_movements"
)

// Columns holds all SQL columns for inventorymovement fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldQuantity,
	FieldReferenceID,
	FieldNotes,
	FieldPerformedBy,
	FieldMovementDate,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "inventory_movements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"clinic_inventory_movements",
	"product_inventory_movements",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMovementDate holds the default value on creation for the "movement_date" field.
	DefaultMovementDate func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// TypeSALE is the default value of the Type enum.
const DefaultType = TypeSALE

// Type values.
const (
	TypePURCHASE   Type = "PURCHASE"
	TypeSALE       Type = "SALE"
	TypeADJUSTMENT Type = "ADJUSTMENT"
	TypeRETURN     Type = "RETURN"
	TypeDAMAGE     Type = "DAMAGE"
	TypeEXPIRED    Type = "EXPIRED"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePURCHASE, TypeSALE, TypeADJUSTMENT, TypeRETURN, TypeDAMAGE, TypeEXPIRED:
		return nil
	default:
		return fmt.Errorf("inventorymovement: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the InventoryMovement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByReferenceID orders the results by the reference_id field.
func ByReferenceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceID, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByPerformedBy orders the results by the performed_by field.
func ByPerformedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPerformedBy, opts...).ToFunc()
}

// ByMovementDate orders the results by the movement_date field.
func ByMovementDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMovementDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductField orders the results by product field.
func ByProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), sql.OrderByField(field, opts...))
	}
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
	)
}
