// Code generated by ent, DO NOT EDIT.

package appointmentreminder

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the appointmentreminder type in the database.
	Label = "appointment_reminder"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldScheduledTime holds the string denoting the scheduled_time field in the database.
	FieldScheduledTime = "scheduled_time"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSentAt holds the string denoting the sent_at field in the database.
	FieldSentAt = "sent_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAppointment holds the string denoting the appointment edge name in mutations.
	EdgeAppointment = "appointment"
	// Table holds the table name of the appointmentreminder in the database.
	Table = "appointment_reminders"
	// AppointmentTable is the table that holds the appointment relation/edge.
	AppointmentTable = "appointment_reminders"
	// AppointmentInverseTable is the table name for the Appointment entity.
	// It exists in this package in order to avoid circular dependency with the "appointment" package.
	AppointmentInverseTable = "appointments"
	// AppointmentColumn is the table column denoting the appointment relation/edge.
	AppointmentColumn = "appointment_reminders"
)

// Columns holds all SQL columns for appointmentreminder fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldScheduledTime,
	FieldMessage,
	FieldStatus,
	FieldSentAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "appointment_reminders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"appointment_reminders",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeSMS      Type = "SMS"
	TypeWHATSAPP Type = "WHATSAPP"
	TypeEMAIL    Type = "EMAIL"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSMS, TypeWHATSAPP, TypeEMAIL:
		return nil
	default:
		return fmt.Errorf("appointmentreminder: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPENDING is the default value of the Status enum.
const DefaultStatus = StatusPENDING

// Status values.
const (
	StatusPENDING Status = "PENDING"
	StatusSENT    Status = "SENT"
	StatusFAILED  Status = "FAILED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPENDING, StatusSENT, StatusFAILED:
		return nil
	default:
		return fmt.Errorf("appointmentreminder: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the AppointmentReminder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByScheduledTime orders the results by the scheduled_time field.
func ByScheduledTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledTime, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySentAt orders the results by the sent_at field.
func BySentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAppointmentField orders the results by appointment field.
func ByAppointmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppointmentStep(), sql.OrderByField(field, opts...))
	}
}
func newAppointmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppointmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AppointmentTable, AppointmentColumn),
	)
}
