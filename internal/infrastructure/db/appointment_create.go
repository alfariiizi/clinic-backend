// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointmentreminder"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderitem"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/service"
	"github.com/google/uuid"
)

// AppointmentCreate is the builder for creating a Appointment entity.
type AppointmentCreate struct {
	config
	mutation *AppointmentMutation
	hooks    []Hook
}

// SetAppointmentDate sets the "appointment_date" field.
func (ac *AppointmentCreate) SetAppointmentDate(t time.Time) *AppointmentCreate {
	ac.mutation.SetAppointmentDate(t)
	return ac
}

// SetStartTime sets the "start_time" field.
func (ac *AppointmentCreate) SetStartTime(t time.Time) *AppointmentCreate {
	ac.mutation.SetStartTime(t)
	return ac
}

// SetEndTime sets the "end_time" field.
func (ac *AppointmentCreate) SetEndTime(t time.Time) *AppointmentCreate {
	ac.mutation.SetEndTime(t)
	return ac
}

// SetStatus sets the "status" field.
func (ac *AppointmentCreate) SetStatus(a appointment.Status) *AppointmentCreate {
	ac.mutation.SetStatus(a)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableStatus(a *appointment.Status) *AppointmentCreate {
	if a != nil {
		ac.SetStatus(*a)
	}
	return ac
}

// SetNotes sets the "notes" field.
func (ac *AppointmentCreate) SetNotes(s string) *AppointmentCreate {
	ac.mutation.SetNotes(s)
	return ac
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableNotes(s *string) *AppointmentCreate {
	if s != nil {
		ac.SetNotes(*s)
	}
	return ac
}

// SetSymptoms sets the "symptoms" field.
func (ac *AppointmentCreate) SetSymptoms(s string) *AppointmentCreate {
	ac.mutation.SetSymptoms(s)
	return ac
}

// SetNillableSymptoms sets the "symptoms" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableSymptoms(s *string) *AppointmentCreate {
	if s != nil {
		ac.SetSymptoms(*s)
	}
	return ac
}

// SetDiagnosis sets the "diagnosis" field.
func (ac *AppointmentCreate) SetDiagnosis(s string) *AppointmentCreate {
	ac.mutation.SetDiagnosis(s)
	return ac
}

// SetNillableDiagnosis sets the "diagnosis" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableDiagnosis(s *string) *AppointmentCreate {
	if s != nil {
		ac.SetDiagnosis(*s)
	}
	return ac
}

// SetTreatmentPlan sets the "treatment_plan" field.
func (ac *AppointmentCreate) SetTreatmentPlan(s string) *AppointmentCreate {
	ac.mutation.SetTreatmentPlan(s)
	return ac
}

// SetNillableTreatmentPlan sets the "treatment_plan" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableTreatmentPlan(s *string) *AppointmentCreate {
	if s != nil {
		ac.SetTreatmentPlan(*s)
	}
	return ac
}

// SetPrescriptions sets the "prescriptions" field.
func (ac *AppointmentCreate) SetPrescriptions(m []map[string]interface{}) *AppointmentCreate {
	ac.mutation.SetPrescriptions(m)
	return ac
}

// SetTotalCost sets the "total_cost" field.
func (ac *AppointmentCreate) SetTotalCost(f float64) *AppointmentCreate {
	ac.mutation.SetTotalCost(f)
	return ac
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableTotalCost(f *float64) *AppointmentCreate {
	if f != nil {
		ac.SetTotalCost(*f)
	}
	return ac
}

// SetPaymentStatus sets the "payment_status" field.
func (ac *AppointmentCreate) SetPaymentStatus(as appointment.PaymentStatus) *AppointmentCreate {
	ac.mutation.SetPaymentStatus(as)
	return ac
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillablePaymentStatus(as *appointment.PaymentStatus) *AppointmentCreate {
	if as != nil {
		ac.SetPaymentStatus(*as)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AppointmentCreate) SetCreatedAt(t time.Time) *AppointmentCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableCreatedAt(t *time.Time) *AppointmentCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AppointmentCreate) SetUpdatedAt(t time.Time) *AppointmentCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableUpdatedAt(t *time.Time) *AppointmentCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AppointmentCreate) SetID(u uuid.UUID) *AppointmentCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableID(u *uuid.UUID) *AppointmentCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (ac *AppointmentCreate) SetClinicID(id uuid.UUID) *AppointmentCreate {
	ac.mutation.SetClinicID(id)
	return ac
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (ac *AppointmentCreate) SetNillableClinicID(id *uuid.UUID) *AppointmentCreate {
	if id != nil {
		ac = ac.SetClinicID(*id)
	}
	return ac
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ac *AppointmentCreate) SetClinic(c *Clinic) *AppointmentCreate {
	return ac.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (ac *AppointmentCreate) SetPatientID(id uuid.UUID) *AppointmentCreate {
	ac.mutation.SetPatientID(id)
	return ac
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (ac *AppointmentCreate) SetNillablePatientID(id *uuid.UUID) *AppointmentCreate {
	if id != nil {
		ac = ac.SetPatientID(*id)
	}
	return ac
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ac *AppointmentCreate) SetPatient(p *Patient) *AppointmentCreate {
	return ac.SetPatientID(p.ID)
}

// SetDoctorID sets the "doctor" edge to the Doctor entity by ID.
func (ac *AppointmentCreate) SetDoctorID(id uuid.UUID) *AppointmentCreate {
	ac.mutation.SetDoctorID(id)
	return ac
}

// SetNillableDoctorID sets the "doctor" edge to the Doctor entity by ID if the given value is not nil.
func (ac *AppointmentCreate) SetNillableDoctorID(id *uuid.UUID) *AppointmentCreate {
	if id != nil {
		ac = ac.SetDoctorID(*id)
	}
	return ac
}

// SetDoctor sets the "doctor" edge to the Doctor entity.
func (ac *AppointmentCreate) SetDoctor(d *Doctor) *AppointmentCreate {
	return ac.SetDoctorID(d.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (ac *AppointmentCreate) SetServiceID(id uuid.UUID) *AppointmentCreate {
	ac.mutation.SetServiceID(id)
	return ac
}

// SetService sets the "service" edge to the Service entity.
func (ac *AppointmentCreate) SetService(s *Service) *AppointmentCreate {
	return ac.SetServiceID(s.ID)
}

// AddReminderIDs adds the "reminders" edge to the AppointmentReminder entity by IDs.
func (ac *AppointmentCreate) AddReminderIDs(ids ...uuid.UUID) *AppointmentCreate {
	ac.mutation.AddReminderIDs(ids...)
	return ac
}

// AddReminders adds the "reminders" edges to the AppointmentReminder entity.
func (ac *AppointmentCreate) AddReminders(a ...*AppointmentReminder) *AppointmentCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddReminderIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ac *AppointmentCreate) AddOrderItemIDs(ids ...uuid.UUID) *AppointmentCreate {
	ac.mutation.AddOrderItemIDs(ids...)
	return ac
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ac *AppointmentCreate) AddOrderItems(o ...*OrderItem) *AppointmentCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOrderItemIDs(ids...)
}

// Mutation returns the AppointmentMutation object of the builder.
func (ac *AppointmentCreate) Mutation() *AppointmentMutation {
	return ac.mutation
}

// Save creates the Appointment in the database.
func (ac *AppointmentCreate) Save(ctx context.Context) (*Appointment, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppointmentCreate) SaveX(ctx context.Context) *Appointment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AppointmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AppointmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AppointmentCreate) defaults() {
	if _, ok := ac.mutation.Status(); !ok {
		v := appointment.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.PaymentStatus(); !ok {
		v := appointment.DefaultPaymentStatus
		ac.mutation.SetPaymentStatus(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := appointment.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := appointment.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := appointment.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppointmentCreate) check() error {
	if _, ok := ac.mutation.AppointmentDate(); !ok {
		return &ValidationError{Name: "appointment_date", err: errors.New(`db: missing required field "Appointment.appointment_date"`)}
	}
	if _, ok := ac.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`db: missing required field "Appointment.start_time"`)}
	}
	if _, ok := ac.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`db: missing required field "Appointment.end_time"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "Appointment.status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := appointment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Appointment.status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`db: missing required field "Appointment.payment_status"`)}
	}
	if v, ok := ac.mutation.PaymentStatus(); ok {
		if err := appointment.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`db: validator failed for field "Appointment.payment_status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Appointment.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Appointment.updated_at"`)}
	}
	if len(ac.mutation.ServiceIDs()) == 0 {
		return &ValidationError{Name: "service", err: errors.New(`db: missing required edge "Appointment.service"`)}
	}
	return nil
}

func (ac *AppointmentCreate) sqlSave(ctx context.Context) (*Appointment, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AppointmentCreate) createSpec() (*Appointment, *sqlgraph.CreateSpec) {
	var (
		_node = &Appointment{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(appointment.Table, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.AppointmentDate(); ok {
		_spec.SetField(appointment.FieldAppointmentDate, field.TypeTime, value)
		_node.AppointmentDate = value
	}
	if value, ok := ac.mutation.StartTime(); ok {
		_spec.SetField(appointment.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ac.mutation.EndTime(); ok {
		_spec.SetField(appointment.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.Notes(); ok {
		_spec.SetField(appointment.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := ac.mutation.Symptoms(); ok {
		_spec.SetField(appointment.FieldSymptoms, field.TypeString, value)
		_node.Symptoms = value
	}
	if value, ok := ac.mutation.Diagnosis(); ok {
		_spec.SetField(appointment.FieldDiagnosis, field.TypeString, value)
		_node.Diagnosis = value
	}
	if value, ok := ac.mutation.TreatmentPlan(); ok {
		_spec.SetField(appointment.FieldTreatmentPlan, field.TypeString, value)
		_node.TreatmentPlan = value
	}
	if value, ok := ac.mutation.Prescriptions(); ok {
		_spec.SetField(appointment.FieldPrescriptions, field.TypeJSON, value)
		_node.Prescriptions = value
	}
	if value, ok := ac.mutation.TotalCost(); ok {
		_spec.SetField(appointment.FieldTotalCost, field.TypeFloat64, value)
		_node.TotalCost = value
	}
	if value, ok := ac.mutation.PaymentStatus(); ok {
		_spec.SetField(appointment.FieldPaymentStatus, field.TypeEnum, value)
		_node.PaymentStatus = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(appointment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(appointment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ac.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ClinicTable,
			Columns: []string{appointment.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clinic_appointments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PatientTable,
			Columns: []string{appointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.patient_appointments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.DoctorTable,
			Columns: []string{appointment.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.doctor_appointments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.ServiceTable,
			Columns: []string{appointment.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_appointments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RemindersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.RemindersTable,
			Columns: []string{appointment.RemindersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmentreminder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appointment.OrderItemsTable,
			Columns: []string{appointment.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppointmentCreateBulk is the builder for creating many Appointment entities in bulk.
type AppointmentCreateBulk struct {
	config
	err      error
	builders []*AppointmentCreate
}

// Save creates the Appointment entities in the database.
func (acb *AppointmentCreateBulk) Save(ctx context.Context) ([]*Appointment, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Appointment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppointmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AppointmentCreateBulk) SaveX(ctx context.Context) []*Appointment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AppointmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AppointmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
