// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderitem"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderstatushistory"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/google/uuid"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetOrderNumber sets the "order_number" field.
func (oc *OrderCreate) SetOrderNumber(s string) *OrderCreate {
	oc.mutation.SetOrderNumber(s)
	return oc
}

// SetOrderType sets the "order_type" field.
func (oc *OrderCreate) SetOrderType(ot order.OrderType) *OrderCreate {
	oc.mutation.SetOrderType(ot)
	return oc
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (oc *OrderCreate) SetNillableOrderType(ot *order.OrderType) *OrderCreate {
	if ot != nil {
		oc.SetOrderType(*ot)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(o order.Status) *OrderCreate {
	oc.mutation.SetStatus(o)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStatus(o *order.Status) *OrderCreate {
	if o != nil {
		oc.SetStatus(*o)
	}
	return oc
}

// SetSubtotal sets the "subtotal" field.
func (oc *OrderCreate) SetSubtotal(f float64) *OrderCreate {
	oc.mutation.SetSubtotal(f)
	return oc
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (oc *OrderCreate) SetNillableSubtotal(f *float64) *OrderCreate {
	if f != nil {
		oc.SetSubtotal(*f)
	}
	return oc
}

// SetTaxAmount sets the "tax_amount" field.
func (oc *OrderCreate) SetTaxAmount(f float64) *OrderCreate {
	oc.mutation.SetTaxAmount(f)
	return oc
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (oc *OrderCreate) SetNillableTaxAmount(f *float64) *OrderCreate {
	if f != nil {
		oc.SetTaxAmount(*f)
	}
	return oc
}

// SetDiscountAmount sets the "discount_amount" field.
func (oc *OrderCreate) SetDiscountAmount(f float64) *OrderCreate {
	oc.mutation.SetDiscountAmount(f)
	return oc
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDiscountAmount(f *float64) *OrderCreate {
	if f != nil {
		oc.SetDiscountAmount(*f)
	}
	return oc
}

// SetShippingCost sets the "shipping_cost" field.
func (oc *OrderCreate) SetShippingCost(f float64) *OrderCreate {
	oc.mutation.SetShippingCost(f)
	return oc
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (oc *OrderCreate) SetNillableShippingCost(f *float64) *OrderCreate {
	if f != nil {
		oc.SetShippingCost(*f)
	}
	return oc
}

// SetTotalAmount sets the "total_amount" field.
func (oc *OrderCreate) SetTotalAmount(f float64) *OrderCreate {
	oc.mutation.SetTotalAmount(f)
	return oc
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (oc *OrderCreate) SetNillableTotalAmount(f *float64) *OrderCreate {
	if f != nil {
		oc.SetTotalAmount(*f)
	}
	return oc
}

// SetCurrency sets the "currency" field.
func (oc *OrderCreate) SetCurrency(s string) *OrderCreate {
	oc.mutation.SetCurrency(s)
	return oc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCurrency(s *string) *OrderCreate {
	if s != nil {
		oc.SetCurrency(*s)
	}
	return oc
}

// SetPaymentStatus sets the "payment_status" field.
func (oc *OrderCreate) SetPaymentStatus(os order.PaymentStatus) *OrderCreate {
	oc.mutation.SetPaymentStatus(os)
	return oc
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePaymentStatus(os *order.PaymentStatus) *OrderCreate {
	if os != nil {
		oc.SetPaymentStatus(*os)
	}
	return oc
}

// SetPaymentMethod sets the "payment_method" field.
func (oc *OrderCreate) SetPaymentMethod(om order.PaymentMethod) *OrderCreate {
	oc.mutation.SetPaymentMethod(om)
	return oc
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePaymentMethod(om *order.PaymentMethod) *OrderCreate {
	if om != nil {
		oc.SetPaymentMethod(*om)
	}
	return oc
}

// SetShippingAddress sets the "shipping_address" field.
func (oc *OrderCreate) SetShippingAddress(m map[string]interface{}) *OrderCreate {
	oc.mutation.SetShippingAddress(m)
	return oc
}

// SetBillingAddress sets the "billing_address" field.
func (oc *OrderCreate) SetBillingAddress(m map[string]interface{}) *OrderCreate {
	oc.mutation.SetBillingAddress(m)
	return oc
}

// SetDeliveryMethod sets the "delivery_method" field.
func (oc *OrderCreate) SetDeliveryMethod(om order.DeliveryMethod) *OrderCreate {
	oc.mutation.SetDeliveryMethod(om)
	return oc
}

// SetNillableDeliveryMethod sets the "delivery_method" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDeliveryMethod(om *order.DeliveryMethod) *OrderCreate {
	if om != nil {
		oc.SetDeliveryMethod(*om)
	}
	return oc
}

// SetExpectedDeliveryDate sets the "expected_delivery_date" field.
func (oc *OrderCreate) SetExpectedDeliveryDate(t time.Time) *OrderCreate {
	oc.mutation.SetExpectedDeliveryDate(t)
	return oc
}

// SetNillableExpectedDeliveryDate sets the "expected_delivery_date" field if the given value is not nil.
func (oc *OrderCreate) SetNillableExpectedDeliveryDate(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetExpectedDeliveryDate(*t)
	}
	return oc
}

// SetDeliveredAt sets the "delivered_at" field.
func (oc *OrderCreate) SetDeliveredAt(t time.Time) *OrderCreate {
	oc.mutation.SetDeliveredAt(t)
	return oc
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDeliveredAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetDeliveredAt(*t)
	}
	return oc
}

// SetNotes sets the "notes" field.
func (oc *OrderCreate) SetNotes(s string) *OrderCreate {
	oc.mutation.SetNotes(s)
	return oc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (oc *OrderCreate) SetNillableNotes(s *string) *OrderCreate {
	if s != nil {
		oc.SetNotes(*s)
	}
	return oc
}

// SetCancellationReason sets the "cancellation_reason" field.
func (oc *OrderCreate) SetCancellationReason(s string) *OrderCreate {
	oc.mutation.SetCancellationReason(s)
	return oc
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCancellationReason(s *string) *OrderCreate {
	if s != nil {
		oc.SetCancellationReason(*s)
	}
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (oc *OrderCreate) SetClinicID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetClinicID(id)
	return oc
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (oc *OrderCreate) SetNillableClinicID(id *uuid.UUID) *OrderCreate {
	if id != nil {
		oc = oc.SetClinicID(*id)
	}
	return oc
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (oc *OrderCreate) SetClinic(c *Clinic) *OrderCreate {
	return oc.SetClinicID(c.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (oc *OrderCreate) SetPatientID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetPatientID(id)
	return oc
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (oc *OrderCreate) SetNillablePatientID(id *uuid.UUID) *OrderCreate {
	if id != nil {
		oc = oc.SetPatientID(*id)
	}
	return oc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (oc *OrderCreate) SetPatient(p *Patient) *OrderCreate {
	return oc.SetPatientID(p.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (oc *OrderCreate) AddOrderItemIDs(ids ...uuid.UUID) *OrderCreate {
	oc.mutation.AddOrderItemIDs(ids...)
	return oc
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (oc *OrderCreate) AddOrderItems(o ...*OrderItem) *OrderCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrderItemIDs(ids...)
}

// AddOrderStatusHistoryIDs adds the "order_status_history" edge to the OrderStatusHistory entity by IDs.
func (oc *OrderCreate) AddOrderStatusHistoryIDs(ids ...uuid.UUID) *OrderCreate {
	oc.mutation.AddOrderStatusHistoryIDs(ids...)
	return oc
}

// AddOrderStatusHistory adds the "order_status_history" edges to the OrderStatusHistory entity.
func (oc *OrderCreate) AddOrderStatusHistory(o ...*OrderStatusHistory) *OrderCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrderStatusHistoryIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.OrderType(); !ok {
		v := order.DefaultOrderType
		oc.mutation.SetOrderType(v)
	}
	if _, ok := oc.mutation.Status(); !ok {
		v := order.DefaultStatus
		oc.mutation.SetStatus(v)
	}
	if _, ok := oc.mutation.Subtotal(); !ok {
		v := order.DefaultSubtotal
		oc.mutation.SetSubtotal(v)
	}
	if _, ok := oc.mutation.TaxAmount(); !ok {
		v := order.DefaultTaxAmount
		oc.mutation.SetTaxAmount(v)
	}
	if _, ok := oc.mutation.DiscountAmount(); !ok {
		v := order.DefaultDiscountAmount
		oc.mutation.SetDiscountAmount(v)
	}
	if _, ok := oc.mutation.ShippingCost(); !ok {
		v := order.DefaultShippingCost
		oc.mutation.SetShippingCost(v)
	}
	if _, ok := oc.mutation.TotalAmount(); !ok {
		v := order.DefaultTotalAmount
		oc.mutation.SetTotalAmount(v)
	}
	if _, ok := oc.mutation.Currency(); !ok {
		v := order.DefaultCurrency
		oc.mutation.SetCurrency(v)
	}
	if _, ok := oc.mutation.PaymentStatus(); !ok {
		v := order.DefaultPaymentStatus
		oc.mutation.SetPaymentStatus(v)
	}
	if _, ok := oc.mutation.DeliveryMethod(); !ok {
		v := order.DefaultDeliveryMethod
		oc.mutation.SetDeliveryMethod(v)
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := order.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.OrderNumber(); !ok {
		return &ValidationError{Name: "order_number", err: errors.New(`db: missing required field "Order.order_number"`)}
	}
	if _, ok := oc.mutation.OrderType(); !ok {
		return &ValidationError{Name: "order_type", err: errors.New(`db: missing required field "Order.order_type"`)}
	}
	if v, ok := oc.mutation.OrderType(); ok {
		if err := order.OrderTypeValidator(v); err != nil {
			return &ValidationError{Name: "order_type", err: fmt.Errorf(`db: validator failed for field "Order.order_type": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "Order.status"`)}
	}
	if v, ok := oc.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Order.status": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Subtotal(); !ok {
		return &ValidationError{Name: "subtotal", err: errors.New(`db: missing required field "Order.subtotal"`)}
	}
	if _, ok := oc.mutation.TaxAmount(); !ok {
		return &ValidationError{Name: "tax_amount", err: errors.New(`db: missing required field "Order.tax_amount"`)}
	}
	if _, ok := oc.mutation.DiscountAmount(); !ok {
		return &ValidationError{Name: "discount_amount", err: errors.New(`db: missing required field "Order.discount_amount"`)}
	}
	if _, ok := oc.mutation.ShippingCost(); !ok {
		return &ValidationError{Name: "shipping_cost", err: errors.New(`db: missing required field "Order.shipping_cost"`)}
	}
	if _, ok := oc.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`db: missing required field "Order.total_amount"`)}
	}
	if _, ok := oc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "Order.currency"`)}
	}
	if _, ok := oc.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`db: missing required field "Order.payment_status"`)}
	}
	if v, ok := oc.mutation.PaymentStatus(); ok {
		if err := order.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`db: validator failed for field "Order.payment_status": %w`, err)}
		}
	}
	if v, ok := oc.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`db: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if _, ok := oc.mutation.DeliveryMethod(); !ok {
		return &ValidationError{Name: "delivery_method", err: errors.New(`db: missing required field "Order.delivery_method"`)}
	}
	if v, ok := oc.mutation.DeliveryMethod(); ok {
		if err := order.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`db: validator failed for field "Order.delivery_method": %w`, err)}
		}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Order.updated_at"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.OrderNumber(); ok {
		_spec.SetField(order.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := oc.mutation.OrderType(); ok {
		_spec.SetField(order.FieldOrderType, field.TypeEnum, value)
		_node.OrderType = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.Subtotal(); ok {
		_spec.SetField(order.FieldSubtotal, field.TypeFloat64, value)
		_node.Subtotal = value
	}
	if value, ok := oc.mutation.TaxAmount(); ok {
		_spec.SetField(order.FieldTaxAmount, field.TypeFloat64, value)
		_node.TaxAmount = value
	}
	if value, ok := oc.mutation.DiscountAmount(); ok {
		_spec.SetField(order.FieldDiscountAmount, field.TypeFloat64, value)
		_node.DiscountAmount = value
	}
	if value, ok := oc.mutation.ShippingCost(); ok {
		_spec.SetField(order.FieldShippingCost, field.TypeFloat64, value)
		_node.ShippingCost = value
	}
	if value, ok := oc.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
		_node.TotalAmount = value
	}
	if value, ok := oc.mutation.Currency(); ok {
		_spec.SetField(order.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := oc.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeEnum, value)
		_node.PaymentStatus = value
	}
	if value, ok := oc.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeEnum, value)
		_node.PaymentMethod = value
	}
	if value, ok := oc.mutation.ShippingAddress(); ok {
		_spec.SetField(order.FieldShippingAddress, field.TypeJSON, value)
		_node.ShippingAddress = value
	}
	if value, ok := oc.mutation.BillingAddress(); ok {
		_spec.SetField(order.FieldBillingAddress, field.TypeJSON, value)
		_node.BillingAddress = value
	}
	if value, ok := oc.mutation.DeliveryMethod(); ok {
		_spec.SetField(order.FieldDeliveryMethod, field.TypeEnum, value)
		_node.DeliveryMethod = value
	}
	if value, ok := oc.mutation.ExpectedDeliveryDate(); ok {
		_spec.SetField(order.FieldExpectedDeliveryDate, field.TypeTime, value)
		_node.ExpectedDeliveryDate = value
	}
	if value, ok := oc.mutation.DeliveredAt(); ok {
		_spec.SetField(order.FieldDeliveredAt, field.TypeTime, value)
		_node.DeliveredAt = value
	}
	if value, ok := oc.mutation.Notes(); ok {
		_spec.SetField(order.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := oc.mutation.CancellationReason(); ok {
		_spec.SetField(order.FieldCancellationReason, field.TypeString, value)
		_node.CancellationReason = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := oc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ClinicTable,
			Columns: []string{order.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clinic_orders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PatientTable,
			Columns: []string{order.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.patient_orders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderStatusHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderStatusHistoryTable,
			Columns: []string{order.OrderStatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
