// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/knowledgebase"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// KnowledgeBaseUpdate is the builder for updating KnowledgeBase entities.
type KnowledgeBaseUpdate struct {
	config
	hooks    []Hook
	mutation *KnowledgeBaseMutation
}

// Where appends a list predicates to the KnowledgeBaseUpdate builder.
func (kbu *KnowledgeBaseUpdate) Where(ps ...predicate.KnowledgeBase) *KnowledgeBaseUpdate {
	kbu.mutation.Where(ps...)
	return kbu
}

// SetTitle sets the "title" field.
func (kbu *KnowledgeBaseUpdate) SetTitle(s string) *KnowledgeBaseUpdate {
	kbu.mutation.SetTitle(s)
	return kbu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kbu *KnowledgeBaseUpdate) SetNillableTitle(s *string) *KnowledgeBaseUpdate {
	if s != nil {
		kbu.SetTitle(*s)
	}
	return kbu
}

// SetCategory sets the "category" field.
func (kbu *KnowledgeBaseUpdate) SetCategory(k knowledgebase.Category) *KnowledgeBaseUpdate {
	kbu.mutation.SetCategory(k)
	return kbu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (kbu *KnowledgeBaseUpdate) SetNillableCategory(k *knowledgebase.Category) *KnowledgeBaseUpdate {
	if k != nil {
		kbu.SetCategory(*k)
	}
	return kbu
}

// SetContent sets the "content" field.
func (kbu *KnowledgeBaseUpdate) SetContent(s string) *KnowledgeBaseUpdate {
	kbu.mutation.SetContent(s)
	return kbu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (kbu *KnowledgeBaseUpdate) SetNillableContent(s *string) *KnowledgeBaseUpdate {
	if s != nil {
		kbu.SetContent(*s)
	}
	return kbu
}

// SetTags sets the "tags" field.
func (kbu *KnowledgeBaseUpdate) SetTags(s []string) *KnowledgeBaseUpdate {
	kbu.mutation.SetTags(s)
	return kbu
}

// AppendTags appends s to the "tags" field.
func (kbu *KnowledgeBaseUpdate) AppendTags(s []string) *KnowledgeBaseUpdate {
	kbu.mutation.AppendTags(s)
	return kbu
}

// ClearTags clears the value of the "tags" field.
func (kbu *KnowledgeBaseUpdate) ClearTags() *KnowledgeBaseUpdate {
	kbu.mutation.ClearTags()
	return kbu
}

// SetMetadata sets the "metadata" field.
func (kbu *KnowledgeBaseUpdate) SetMetadata(m map[string]interface{}) *KnowledgeBaseUpdate {
	kbu.mutation.SetMetadata(m)
	return kbu
}

// ClearMetadata clears the value of the "metadata" field.
func (kbu *KnowledgeBaseUpdate) ClearMetadata() *KnowledgeBaseUpdate {
	kbu.mutation.ClearMetadata()
	return kbu
}

// SetActive sets the "active" field.
func (kbu *KnowledgeBaseUpdate) SetActive(b bool) *KnowledgeBaseUpdate {
	kbu.mutation.SetActive(b)
	return kbu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (kbu *KnowledgeBaseUpdate) SetNillableActive(b *bool) *KnowledgeBaseUpdate {
	if b != nil {
		kbu.SetActive(*b)
	}
	return kbu
}

// SetPriority sets the "priority" field.
func (kbu *KnowledgeBaseUpdate) SetPriority(i int) *KnowledgeBaseUpdate {
	kbu.mutation.ResetPriority()
	kbu.mutation.SetPriority(i)
	return kbu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (kbu *KnowledgeBaseUpdate) SetNillablePriority(i *int) *KnowledgeBaseUpdate {
	if i != nil {
		kbu.SetPriority(*i)
	}
	return kbu
}

// AddPriority adds i to the "priority" field.
func (kbu *KnowledgeBaseUpdate) AddPriority(i int) *KnowledgeBaseUpdate {
	kbu.mutation.AddPriority(i)
	return kbu
}

// SetCreatedAt sets the "created_at" field.
func (kbu *KnowledgeBaseUpdate) SetCreatedAt(t time.Time) *KnowledgeBaseUpdate {
	kbu.mutation.SetCreatedAt(t)
	return kbu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kbu *KnowledgeBaseUpdate) SetNillableCreatedAt(t *time.Time) *KnowledgeBaseUpdate {
	if t != nil {
		kbu.SetCreatedAt(*t)
	}
	return kbu
}

// SetUpdatedAt sets the "updated_at" field.
func (kbu *KnowledgeBaseUpdate) SetUpdatedAt(t time.Time) *KnowledgeBaseUpdate {
	kbu.mutation.SetUpdatedAt(t)
	return kbu
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (kbu *KnowledgeBaseUpdate) SetClinicID(id uuid.UUID) *KnowledgeBaseUpdate {
	kbu.mutation.SetClinicID(id)
	return kbu
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (kbu *KnowledgeBaseUpdate) SetNillableClinicID(id *uuid.UUID) *KnowledgeBaseUpdate {
	if id != nil {
		kbu = kbu.SetClinicID(*id)
	}
	return kbu
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (kbu *KnowledgeBaseUpdate) SetClinic(c *Clinic) *KnowledgeBaseUpdate {
	return kbu.SetClinicID(c.ID)
}

// Mutation returns the KnowledgeBaseMutation object of the builder.
func (kbu *KnowledgeBaseUpdate) Mutation() *KnowledgeBaseMutation {
	return kbu.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (kbu *KnowledgeBaseUpdate) ClearClinic() *KnowledgeBaseUpdate {
	kbu.mutation.ClearClinic()
	return kbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kbu *KnowledgeBaseUpdate) Save(ctx context.Context) (int, error) {
	kbu.defaults()
	return withHooks(ctx, kbu.sqlSave, kbu.mutation, kbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kbu *KnowledgeBaseUpdate) SaveX(ctx context.Context) int {
	affected, err := kbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kbu *KnowledgeBaseUpdate) Exec(ctx context.Context) error {
	_, err := kbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kbu *KnowledgeBaseUpdate) ExecX(ctx context.Context) {
	if err := kbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kbu *KnowledgeBaseUpdate) defaults() {
	if _, ok := kbu.mutation.UpdatedAt(); !ok {
		v := knowledgebase.UpdateDefaultUpdatedAt()
		kbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kbu *KnowledgeBaseUpdate) check() error {
	if v, ok := kbu.mutation.Category(); ok {
		if err := knowledgebase.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "KnowledgeBase.category": %w`, err)}
		}
	}
	return nil
}

func (kbu *KnowledgeBaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := kbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(knowledgebase.Table, knowledgebase.Columns, sqlgraph.NewFieldSpec(knowledgebase.FieldID, field.TypeUUID))
	if ps := kbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kbu.mutation.Title(); ok {
		_spec.SetField(knowledgebase.FieldTitle, field.TypeString, value)
	}
	if value, ok := kbu.mutation.Category(); ok {
		_spec.SetField(knowledgebase.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := kbu.mutation.Content(); ok {
		_spec.SetField(knowledgebase.FieldContent, field.TypeString, value)
	}
	if value, ok := kbu.mutation.Tags(); ok {
		_spec.SetField(knowledgebase.FieldTags, field.TypeJSON, value)
	}
	if value, ok := kbu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, knowledgebase.FieldTags, value)
		})
	}
	if kbu.mutation.TagsCleared() {
		_spec.ClearField(knowledgebase.FieldTags, field.TypeJSON)
	}
	if value, ok := kbu.mutation.Metadata(); ok {
		_spec.SetField(knowledgebase.FieldMetadata, field.TypeJSON, value)
	}
	if kbu.mutation.MetadataCleared() {
		_spec.ClearField(knowledgebase.FieldMetadata, field.TypeJSON)
	}
	if value, ok := kbu.mutation.Active(); ok {
		_spec.SetField(knowledgebase.FieldActive, field.TypeBool, value)
	}
	if value, ok := kbu.mutation.Priority(); ok {
		_spec.SetField(knowledgebase.FieldPriority, field.TypeInt, value)
	}
	if value, ok := kbu.mutation.AddedPriority(); ok {
		_spec.AddField(knowledgebase.FieldPriority, field.TypeInt, value)
	}
	if value, ok := kbu.mutation.CreatedAt(); ok {
		_spec.SetField(knowledgebase.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := kbu.mutation.UpdatedAt(); ok {
		_spec.SetField(knowledgebase.FieldUpdatedAt, field.TypeTime, value)
	}
	if kbu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   knowledgebase.ClinicTable,
			Columns: []string{knowledgebase.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kbu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   knowledgebase.ClinicTable,
			Columns: []string{knowledgebase.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{knowledgebase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kbu.mutation.done = true
	return n, nil
}

// KnowledgeBaseUpdateOne is the builder for updating a single KnowledgeBase entity.
type KnowledgeBaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KnowledgeBaseMutation
}

// SetTitle sets the "title" field.
func (kbuo *KnowledgeBaseUpdateOne) SetTitle(s string) *KnowledgeBaseUpdateOne {
	kbuo.mutation.SetTitle(s)
	return kbuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kbuo *KnowledgeBaseUpdateOne) SetNillableTitle(s *string) *KnowledgeBaseUpdateOne {
	if s != nil {
		kbuo.SetTitle(*s)
	}
	return kbuo
}

// SetCategory sets the "category" field.
func (kbuo *KnowledgeBaseUpdateOne) SetCategory(k knowledgebase.Category) *KnowledgeBaseUpdateOne {
	kbuo.mutation.SetCategory(k)
	return kbuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (kbuo *KnowledgeBaseUpdateOne) SetNillableCategory(k *knowledgebase.Category) *KnowledgeBaseUpdateOne {
	if k != nil {
		kbuo.SetCategory(*k)
	}
	return kbuo
}

// SetContent sets the "content" field.
func (kbuo *KnowledgeBaseUpdateOne) SetContent(s string) *KnowledgeBaseUpdateOne {
	kbuo.mutation.SetContent(s)
	return kbuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (kbuo *KnowledgeBaseUpdateOne) SetNillableContent(s *string) *KnowledgeBaseUpdateOne {
	if s != nil {
		kbuo.SetContent(*s)
	}
	return kbuo
}

// SetTags sets the "tags" field.
func (kbuo *KnowledgeBaseUpdateOne) SetTags(s []string) *KnowledgeBaseUpdateOne {
	kbuo.mutation.SetTags(s)
	return kbuo
}

// AppendTags appends s to the "tags" field.
func (kbuo *KnowledgeBaseUpdateOne) AppendTags(s []string) *KnowledgeBaseUpdateOne {
	kbuo.mutation.AppendTags(s)
	return kbuo
}

// ClearTags clears the value of the "tags" field.
func (kbuo *KnowledgeBaseUpdateOne) ClearTags() *KnowledgeBaseUpdateOne {
	kbuo.mutation.ClearTags()
	return kbuo
}

// SetMetadata sets the "metadata" field.
func (kbuo *KnowledgeBaseUpdateOne) SetMetadata(m map[string]interface{}) *KnowledgeBaseUpdateOne {
	kbuo.mutation.SetMetadata(m)
	return kbuo
}

// ClearMetadata clears the value of the "metadata" field.
func (kbuo *KnowledgeBaseUpdateOne) ClearMetadata() *KnowledgeBaseUpdateOne {
	kbuo.mutation.ClearMetadata()
	return kbuo
}

// SetActive sets the "active" field.
func (kbuo *KnowledgeBaseUpdateOne) SetActive(b bool) *KnowledgeBaseUpdateOne {
	kbuo.mutation.SetActive(b)
	return kbuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (kbuo *KnowledgeBaseUpdateOne) SetNillableActive(b *bool) *KnowledgeBaseUpdateOne {
	if b != nil {
		kbuo.SetActive(*b)
	}
	return kbuo
}

// SetPriority sets the "priority" field.
func (kbuo *KnowledgeBaseUpdateOne) SetPriority(i int) *KnowledgeBaseUpdateOne {
	kbuo.mutation.ResetPriority()
	kbuo.mutation.SetPriority(i)
	return kbuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (kbuo *KnowledgeBaseUpdateOne) SetNillablePriority(i *int) *KnowledgeBaseUpdateOne {
	if i != nil {
		kbuo.SetPriority(*i)
	}
	return kbuo
}

// AddPriority adds i to the "priority" field.
func (kbuo *KnowledgeBaseUpdateOne) AddPriority(i int) *KnowledgeBaseUpdateOne {
	kbuo.mutation.AddPriority(i)
	return kbuo
}

// SetCreatedAt sets the "created_at" field.
func (kbuo *KnowledgeBaseUpdateOne) SetCreatedAt(t time.Time) *KnowledgeBaseUpdateOne {
	kbuo.mutation.SetCreatedAt(t)
	return kbuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kbuo *KnowledgeBaseUpdateOne) SetNillableCreatedAt(t *time.Time) *KnowledgeBaseUpdateOne {
	if t != nil {
		kbuo.SetCreatedAt(*t)
	}
	return kbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (kbuo *KnowledgeBaseUpdateOne) SetUpdatedAt(t time.Time) *KnowledgeBaseUpdateOne {
	kbuo.mutation.SetUpdatedAt(t)
	return kbuo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (kbuo *KnowledgeBaseUpdateOne) SetClinicID(id uuid.UUID) *KnowledgeBaseUpdateOne {
	kbuo.mutation.SetClinicID(id)
	return kbuo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (kbuo *KnowledgeBaseUpdateOne) SetNillableClinicID(id *uuid.UUID) *KnowledgeBaseUpdateOne {
	if id != nil {
		kbuo = kbuo.SetClinicID(*id)
	}
	return kbuo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (kbuo *KnowledgeBaseUpdateOne) SetClinic(c *Clinic) *KnowledgeBaseUpdateOne {
	return kbuo.SetClinicID(c.ID)
}

// Mutation returns the KnowledgeBaseMutation object of the builder.
func (kbuo *KnowledgeBaseUpdateOne) Mutation() *KnowledgeBaseMutation {
	return kbuo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (kbuo *KnowledgeBaseUpdateOne) ClearClinic() *KnowledgeBaseUpdateOne {
	kbuo.mutation.ClearClinic()
	return kbuo
}

// Where appends a list predicates to the KnowledgeBaseUpdate builder.
func (kbuo *KnowledgeBaseUpdateOne) Where(ps ...predicate.KnowledgeBase) *KnowledgeBaseUpdateOne {
	kbuo.mutation.Where(ps...)
	return kbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kbuo *KnowledgeBaseUpdateOne) Select(field string, fields ...string) *KnowledgeBaseUpdateOne {
	kbuo.fields = append([]string{field}, fields...)
	return kbuo
}

// Save executes the query and returns the updated KnowledgeBase entity.
func (kbuo *KnowledgeBaseUpdateOne) Save(ctx context.Context) (*KnowledgeBase, error) {
	kbuo.defaults()
	return withHooks(ctx, kbuo.sqlSave, kbuo.mutation, kbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kbuo *KnowledgeBaseUpdateOne) SaveX(ctx context.Context) *KnowledgeBase {
	node, err := kbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kbuo *KnowledgeBaseUpdateOne) Exec(ctx context.Context) error {
	_, err := kbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kbuo *KnowledgeBaseUpdateOne) ExecX(ctx context.Context) {
	if err := kbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kbuo *KnowledgeBaseUpdateOne) defaults() {
	if _, ok := kbuo.mutation.UpdatedAt(); !ok {
		v := knowledgebase.UpdateDefaultUpdatedAt()
		kbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kbuo *KnowledgeBaseUpdateOne) check() error {
	if v, ok := kbuo.mutation.Category(); ok {
		if err := knowledgebase.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "KnowledgeBase.category": %w`, err)}
		}
	}
	return nil
}

func (kbuo *KnowledgeBaseUpdateOne) sqlSave(ctx context.Context) (_node *KnowledgeBase, err error) {
	if err := kbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(knowledgebase.Table, knowledgebase.Columns, sqlgraph.NewFieldSpec(knowledgebase.FieldID, field.TypeUUID))
	id, ok := kbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "KnowledgeBase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, knowledgebase.FieldID)
		for _, f := range fields {
			if !knowledgebase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != knowledgebase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kbuo.mutation.Title(); ok {
		_spec.SetField(knowledgebase.FieldTitle, field.TypeString, value)
	}
	if value, ok := kbuo.mutation.Category(); ok {
		_spec.SetField(knowledgebase.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := kbuo.mutation.Content(); ok {
		_spec.SetField(knowledgebase.FieldContent, field.TypeString, value)
	}
	if value, ok := kbuo.mutation.Tags(); ok {
		_spec.SetField(knowledgebase.FieldTags, field.TypeJSON, value)
	}
	if value, ok := kbuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, knowledgebase.FieldTags, value)
		})
	}
	if kbuo.mutation.TagsCleared() {
		_spec.ClearField(knowledgebase.FieldTags, field.TypeJSON)
	}
	if value, ok := kbuo.mutation.Metadata(); ok {
		_spec.SetField(knowledgebase.FieldMetadata, field.TypeJSON, value)
	}
	if kbuo.mutation.MetadataCleared() {
		_spec.ClearField(knowledgebase.FieldMetadata, field.TypeJSON)
	}
	if value, ok := kbuo.mutation.Active(); ok {
		_spec.SetField(knowledgebase.FieldActive, field.TypeBool, value)
	}
	if value, ok := kbuo.mutation.Priority(); ok {
		_spec.SetField(knowledgebase.FieldPriority, field.TypeInt, value)
	}
	if value, ok := kbuo.mutation.AddedPriority(); ok {
		_spec.AddField(knowledgebase.FieldPriority, field.TypeInt, value)
	}
	if value, ok := kbuo.mutation.CreatedAt(); ok {
		_spec.SetField(knowledgebase.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := kbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(knowledgebase.FieldUpdatedAt, field.TypeTime, value)
	}
	if kbuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   knowledgebase.ClinicTable,
			Columns: []string{knowledgebase.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kbuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   knowledgebase.ClinicTable,
			Columns: []string{knowledgebase.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KnowledgeBase{config: kbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{knowledgebase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kbuo.mutation.done = true
	return _node, nil
}
