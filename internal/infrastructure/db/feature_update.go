// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/feature"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
)

// FeatureUpdate is the builder for updating Feature entities.
type FeatureUpdate struct {
	config
	hooks    []Hook
	mutation *FeatureMutation
}

// Where appends a list predicates to the FeatureUpdate builder.
func (fu *FeatureUpdate) Where(ps ...predicate.Feature) *FeatureUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FeatureUpdate) SetName(s string) *FeatureUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableName(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetDisplayName sets the "display_name" field.
func (fu *FeatureUpdate) SetDisplayName(s string) *FeatureUpdate {
	fu.mutation.SetDisplayName(s)
	return fu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableDisplayName(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetDisplayName(*s)
	}
	return fu
}

// SetDescription sets the "description" field.
func (fu *FeatureUpdate) SetDescription(s string) *FeatureUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableDescription(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// ClearDescription clears the value of the "description" field.
func (fu *FeatureUpdate) ClearDescription() *FeatureUpdate {
	fu.mutation.ClearDescription()
	return fu
}

// SetCategory sets the "category" field.
func (fu *FeatureUpdate) SetCategory(f feature.Category) *FeatureUpdate {
	fu.mutation.SetCategory(f)
	return fu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableCategory(f *feature.Category) *FeatureUpdate {
	if f != nil {
		fu.SetCategory(*f)
	}
	return fu
}

// SetMonthlyPrice sets the "monthly_price" field.
func (fu *FeatureUpdate) SetMonthlyPrice(f float64) *FeatureUpdate {
	fu.mutation.ResetMonthlyPrice()
	fu.mutation.SetMonthlyPrice(f)
	return fu
}

// SetNillableMonthlyPrice sets the "monthly_price" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableMonthlyPrice(f *float64) *FeatureUpdate {
	if f != nil {
		fu.SetMonthlyPrice(*f)
	}
	return fu
}

// AddMonthlyPrice adds f to the "monthly_price" field.
func (fu *FeatureUpdate) AddMonthlyPrice(f float64) *FeatureUpdate {
	fu.mutation.AddMonthlyPrice(f)
	return fu
}

// SetActive sets the "active" field.
func (fu *FeatureUpdate) SetActive(b bool) *FeatureUpdate {
	fu.mutation.SetActive(b)
	return fu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableActive(b *bool) *FeatureUpdate {
	if b != nil {
		fu.SetActive(*b)
	}
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FeatureUpdate) SetCreatedAt(t time.Time) *FeatureUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableCreatedAt(t *time.Time) *FeatureUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// Mutation returns the FeatureMutation object of the builder.
func (fu *FeatureUpdate) Mutation() *FeatureMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeatureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeatureUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeatureUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FeatureUpdate) check() error {
	if v, ok := fu.mutation.Category(); ok {
		if err := feature.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "Feature.category": %w`, err)}
		}
	}
	return nil
}

func (fu *FeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feature.Table, feature.Columns, sqlgraph.NewFieldSpec(feature.FieldID, field.TypeUUID))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(feature.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.DisplayName(); ok {
		_spec.SetField(feature.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(feature.FieldDescription, field.TypeString, value)
	}
	if fu.mutation.DescriptionCleared() {
		_spec.ClearField(feature.FieldDescription, field.TypeString)
	}
	if value, ok := fu.mutation.Category(); ok {
		_spec.SetField(feature.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := fu.mutation.MonthlyPrice(); ok {
		_spec.SetField(feature.FieldMonthlyPrice, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedMonthlyPrice(); ok {
		_spec.AddField(feature.FieldMonthlyPrice, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.Active(); ok {
		_spec.SetField(feature.FieldActive, field.TypeBool, value)
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(feature.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeatureUpdateOne is the builder for updating a single Feature entity.
type FeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeatureMutation
}

// SetName sets the "name" field.
func (fuo *FeatureUpdateOne) SetName(s string) *FeatureUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableName(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetDisplayName sets the "display_name" field.
func (fuo *FeatureUpdateOne) SetDisplayName(s string) *FeatureUpdateOne {
	fuo.mutation.SetDisplayName(s)
	return fuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableDisplayName(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetDisplayName(*s)
	}
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FeatureUpdateOne) SetDescription(s string) *FeatureUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableDescription(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// ClearDescription clears the value of the "description" field.
func (fuo *FeatureUpdateOne) ClearDescription() *FeatureUpdateOne {
	fuo.mutation.ClearDescription()
	return fuo
}

// SetCategory sets the "category" field.
func (fuo *FeatureUpdateOne) SetCategory(f feature.Category) *FeatureUpdateOne {
	fuo.mutation.SetCategory(f)
	return fuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableCategory(f *feature.Category) *FeatureUpdateOne {
	if f != nil {
		fuo.SetCategory(*f)
	}
	return fuo
}

// SetMonthlyPrice sets the "monthly_price" field.
func (fuo *FeatureUpdateOne) SetMonthlyPrice(f float64) *FeatureUpdateOne {
	fuo.mutation.ResetMonthlyPrice()
	fuo.mutation.SetMonthlyPrice(f)
	return fuo
}

// SetNillableMonthlyPrice sets the "monthly_price" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableMonthlyPrice(f *float64) *FeatureUpdateOne {
	if f != nil {
		fuo.SetMonthlyPrice(*f)
	}
	return fuo
}

// AddMonthlyPrice adds f to the "monthly_price" field.
func (fuo *FeatureUpdateOne) AddMonthlyPrice(f float64) *FeatureUpdateOne {
	fuo.mutation.AddMonthlyPrice(f)
	return fuo
}

// SetActive sets the "active" field.
func (fuo *FeatureUpdateOne) SetActive(b bool) *FeatureUpdateOne {
	fuo.mutation.SetActive(b)
	return fuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableActive(b *bool) *FeatureUpdateOne {
	if b != nil {
		fuo.SetActive(*b)
	}
	return fuo
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FeatureUpdateOne) SetCreatedAt(t time.Time) *FeatureUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableCreatedAt(t *time.Time) *FeatureUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// Mutation returns the FeatureMutation object of the builder.
func (fuo *FeatureUpdateOne) Mutation() *FeatureMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FeatureUpdate builder.
func (fuo *FeatureUpdateOne) Where(ps ...predicate.Feature) *FeatureUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeatureUpdateOne) Select(field string, fields ...string) *FeatureUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feature entity.
func (fuo *FeatureUpdateOne) Save(ctx context.Context) (*Feature, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeatureUpdateOne) SaveX(ctx context.Context) *Feature {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeatureUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FeatureUpdateOne) check() error {
	if v, ok := fuo.mutation.Category(); ok {
		if err := feature.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "Feature.category": %w`, err)}
		}
	}
	return nil
}

func (fuo *FeatureUpdateOne) sqlSave(ctx context.Context) (_node *Feature, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feature.Table, feature.Columns, sqlgraph.NewFieldSpec(feature.FieldID, field.TypeUUID))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Feature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feature.FieldID)
		for _, f := range fields {
			if !feature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != feature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(feature.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.DisplayName(); ok {
		_spec.SetField(feature.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(feature.FieldDescription, field.TypeString, value)
	}
	if fuo.mutation.DescriptionCleared() {
		_spec.ClearField(feature.FieldDescription, field.TypeString)
	}
	if value, ok := fuo.mutation.Category(); ok {
		_spec.SetField(feature.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := fuo.mutation.MonthlyPrice(); ok {
		_spec.SetField(feature.FieldMonthlyPrice, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedMonthlyPrice(); ok {
		_spec.AddField(feature.FieldMonthlyPrice, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.Active(); ok {
		_spec.SetField(feature.FieldActive, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(feature.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Feature{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
