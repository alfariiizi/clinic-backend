// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/queueentry"
	"github.com/google/uuid"
)

// QueueEntry is the model entity for the QueueEntry schema.
type QueueEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ClinicID holds the value of the "clinic_id" field.
	ClinicID string `json:"clinic_id,omitempty"`
	// PatientID holds the value of the "patient_id" field.
	PatientID string `json:"patient_id,omitempty"`
	// DoctorID holds the value of the "doctor_id" field.
	DoctorID string `json:"doctor_id,omitempty"`
	// ServiceID holds the value of the "service_id" field.
	ServiceID string `json:"service_id,omitempty"`
	// QueueNumber holds the value of the "queue_number" field.
	QueueNumber int `json:"queue_number,omitempty"`
	// Status holds the value of the "status" field.
	Status queueentry.Status `json:"status,omitempty"`
	// EstimatedTime holds the value of the "estimated_time" field.
	EstimatedTime time.Time `json:"estimated_time,omitempty"`
	// CalledAt holds the value of the "called_at" field.
	CalledAt time.Time `json:"called_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QueueEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case queueentry.FieldQueueNumber:
			values[i] = new(sql.NullInt64)
		case queueentry.FieldClinicID, queueentry.FieldPatientID, queueentry.FieldDoctorID, queueentry.FieldServiceID, queueentry.FieldStatus, queueentry.FieldNotes:
			values[i] = new(sql.NullString)
		case queueentry.FieldEstimatedTime, queueentry.FieldCalledAt, queueentry.FieldCompletedAt, queueentry.FieldCreatedAt, queueentry.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case queueentry.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QueueEntry fields.
func (qe *QueueEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case queueentry.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				qe.ID = *value
			}
		case queueentry.FieldClinicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_id", values[i])
			} else if value.Valid {
				qe.ClinicID = value.String
			}
		case queueentry.FieldPatientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_id", values[i])
			} else if value.Valid {
				qe.PatientID = value.String
			}
		case queueentry.FieldDoctorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field doctor_id", values[i])
			} else if value.Valid {
				qe.DoctorID = value.String
			}
		case queueentry.FieldServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_id", values[i])
			} else if value.Valid {
				qe.ServiceID = value.String
			}
		case queueentry.FieldQueueNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field queue_number", values[i])
			} else if value.Valid {
				qe.QueueNumber = int(value.Int64)
			}
		case queueentry.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				qe.Status = queueentry.Status(value.String)
			}
		case queueentry.FieldEstimatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_time", values[i])
			} else if value.Valid {
				qe.EstimatedTime = value.Time
			}
		case queueentry.FieldCalledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field called_at", values[i])
			} else if value.Valid {
				qe.CalledAt = value.Time
			}
		case queueentry.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				qe.CompletedAt = value.Time
			}
		case queueentry.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				qe.Notes = value.String
			}
		case queueentry.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				qe.CreatedAt = value.Time
			}
		case queueentry.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				qe.UpdatedAt = value.Time
			}
		default:
			qe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QueueEntry.
// This includes values selected through modifiers, order, etc.
func (qe *QueueEntry) Value(name string) (ent.Value, error) {
	return qe.selectValues.Get(name)
}

// Update returns a builder for updating this QueueEntry.
// Note that you need to call QueueEntry.Unwrap() before calling this method if this QueueEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (qe *QueueEntry) Update() *QueueEntryUpdateOne {
	return NewQueueEntryClient(qe.config).UpdateOne(qe)
}

// Unwrap unwraps the QueueEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qe *QueueEntry) Unwrap() *QueueEntry {
	_tx, ok := qe.config.driver.(*txDriver)
	if !ok {
		panic("db: QueueEntry is not a transactional entity")
	}
	qe.config.driver = _tx.drv
	return qe
}

// String implements the fmt.Stringer.
func (qe *QueueEntry) String() string {
	var builder strings.Builder
	builder.WriteString("QueueEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qe.ID))
	builder.WriteString("clinic_id=")
	builder.WriteString(qe.ClinicID)
	builder.WriteString(", ")
	builder.WriteString("patient_id=")
	builder.WriteString(qe.PatientID)
	builder.WriteString(", ")
	builder.WriteString("doctor_id=")
	builder.WriteString(qe.DoctorID)
	builder.WriteString(", ")
	builder.WriteString("service_id=")
	builder.WriteString(qe.ServiceID)
	builder.WriteString(", ")
	builder.WriteString("queue_number=")
	builder.WriteString(fmt.Sprintf("%v", qe.QueueNumber))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", qe.Status))
	builder.WriteString(", ")
	builder.WriteString("estimated_time=")
	builder.WriteString(qe.EstimatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("called_at=")
	builder.WriteString(qe.CalledAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(qe.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(qe.Notes)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(qe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(qe.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// QueueEntries is a parsable slice of QueueEntry.
type QueueEntries []*QueueEntry
