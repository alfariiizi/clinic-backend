// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/productcategory"
	"github.com/google/uuid"
)

// ProductCategoryUpdate is the builder for updating ProductCategory entities.
type ProductCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// Where appends a list predicates to the ProductCategoryUpdate builder.
func (pcu *ProductCategoryUpdate) Where(ps ...predicate.ProductCategory) *ProductCategoryUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetName sets the "name" field.
func (pcu *ProductCategoryUpdate) SetName(s string) *ProductCategoryUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableName(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetName(*s)
	}
	return pcu
}

// SetDescription sets the "description" field.
func (pcu *ProductCategoryUpdate) SetDescription(s string) *ProductCategoryUpdate {
	pcu.mutation.SetDescription(s)
	return pcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableDescription(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetDescription(*s)
	}
	return pcu
}

// ClearDescription clears the value of the "description" field.
func (pcu *ProductCategoryUpdate) ClearDescription() *ProductCategoryUpdate {
	pcu.mutation.ClearDescription()
	return pcu
}

// SetImageURL sets the "image_url" field.
func (pcu *ProductCategoryUpdate) SetImageURL(s string) *ProductCategoryUpdate {
	pcu.mutation.SetImageURL(s)
	return pcu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableImageURL(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetImageURL(*s)
	}
	return pcu
}

// ClearImageURL clears the value of the "image_url" field.
func (pcu *ProductCategoryUpdate) ClearImageURL() *ProductCategoryUpdate {
	pcu.mutation.ClearImageURL()
	return pcu
}

// SetActive sets the "active" field.
func (pcu *ProductCategoryUpdate) SetActive(b bool) *ProductCategoryUpdate {
	pcu.mutation.SetActive(b)
	return pcu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableActive(b *bool) *ProductCategoryUpdate {
	if b != nil {
		pcu.SetActive(*b)
	}
	return pcu
}

// SetSortOrder sets the "sort_order" field.
func (pcu *ProductCategoryUpdate) SetSortOrder(i int) *ProductCategoryUpdate {
	pcu.mutation.ResetSortOrder()
	pcu.mutation.SetSortOrder(i)
	return pcu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableSortOrder(i *int) *ProductCategoryUpdate {
	if i != nil {
		pcu.SetSortOrder(*i)
	}
	return pcu
}

// AddSortOrder adds i to the "sort_order" field.
func (pcu *ProductCategoryUpdate) AddSortOrder(i int) *ProductCategoryUpdate {
	pcu.mutation.AddSortOrder(i)
	return pcu
}

// SetCreatedAt sets the "created_at" field.
func (pcu *ProductCategoryUpdate) SetCreatedAt(t time.Time) *ProductCategoryUpdate {
	pcu.mutation.SetCreatedAt(t)
	return pcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableCreatedAt(t *time.Time) *ProductCategoryUpdate {
	if t != nil {
		pcu.SetCreatedAt(*t)
	}
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *ProductCategoryUpdate) SetUpdatedAt(t time.Time) *ProductCategoryUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (pcu *ProductCategoryUpdate) SetClinicID(id uuid.UUID) *ProductCategoryUpdate {
	pcu.mutation.SetClinicID(id)
	return pcu
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableClinicID(id *uuid.UUID) *ProductCategoryUpdate {
	if id != nil {
		pcu = pcu.SetClinicID(*id)
	}
	return pcu
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (pcu *ProductCategoryUpdate) SetClinic(c *Clinic) *ProductCategoryUpdate {
	return pcu.SetClinicID(c.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (pcu *ProductCategoryUpdate) AddProductIDs(ids ...uuid.UUID) *ProductCategoryUpdate {
	pcu.mutation.AddProductIDs(ids...)
	return pcu
}

// AddProducts adds the "products" edges to the Product entity.
func (pcu *ProductCategoryUpdate) AddProducts(p ...*Product) *ProductCategoryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddProductIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcu *ProductCategoryUpdate) Mutation() *ProductCategoryMutation {
	return pcu.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (pcu *ProductCategoryUpdate) ClearClinic() *ProductCategoryUpdate {
	pcu.mutation.ClearClinic()
	return pcu
}

// ClearProducts clears all "products" edges to the Product entity.
func (pcu *ProductCategoryUpdate) ClearProducts() *ProductCategoryUpdate {
	pcu.mutation.ClearProducts()
	return pcu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (pcu *ProductCategoryUpdate) RemoveProductIDs(ids ...uuid.UUID) *ProductCategoryUpdate {
	pcu.mutation.RemoveProductIDs(ids...)
	return pcu
}

// RemoveProducts removes "products" edges to Product entities.
func (pcu *ProductCategoryUpdate) RemoveProducts(p ...*Product) *ProductCategoryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProductCategoryUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProductCategoryUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *ProductCategoryUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := productcategory.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

func (pcu *ProductCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productcategory.Table, productcategory.Columns, sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeUUID))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.SetField(productcategory.FieldName, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Description(); ok {
		_spec.SetField(productcategory.FieldDescription, field.TypeString, value)
	}
	if pcu.mutation.DescriptionCleared() {
		_spec.ClearField(productcategory.FieldDescription, field.TypeString)
	}
	if value, ok := pcu.mutation.ImageURL(); ok {
		_spec.SetField(productcategory.FieldImageURL, field.TypeString, value)
	}
	if pcu.mutation.ImageURLCleared() {
		_spec.ClearField(productcategory.FieldImageURL, field.TypeString)
	}
	if value, ok := pcu.mutation.Active(); ok {
		_spec.SetField(productcategory.FieldActive, field.TypeBool, value)
	}
	if value, ok := pcu.mutation.SortOrder(); ok {
		_spec.SetField(productcategory.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pcu.mutation.AddedSortOrder(); ok {
		_spec.AddField(productcategory.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pcu.mutation.CreatedAt(); ok {
		_spec.SetField(productcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(productcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pcu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ClinicTable,
			Columns: []string{productcategory.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ClinicTable,
			Columns: []string{productcategory.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductsTable,
			Columns: []string{productcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !pcu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductsTable,
			Columns: []string{productcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductsTable,
			Columns: []string{productcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// ProductCategoryUpdateOne is the builder for updating a single ProductCategory entity.
type ProductCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// SetName sets the "name" field.
func (pcuo *ProductCategoryUpdateOne) SetName(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableName(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetName(*s)
	}
	return pcuo
}

// SetDescription sets the "description" field.
func (pcuo *ProductCategoryUpdateOne) SetDescription(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetDescription(s)
	return pcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableDescription(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetDescription(*s)
	}
	return pcuo
}

// ClearDescription clears the value of the "description" field.
func (pcuo *ProductCategoryUpdateOne) ClearDescription() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearDescription()
	return pcuo
}

// SetImageURL sets the "image_url" field.
func (pcuo *ProductCategoryUpdateOne) SetImageURL(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetImageURL(s)
	return pcuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableImageURL(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetImageURL(*s)
	}
	return pcuo
}

// ClearImageURL clears the value of the "image_url" field.
func (pcuo *ProductCategoryUpdateOne) ClearImageURL() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearImageURL()
	return pcuo
}

// SetActive sets the "active" field.
func (pcuo *ProductCategoryUpdateOne) SetActive(b bool) *ProductCategoryUpdateOne {
	pcuo.mutation.SetActive(b)
	return pcuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableActive(b *bool) *ProductCategoryUpdateOne {
	if b != nil {
		pcuo.SetActive(*b)
	}
	return pcuo
}

// SetSortOrder sets the "sort_order" field.
func (pcuo *ProductCategoryUpdateOne) SetSortOrder(i int) *ProductCategoryUpdateOne {
	pcuo.mutation.ResetSortOrder()
	pcuo.mutation.SetSortOrder(i)
	return pcuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableSortOrder(i *int) *ProductCategoryUpdateOne {
	if i != nil {
		pcuo.SetSortOrder(*i)
	}
	return pcuo
}

// AddSortOrder adds i to the "sort_order" field.
func (pcuo *ProductCategoryUpdateOne) AddSortOrder(i int) *ProductCategoryUpdateOne {
	pcuo.mutation.AddSortOrder(i)
	return pcuo
}

// SetCreatedAt sets the "created_at" field.
func (pcuo *ProductCategoryUpdateOne) SetCreatedAt(t time.Time) *ProductCategoryUpdateOne {
	pcuo.mutation.SetCreatedAt(t)
	return pcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductCategoryUpdateOne {
	if t != nil {
		pcuo.SetCreatedAt(*t)
	}
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *ProductCategoryUpdateOne) SetUpdatedAt(t time.Time) *ProductCategoryUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (pcuo *ProductCategoryUpdateOne) SetClinicID(id uuid.UUID) *ProductCategoryUpdateOne {
	pcuo.mutation.SetClinicID(id)
	return pcuo
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableClinicID(id *uuid.UUID) *ProductCategoryUpdateOne {
	if id != nil {
		pcuo = pcuo.SetClinicID(*id)
	}
	return pcuo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (pcuo *ProductCategoryUpdateOne) SetClinic(c *Clinic) *ProductCategoryUpdateOne {
	return pcuo.SetClinicID(c.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (pcuo *ProductCategoryUpdateOne) AddProductIDs(ids ...uuid.UUID) *ProductCategoryUpdateOne {
	pcuo.mutation.AddProductIDs(ids...)
	return pcuo
}

// AddProducts adds the "products" edges to the Product entity.
func (pcuo *ProductCategoryUpdateOne) AddProducts(p ...*Product) *ProductCategoryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddProductIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcuo *ProductCategoryUpdateOne) Mutation() *ProductCategoryMutation {
	return pcuo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (pcuo *ProductCategoryUpdateOne) ClearClinic() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearClinic()
	return pcuo
}

// ClearProducts clears all "products" edges to the Product entity.
func (pcuo *ProductCategoryUpdateOne) ClearProducts() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearProducts()
	return pcuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (pcuo *ProductCategoryUpdateOne) RemoveProductIDs(ids ...uuid.UUID) *ProductCategoryUpdateOne {
	pcuo.mutation.RemoveProductIDs(ids...)
	return pcuo
}

// RemoveProducts removes "products" edges to Product entities.
func (pcuo *ProductCategoryUpdateOne) RemoveProducts(p ...*Product) *ProductCategoryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the ProductCategoryUpdate builder.
func (pcuo *ProductCategoryUpdateOne) Where(ps ...predicate.ProductCategory) *ProductCategoryUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProductCategoryUpdateOne) Select(field string, fields ...string) *ProductCategoryUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) Save(ctx context.Context) (*ProductCategory, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) SaveX(ctx context.Context) *ProductCategory {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProductCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *ProductCategoryUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := productcategory.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

func (pcuo *ProductCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ProductCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(productcategory.Table, productcategory.Columns, sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeUUID))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ProductCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcategory.FieldID)
		for _, f := range fields {
			if !productcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != productcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.SetField(productcategory.FieldName, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Description(); ok {
		_spec.SetField(productcategory.FieldDescription, field.TypeString, value)
	}
	if pcuo.mutation.DescriptionCleared() {
		_spec.ClearField(productcategory.FieldDescription, field.TypeString)
	}
	if value, ok := pcuo.mutation.ImageURL(); ok {
		_spec.SetField(productcategory.FieldImageURL, field.TypeString, value)
	}
	if pcuo.mutation.ImageURLCleared() {
		_spec.ClearField(productcategory.FieldImageURL, field.TypeString)
	}
	if value, ok := pcuo.mutation.Active(); ok {
		_spec.SetField(productcategory.FieldActive, field.TypeBool, value)
	}
	if value, ok := pcuo.mutation.SortOrder(); ok {
		_spec.SetField(productcategory.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pcuo.mutation.AddedSortOrder(); ok {
		_spec.AddField(productcategory.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pcuo.mutation.CreatedAt(); ok {
		_spec.SetField(productcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pcuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ClinicTable,
			Columns: []string{productcategory.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ClinicTable,
			Columns: []string{productcategory.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductsTable,
			Columns: []string{productcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !pcuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductsTable,
			Columns: []string{productcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductsTable,
			Columns: []string{productcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductCategory{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
