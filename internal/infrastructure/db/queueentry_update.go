// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/queueentry"
)

// QueueEntryUpdate is the builder for updating QueueEntry entities.
type QueueEntryUpdate struct {
	config
	hooks    []Hook
	mutation *QueueEntryMutation
}

// Where appends a list predicates to the QueueEntryUpdate builder.
func (qeu *QueueEntryUpdate) Where(ps ...predicate.QueueEntry) *QueueEntryUpdate {
	qeu.mutation.Where(ps...)
	return qeu
}

// SetClinicID sets the "clinic_id" field.
func (qeu *QueueEntryUpdate) SetClinicID(s string) *QueueEntryUpdate {
	qeu.mutation.SetClinicID(s)
	return qeu
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableClinicID(s *string) *QueueEntryUpdate {
	if s != nil {
		qeu.SetClinicID(*s)
	}
	return qeu
}

// SetPatientID sets the "patient_id" field.
func (qeu *QueueEntryUpdate) SetPatientID(s string) *QueueEntryUpdate {
	qeu.mutation.SetPatientID(s)
	return qeu
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillablePatientID(s *string) *QueueEntryUpdate {
	if s != nil {
		qeu.SetPatientID(*s)
	}
	return qeu
}

// SetDoctorID sets the "doctor_id" field.
func (qeu *QueueEntryUpdate) SetDoctorID(s string) *QueueEntryUpdate {
	qeu.mutation.SetDoctorID(s)
	return qeu
}

// SetNillableDoctorID sets the "doctor_id" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableDoctorID(s *string) *QueueEntryUpdate {
	if s != nil {
		qeu.SetDoctorID(*s)
	}
	return qeu
}

// ClearDoctorID clears the value of the "doctor_id" field.
func (qeu *QueueEntryUpdate) ClearDoctorID() *QueueEntryUpdate {
	qeu.mutation.ClearDoctorID()
	return qeu
}

// SetServiceID sets the "service_id" field.
func (qeu *QueueEntryUpdate) SetServiceID(s string) *QueueEntryUpdate {
	qeu.mutation.SetServiceID(s)
	return qeu
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableServiceID(s *string) *QueueEntryUpdate {
	if s != nil {
		qeu.SetServiceID(*s)
	}
	return qeu
}

// ClearServiceID clears the value of the "service_id" field.
func (qeu *QueueEntryUpdate) ClearServiceID() *QueueEntryUpdate {
	qeu.mutation.ClearServiceID()
	return qeu
}

// SetQueueNumber sets the "queue_number" field.
func (qeu *QueueEntryUpdate) SetQueueNumber(i int) *QueueEntryUpdate {
	qeu.mutation.ResetQueueNumber()
	qeu.mutation.SetQueueNumber(i)
	return qeu
}

// SetNillableQueueNumber sets the "queue_number" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableQueueNumber(i *int) *QueueEntryUpdate {
	if i != nil {
		qeu.SetQueueNumber(*i)
	}
	return qeu
}

// AddQueueNumber adds i to the "queue_number" field.
func (qeu *QueueEntryUpdate) AddQueueNumber(i int) *QueueEntryUpdate {
	qeu.mutation.AddQueueNumber(i)
	return qeu
}

// SetStatus sets the "status" field.
func (qeu *QueueEntryUpdate) SetStatus(q queueentry.Status) *QueueEntryUpdate {
	qeu.mutation.SetStatus(q)
	return qeu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableStatus(q *queueentry.Status) *QueueEntryUpdate {
	if q != nil {
		qeu.SetStatus(*q)
	}
	return qeu
}

// SetEstimatedTime sets the "estimated_time" field.
func (qeu *QueueEntryUpdate) SetEstimatedTime(t time.Time) *QueueEntryUpdate {
	qeu.mutation.SetEstimatedTime(t)
	return qeu
}

// SetNillableEstimatedTime sets the "estimated_time" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableEstimatedTime(t *time.Time) *QueueEntryUpdate {
	if t != nil {
		qeu.SetEstimatedTime(*t)
	}
	return qeu
}

// ClearEstimatedTime clears the value of the "estimated_time" field.
func (qeu *QueueEntryUpdate) ClearEstimatedTime() *QueueEntryUpdate {
	qeu.mutation.ClearEstimatedTime()
	return qeu
}

// SetCalledAt sets the "called_at" field.
func (qeu *QueueEntryUpdate) SetCalledAt(t time.Time) *QueueEntryUpdate {
	qeu.mutation.SetCalledAt(t)
	return qeu
}

// SetNillableCalledAt sets the "called_at" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableCalledAt(t *time.Time) *QueueEntryUpdate {
	if t != nil {
		qeu.SetCalledAt(*t)
	}
	return qeu
}

// ClearCalledAt clears the value of the "called_at" field.
func (qeu *QueueEntryUpdate) ClearCalledAt() *QueueEntryUpdate {
	qeu.mutation.ClearCalledAt()
	return qeu
}

// SetCompletedAt sets the "completed_at" field.
func (qeu *QueueEntryUpdate) SetCompletedAt(t time.Time) *QueueEntryUpdate {
	qeu.mutation.SetCompletedAt(t)
	return qeu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableCompletedAt(t *time.Time) *QueueEntryUpdate {
	if t != nil {
		qeu.SetCompletedAt(*t)
	}
	return qeu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (qeu *QueueEntryUpdate) ClearCompletedAt() *QueueEntryUpdate {
	qeu.mutation.ClearCompletedAt()
	return qeu
}

// SetNotes sets the "notes" field.
func (qeu *QueueEntryUpdate) SetNotes(s string) *QueueEntryUpdate {
	qeu.mutation.SetNotes(s)
	return qeu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableNotes(s *string) *QueueEntryUpdate {
	if s != nil {
		qeu.SetNotes(*s)
	}
	return qeu
}

// ClearNotes clears the value of the "notes" field.
func (qeu *QueueEntryUpdate) ClearNotes() *QueueEntryUpdate {
	qeu.mutation.ClearNotes()
	return qeu
}

// SetCreatedAt sets the "created_at" field.
func (qeu *QueueEntryUpdate) SetCreatedAt(t time.Time) *QueueEntryUpdate {
	qeu.mutation.SetCreatedAt(t)
	return qeu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qeu *QueueEntryUpdate) SetNillableCreatedAt(t *time.Time) *QueueEntryUpdate {
	if t != nil {
		qeu.SetCreatedAt(*t)
	}
	return qeu
}

// SetUpdatedAt sets the "updated_at" field.
func (qeu *QueueEntryUpdate) SetUpdatedAt(t time.Time) *QueueEntryUpdate {
	qeu.mutation.SetUpdatedAt(t)
	return qeu
}

// Mutation returns the QueueEntryMutation object of the builder.
func (qeu *QueueEntryUpdate) Mutation() *QueueEntryMutation {
	return qeu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qeu *QueueEntryUpdate) Save(ctx context.Context) (int, error) {
	qeu.defaults()
	return withHooks(ctx, qeu.sqlSave, qeu.mutation, qeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qeu *QueueEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := qeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qeu *QueueEntryUpdate) Exec(ctx context.Context) error {
	_, err := qeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qeu *QueueEntryUpdate) ExecX(ctx context.Context) {
	if err := qeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qeu *QueueEntryUpdate) defaults() {
	if _, ok := qeu.mutation.UpdatedAt(); !ok {
		v := queueentry.UpdateDefaultUpdatedAt()
		qeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qeu *QueueEntryUpdate) check() error {
	if v, ok := qeu.mutation.Status(); ok {
		if err := queueentry.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "QueueEntry.status": %w`, err)}
		}
	}
	return nil
}

func (qeu *QueueEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(queueentry.Table, queueentry.Columns, sqlgraph.NewFieldSpec(queueentry.FieldID, field.TypeUUID))
	if ps := qeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qeu.mutation.ClinicID(); ok {
		_spec.SetField(queueentry.FieldClinicID, field.TypeString, value)
	}
	if value, ok := qeu.mutation.PatientID(); ok {
		_spec.SetField(queueentry.FieldPatientID, field.TypeString, value)
	}
	if value, ok := qeu.mutation.DoctorID(); ok {
		_spec.SetField(queueentry.FieldDoctorID, field.TypeString, value)
	}
	if qeu.mutation.DoctorIDCleared() {
		_spec.ClearField(queueentry.FieldDoctorID, field.TypeString)
	}
	if value, ok := qeu.mutation.ServiceID(); ok {
		_spec.SetField(queueentry.FieldServiceID, field.TypeString, value)
	}
	if qeu.mutation.ServiceIDCleared() {
		_spec.ClearField(queueentry.FieldServiceID, field.TypeString)
	}
	if value, ok := qeu.mutation.QueueNumber(); ok {
		_spec.SetField(queueentry.FieldQueueNumber, field.TypeInt, value)
	}
	if value, ok := qeu.mutation.AddedQueueNumber(); ok {
		_spec.AddField(queueentry.FieldQueueNumber, field.TypeInt, value)
	}
	if value, ok := qeu.mutation.Status(); ok {
		_spec.SetField(queueentry.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := qeu.mutation.EstimatedTime(); ok {
		_spec.SetField(queueentry.FieldEstimatedTime, field.TypeTime, value)
	}
	if qeu.mutation.EstimatedTimeCleared() {
		_spec.ClearField(queueentry.FieldEstimatedTime, field.TypeTime)
	}
	if value, ok := qeu.mutation.CalledAt(); ok {
		_spec.SetField(queueentry.FieldCalledAt, field.TypeTime, value)
	}
	if qeu.mutation.CalledAtCleared() {
		_spec.ClearField(queueentry.FieldCalledAt, field.TypeTime)
	}
	if value, ok := qeu.mutation.CompletedAt(); ok {
		_spec.SetField(queueentry.FieldCompletedAt, field.TypeTime, value)
	}
	if qeu.mutation.CompletedAtCleared() {
		_spec.ClearField(queueentry.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := qeu.mutation.Notes(); ok {
		_spec.SetField(queueentry.FieldNotes, field.TypeString, value)
	}
	if qeu.mutation.NotesCleared() {
		_spec.ClearField(queueentry.FieldNotes, field.TypeString)
	}
	if value, ok := qeu.mutation.CreatedAt(); ok {
		_spec.SetField(queueentry.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qeu.mutation.UpdatedAt(); ok {
		_spec.SetField(queueentry.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queueentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qeu.mutation.done = true
	return n, nil
}

// QueueEntryUpdateOne is the builder for updating a single QueueEntry entity.
type QueueEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QueueEntryMutation
}

// SetClinicID sets the "clinic_id" field.
func (qeuo *QueueEntryUpdateOne) SetClinicID(s string) *QueueEntryUpdateOne {
	qeuo.mutation.SetClinicID(s)
	return qeuo
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableClinicID(s *string) *QueueEntryUpdateOne {
	if s != nil {
		qeuo.SetClinicID(*s)
	}
	return qeuo
}

// SetPatientID sets the "patient_id" field.
func (qeuo *QueueEntryUpdateOne) SetPatientID(s string) *QueueEntryUpdateOne {
	qeuo.mutation.SetPatientID(s)
	return qeuo
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillablePatientID(s *string) *QueueEntryUpdateOne {
	if s != nil {
		qeuo.SetPatientID(*s)
	}
	return qeuo
}

// SetDoctorID sets the "doctor_id" field.
func (qeuo *QueueEntryUpdateOne) SetDoctorID(s string) *QueueEntryUpdateOne {
	qeuo.mutation.SetDoctorID(s)
	return qeuo
}

// SetNillableDoctorID sets the "doctor_id" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableDoctorID(s *string) *QueueEntryUpdateOne {
	if s != nil {
		qeuo.SetDoctorID(*s)
	}
	return qeuo
}

// ClearDoctorID clears the value of the "doctor_id" field.
func (qeuo *QueueEntryUpdateOne) ClearDoctorID() *QueueEntryUpdateOne {
	qeuo.mutation.ClearDoctorID()
	return qeuo
}

// SetServiceID sets the "service_id" field.
func (qeuo *QueueEntryUpdateOne) SetServiceID(s string) *QueueEntryUpdateOne {
	qeuo.mutation.SetServiceID(s)
	return qeuo
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableServiceID(s *string) *QueueEntryUpdateOne {
	if s != nil {
		qeuo.SetServiceID(*s)
	}
	return qeuo
}

// ClearServiceID clears the value of the "service_id" field.
func (qeuo *QueueEntryUpdateOne) ClearServiceID() *QueueEntryUpdateOne {
	qeuo.mutation.ClearServiceID()
	return qeuo
}

// SetQueueNumber sets the "queue_number" field.
func (qeuo *QueueEntryUpdateOne) SetQueueNumber(i int) *QueueEntryUpdateOne {
	qeuo.mutation.ResetQueueNumber()
	qeuo.mutation.SetQueueNumber(i)
	return qeuo
}

// SetNillableQueueNumber sets the "queue_number" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableQueueNumber(i *int) *QueueEntryUpdateOne {
	if i != nil {
		qeuo.SetQueueNumber(*i)
	}
	return qeuo
}

// AddQueueNumber adds i to the "queue_number" field.
func (qeuo *QueueEntryUpdateOne) AddQueueNumber(i int) *QueueEntryUpdateOne {
	qeuo.mutation.AddQueueNumber(i)
	return qeuo
}

// SetStatus sets the "status" field.
func (qeuo *QueueEntryUpdateOne) SetStatus(q queueentry.Status) *QueueEntryUpdateOne {
	qeuo.mutation.SetStatus(q)
	return qeuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableStatus(q *queueentry.Status) *QueueEntryUpdateOne {
	if q != nil {
		qeuo.SetStatus(*q)
	}
	return qeuo
}

// SetEstimatedTime sets the "estimated_time" field.
func (qeuo *QueueEntryUpdateOne) SetEstimatedTime(t time.Time) *QueueEntryUpdateOne {
	qeuo.mutation.SetEstimatedTime(t)
	return qeuo
}

// SetNillableEstimatedTime sets the "estimated_time" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableEstimatedTime(t *time.Time) *QueueEntryUpdateOne {
	if t != nil {
		qeuo.SetEstimatedTime(*t)
	}
	return qeuo
}

// ClearEstimatedTime clears the value of the "estimated_time" field.
func (qeuo *QueueEntryUpdateOne) ClearEstimatedTime() *QueueEntryUpdateOne {
	qeuo.mutation.ClearEstimatedTime()
	return qeuo
}

// SetCalledAt sets the "called_at" field.
func (qeuo *QueueEntryUpdateOne) SetCalledAt(t time.Time) *QueueEntryUpdateOne {
	qeuo.mutation.SetCalledAt(t)
	return qeuo
}

// SetNillableCalledAt sets the "called_at" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableCalledAt(t *time.Time) *QueueEntryUpdateOne {
	if t != nil {
		qeuo.SetCalledAt(*t)
	}
	return qeuo
}

// ClearCalledAt clears the value of the "called_at" field.
func (qeuo *QueueEntryUpdateOne) ClearCalledAt() *QueueEntryUpdateOne {
	qeuo.mutation.ClearCalledAt()
	return qeuo
}

// SetCompletedAt sets the "completed_at" field.
func (qeuo *QueueEntryUpdateOne) SetCompletedAt(t time.Time) *QueueEntryUpdateOne {
	qeuo.mutation.SetCompletedAt(t)
	return qeuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableCompletedAt(t *time.Time) *QueueEntryUpdateOne {
	if t != nil {
		qeuo.SetCompletedAt(*t)
	}
	return qeuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (qeuo *QueueEntryUpdateOne) ClearCompletedAt() *QueueEntryUpdateOne {
	qeuo.mutation.ClearCompletedAt()
	return qeuo
}

// SetNotes sets the "notes" field.
func (qeuo *QueueEntryUpdateOne) SetNotes(s string) *QueueEntryUpdateOne {
	qeuo.mutation.SetNotes(s)
	return qeuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableNotes(s *string) *QueueEntryUpdateOne {
	if s != nil {
		qeuo.SetNotes(*s)
	}
	return qeuo
}

// ClearNotes clears the value of the "notes" field.
func (qeuo *QueueEntryUpdateOne) ClearNotes() *QueueEntryUpdateOne {
	qeuo.mutation.ClearNotes()
	return qeuo
}

// SetCreatedAt sets the "created_at" field.
func (qeuo *QueueEntryUpdateOne) SetCreatedAt(t time.Time) *QueueEntryUpdateOne {
	qeuo.mutation.SetCreatedAt(t)
	return qeuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qeuo *QueueEntryUpdateOne) SetNillableCreatedAt(t *time.Time) *QueueEntryUpdateOne {
	if t != nil {
		qeuo.SetCreatedAt(*t)
	}
	return qeuo
}

// SetUpdatedAt sets the "updated_at" field.
func (qeuo *QueueEntryUpdateOne) SetUpdatedAt(t time.Time) *QueueEntryUpdateOne {
	qeuo.mutation.SetUpdatedAt(t)
	return qeuo
}

// Mutation returns the QueueEntryMutation object of the builder.
func (qeuo *QueueEntryUpdateOne) Mutation() *QueueEntryMutation {
	return qeuo.mutation
}

// Where appends a list predicates to the QueueEntryUpdate builder.
func (qeuo *QueueEntryUpdateOne) Where(ps ...predicate.QueueEntry) *QueueEntryUpdateOne {
	qeuo.mutation.Where(ps...)
	return qeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qeuo *QueueEntryUpdateOne) Select(field string, fields ...string) *QueueEntryUpdateOne {
	qeuo.fields = append([]string{field}, fields...)
	return qeuo
}

// Save executes the query and returns the updated QueueEntry entity.
func (qeuo *QueueEntryUpdateOne) Save(ctx context.Context) (*QueueEntry, error) {
	qeuo.defaults()
	return withHooks(ctx, qeuo.sqlSave, qeuo.mutation, qeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qeuo *QueueEntryUpdateOne) SaveX(ctx context.Context) *QueueEntry {
	node, err := qeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qeuo *QueueEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := qeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qeuo *QueueEntryUpdateOne) ExecX(ctx context.Context) {
	if err := qeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qeuo *QueueEntryUpdateOne) defaults() {
	if _, ok := qeuo.mutation.UpdatedAt(); !ok {
		v := queueentry.UpdateDefaultUpdatedAt()
		qeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qeuo *QueueEntryUpdateOne) check() error {
	if v, ok := qeuo.mutation.Status(); ok {
		if err := queueentry.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "QueueEntry.status": %w`, err)}
		}
	}
	return nil
}

func (qeuo *QueueEntryUpdateOne) sqlSave(ctx context.Context) (_node *QueueEntry, err error) {
	if err := qeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(queueentry.Table, queueentry.Columns, sqlgraph.NewFieldSpec(queueentry.FieldID, field.TypeUUID))
	id, ok := qeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "QueueEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, queueentry.FieldID)
		for _, f := range fields {
			if !queueentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != queueentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qeuo.mutation.ClinicID(); ok {
		_spec.SetField(queueentry.FieldClinicID, field.TypeString, value)
	}
	if value, ok := qeuo.mutation.PatientID(); ok {
		_spec.SetField(queueentry.FieldPatientID, field.TypeString, value)
	}
	if value, ok := qeuo.mutation.DoctorID(); ok {
		_spec.SetField(queueentry.FieldDoctorID, field.TypeString, value)
	}
	if qeuo.mutation.DoctorIDCleared() {
		_spec.ClearField(queueentry.FieldDoctorID, field.TypeString)
	}
	if value, ok := qeuo.mutation.ServiceID(); ok {
		_spec.SetField(queueentry.FieldServiceID, field.TypeString, value)
	}
	if qeuo.mutation.ServiceIDCleared() {
		_spec.ClearField(queueentry.FieldServiceID, field.TypeString)
	}
	if value, ok := qeuo.mutation.QueueNumber(); ok {
		_spec.SetField(queueentry.FieldQueueNumber, field.TypeInt, value)
	}
	if value, ok := qeuo.mutation.AddedQueueNumber(); ok {
		_spec.AddField(queueentry.FieldQueueNumber, field.TypeInt, value)
	}
	if value, ok := qeuo.mutation.Status(); ok {
		_spec.SetField(queueentry.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := qeuo.mutation.EstimatedTime(); ok {
		_spec.SetField(queueentry.FieldEstimatedTime, field.TypeTime, value)
	}
	if qeuo.mutation.EstimatedTimeCleared() {
		_spec.ClearField(queueentry.FieldEstimatedTime, field.TypeTime)
	}
	if value, ok := qeuo.mutation.CalledAt(); ok {
		_spec.SetField(queueentry.FieldCalledAt, field.TypeTime, value)
	}
	if qeuo.mutation.CalledAtCleared() {
		_spec.ClearField(queueentry.FieldCalledAt, field.TypeTime)
	}
	if value, ok := qeuo.mutation.CompletedAt(); ok {
		_spec.SetField(queueentry.FieldCompletedAt, field.TypeTime, value)
	}
	if qeuo.mutation.CompletedAtCleared() {
		_spec.ClearField(queueentry.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := qeuo.mutation.Notes(); ok {
		_spec.SetField(queueentry.FieldNotes, field.TypeString, value)
	}
	if qeuo.mutation.NotesCleared() {
		_spec.ClearField(queueentry.FieldNotes, field.TypeString)
	}
	if value, ok := qeuo.mutation.CreatedAt(); ok {
		_spec.SetField(queueentry.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(queueentry.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &QueueEntry{config: qeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queueentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qeuo.mutation.done = true
	return _node, nil
}
