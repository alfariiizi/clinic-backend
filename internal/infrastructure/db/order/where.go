// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// OrderNumber applies equality check predicate on the "order_number" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderNumber, v))
}

// Subtotal applies equality check predicate on the "subtotal" field. It's identical to SubtotalEQ.
func Subtotal(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSubtotal, v))
}

// TaxAmount applies equality check predicate on the "tax_amount" field. It's identical to TaxAmountEQ.
func TaxAmount(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTaxAmount, v))
}

// DiscountAmount applies equality check predicate on the "discount_amount" field. It's identical to DiscountAmountEQ.
func DiscountAmount(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDiscountAmount, v))
}

// ShippingCost applies equality check predicate on the "shipping_cost" field. It's identical to ShippingCostEQ.
func ShippingCost(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingCost, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCurrency, v))
}

// ExpectedDeliveryDate applies equality check predicate on the "expected_delivery_date" field. It's identical to ExpectedDeliveryDateEQ.
func ExpectedDeliveryDate(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldExpectedDeliveryDate, v))
}

// DeliveredAt applies equality check predicate on the "delivered_at" field. It's identical to DeliveredAtEQ.
func DeliveredAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDeliveredAt, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNotes, v))
}

// CancellationReason applies equality check predicate on the "cancellation_reason" field. It's identical to CancellationReasonEQ.
func CancellationReason(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCancellationReason, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrderNumberEQ applies the EQ predicate on the "order_number" field.
func OrderNumberEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderNumber, v))
}

// OrderNumberNEQ applies the NEQ predicate on the "order_number" field.
func OrderNumberNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderNumber, v))
}

// OrderNumberIn applies the In predicate on the "order_number" field.
func OrderNumberIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderNumber, vs...))
}

// OrderNumberNotIn applies the NotIn predicate on the "order_number" field.
func OrderNumberNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderNumber, vs...))
}

// OrderNumberGT applies the GT predicate on the "order_number" field.
func OrderNumberGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderNumber, v))
}

// OrderNumberGTE applies the GTE predicate on the "order_number" field.
func OrderNumberGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderNumber, v))
}

// OrderNumberLT applies the LT predicate on the "order_number" field.
func OrderNumberLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderNumber, v))
}

// OrderNumberLTE applies the LTE predicate on the "order_number" field.
func OrderNumberLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderNumber, v))
}

// OrderNumberContains applies the Contains predicate on the "order_number" field.
func OrderNumberContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldOrderNumber, v))
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "order_number" field.
func OrderNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldOrderNumber, v))
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "order_number" field.
func OrderNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldOrderNumber, v))
}

// OrderNumberEqualFold applies the EqualFold predicate on the "order_number" field.
func OrderNumberEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldOrderNumber, v))
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "order_number" field.
func OrderNumberContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldOrderNumber, v))
}

// OrderTypeEQ applies the EQ predicate on the "order_type" field.
func OrderTypeEQ(v OrderType) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderType, v))
}

// OrderTypeNEQ applies the NEQ predicate on the "order_type" field.
func OrderTypeNEQ(v OrderType) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderType, v))
}

// OrderTypeIn applies the In predicate on the "order_type" field.
func OrderTypeIn(vs ...OrderType) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderType, vs...))
}

// OrderTypeNotIn applies the NotIn predicate on the "order_type" field.
func OrderTypeNotIn(vs ...OrderType) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// SubtotalEQ applies the EQ predicate on the "subtotal" field.
func SubtotalEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSubtotal, v))
}

// SubtotalNEQ applies the NEQ predicate on the "subtotal" field.
func SubtotalNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldSubtotal, v))
}

// SubtotalIn applies the In predicate on the "subtotal" field.
func SubtotalIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldSubtotal, vs...))
}

// SubtotalNotIn applies the NotIn predicate on the "subtotal" field.
func SubtotalNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldSubtotal, vs...))
}

// SubtotalGT applies the GT predicate on the "subtotal" field.
func SubtotalGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldSubtotal, v))
}

// SubtotalGTE applies the GTE predicate on the "subtotal" field.
func SubtotalGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldSubtotal, v))
}

// SubtotalLT applies the LT predicate on the "subtotal" field.
func SubtotalLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldSubtotal, v))
}

// SubtotalLTE applies the LTE predicate on the "subtotal" field.
func SubtotalLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldSubtotal, v))
}

// TaxAmountEQ applies the EQ predicate on the "tax_amount" field.
func TaxAmountEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTaxAmount, v))
}

// TaxAmountNEQ applies the NEQ predicate on the "tax_amount" field.
func TaxAmountNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTaxAmount, v))
}

// TaxAmountIn applies the In predicate on the "tax_amount" field.
func TaxAmountIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTaxAmount, vs...))
}

// TaxAmountNotIn applies the NotIn predicate on the "tax_amount" field.
func TaxAmountNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTaxAmount, vs...))
}

// TaxAmountGT applies the GT predicate on the "tax_amount" field.
func TaxAmountGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTaxAmount, v))
}

// TaxAmountGTE applies the GTE predicate on the "tax_amount" field.
func TaxAmountGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTaxAmount, v))
}

// TaxAmountLT applies the LT predicate on the "tax_amount" field.
func TaxAmountLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTaxAmount, v))
}

// TaxAmountLTE applies the LTE predicate on the "tax_amount" field.
func TaxAmountLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTaxAmount, v))
}

// DiscountAmountEQ applies the EQ predicate on the "discount_amount" field.
func DiscountAmountEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDiscountAmount, v))
}

// DiscountAmountNEQ applies the NEQ predicate on the "discount_amount" field.
func DiscountAmountNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDiscountAmount, v))
}

// DiscountAmountIn applies the In predicate on the "discount_amount" field.
func DiscountAmountIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDiscountAmount, vs...))
}

// DiscountAmountNotIn applies the NotIn predicate on the "discount_amount" field.
func DiscountAmountNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDiscountAmount, vs...))
}

// DiscountAmountGT applies the GT predicate on the "discount_amount" field.
func DiscountAmountGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDiscountAmount, v))
}

// DiscountAmountGTE applies the GTE predicate on the "discount_amount" field.
func DiscountAmountGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDiscountAmount, v))
}

// DiscountAmountLT applies the LT predicate on the "discount_amount" field.
func DiscountAmountLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDiscountAmount, v))
}

// DiscountAmountLTE applies the LTE predicate on the "discount_amount" field.
func DiscountAmountLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDiscountAmount, v))
}

// ShippingCostEQ applies the EQ predicate on the "shipping_cost" field.
func ShippingCostEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingCost, v))
}

// ShippingCostNEQ applies the NEQ predicate on the "shipping_cost" field.
func ShippingCostNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldShippingCost, v))
}

// ShippingCostIn applies the In predicate on the "shipping_cost" field.
func ShippingCostIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldShippingCost, vs...))
}

// ShippingCostNotIn applies the NotIn predicate on the "shipping_cost" field.
func ShippingCostNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldShippingCost, vs...))
}

// ShippingCostGT applies the GT predicate on the "shipping_cost" field.
func ShippingCostGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldShippingCost, v))
}

// ShippingCostGTE applies the GTE predicate on the "shipping_cost" field.
func ShippingCostGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldShippingCost, v))
}

// ShippingCostLT applies the LT predicate on the "shipping_cost" field.
func ShippingCostLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldShippingCost, v))
}

// ShippingCostLTE applies the LTE predicate on the "shipping_cost" field.
func ShippingCostLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldShippingCost, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTotalAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldCurrency, v))
}

// PaymentStatusEQ applies the EQ predicate on the "payment_status" field.
func PaymentStatusEQ(v PaymentStatus) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentStatus, v))
}

// PaymentStatusNEQ applies the NEQ predicate on the "payment_status" field.
func PaymentStatusNEQ(v PaymentStatus) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPaymentStatus, v))
}

// PaymentStatusIn applies the In predicate on the "payment_status" field.
func PaymentStatusIn(vs ...PaymentStatus) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPaymentStatus, vs...))
}

// PaymentStatusNotIn applies the NotIn predicate on the "payment_status" field.
func PaymentStatusNotIn(vs ...PaymentStatus) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPaymentStatus, vs...))
}

// PaymentMethodEQ applies the EQ predicate on the "payment_method" field.
func PaymentMethodEQ(v PaymentMethod) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "payment_method" field.
func PaymentMethodNEQ(v PaymentMethod) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "payment_method" field.
func PaymentMethodIn(vs ...PaymentMethod) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "payment_method" field.
func PaymentMethodNotIn(vs ...PaymentMethod) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodIsNil applies the IsNil predicate on the "payment_method" field.
func PaymentMethodIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldPaymentMethod))
}

// PaymentMethodNotNil applies the NotNil predicate on the "payment_method" field.
func PaymentMethodNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldPaymentMethod))
}

// ShippingAddressIsNil applies the IsNil predicate on the "shipping_address" field.
func ShippingAddressIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldShippingAddress))
}

// ShippingAddressNotNil applies the NotNil predicate on the "shipping_address" field.
func ShippingAddressNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldShippingAddress))
}

// BillingAddressIsNil applies the IsNil predicate on the "billing_address" field.
func BillingAddressIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldBillingAddress))
}

// BillingAddressNotNil applies the NotNil predicate on the "billing_address" field.
func BillingAddressNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldBillingAddress))
}

// DeliveryMethodEQ applies the EQ predicate on the "delivery_method" field.
func DeliveryMethodEQ(v DeliveryMethod) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDeliveryMethod, v))
}

// DeliveryMethodNEQ applies the NEQ predicate on the "delivery_method" field.
func DeliveryMethodNEQ(v DeliveryMethod) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDeliveryMethod, v))
}

// DeliveryMethodIn applies the In predicate on the "delivery_method" field.
func DeliveryMethodIn(vs ...DeliveryMethod) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDeliveryMethod, vs...))
}

// DeliveryMethodNotIn applies the NotIn predicate on the "delivery_method" field.
func DeliveryMethodNotIn(vs ...DeliveryMethod) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDeliveryMethod, vs...))
}

// ExpectedDeliveryDateEQ applies the EQ predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldExpectedDeliveryDate, v))
}

// ExpectedDeliveryDateNEQ applies the NEQ predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldExpectedDeliveryDate, v))
}

// ExpectedDeliveryDateIn applies the In predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldExpectedDeliveryDate, vs...))
}

// ExpectedDeliveryDateNotIn applies the NotIn predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldExpectedDeliveryDate, vs...))
}

// ExpectedDeliveryDateGT applies the GT predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldExpectedDeliveryDate, v))
}

// ExpectedDeliveryDateGTE applies the GTE predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldExpectedDeliveryDate, v))
}

// ExpectedDeliveryDateLT applies the LT predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldExpectedDeliveryDate, v))
}

// ExpectedDeliveryDateLTE applies the LTE predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldExpectedDeliveryDate, v))
}

// ExpectedDeliveryDateIsNil applies the IsNil predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldExpectedDeliveryDate))
}

// ExpectedDeliveryDateNotNil applies the NotNil predicate on the "expected_delivery_date" field.
func ExpectedDeliveryDateNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldExpectedDeliveryDate))
}

// DeliveredAtEQ applies the EQ predicate on the "delivered_at" field.
func DeliveredAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDeliveredAt, v))
}

// DeliveredAtNEQ applies the NEQ predicate on the "delivered_at" field.
func DeliveredAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDeliveredAt, v))
}

// DeliveredAtIn applies the In predicate on the "delivered_at" field.
func DeliveredAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDeliveredAt, vs...))
}

// DeliveredAtNotIn applies the NotIn predicate on the "delivered_at" field.
func DeliveredAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDeliveredAt, vs...))
}

// DeliveredAtGT applies the GT predicate on the "delivered_at" field.
func DeliveredAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDeliveredAt, v))
}

// DeliveredAtGTE applies the GTE predicate on the "delivered_at" field.
func DeliveredAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDeliveredAt, v))
}

// DeliveredAtLT applies the LT predicate on the "delivered_at" field.
func DeliveredAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDeliveredAt, v))
}

// DeliveredAtLTE applies the LTE predicate on the "delivered_at" field.
func DeliveredAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDeliveredAt, v))
}

// DeliveredAtIsNil applies the IsNil predicate on the "delivered_at" field.
func DeliveredAtIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldDeliveredAt))
}

// DeliveredAtNotNil applies the NotNil predicate on the "delivered_at" field.
func DeliveredAtNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldDeliveredAt))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldNotes, v))
}

// CancellationReasonEQ applies the EQ predicate on the "cancellation_reason" field.
func CancellationReasonEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCancellationReason, v))
}

// CancellationReasonNEQ applies the NEQ predicate on the "cancellation_reason" field.
func CancellationReasonNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCancellationReason, v))
}

// CancellationReasonIn applies the In predicate on the "cancellation_reason" field.
func CancellationReasonIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCancellationReason, vs...))
}

// CancellationReasonNotIn applies the NotIn predicate on the "cancellation_reason" field.
func CancellationReasonNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCancellationReason, vs...))
}

// CancellationReasonGT applies the GT predicate on the "cancellation_reason" field.
func CancellationReasonGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCancellationReason, v))
}

// CancellationReasonGTE applies the GTE predicate on the "cancellation_reason" field.
func CancellationReasonGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCancellationReason, v))
}

// CancellationReasonLT applies the LT predicate on the "cancellation_reason" field.
func CancellationReasonLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCancellationReason, v))
}

// CancellationReasonLTE applies the LTE predicate on the "cancellation_reason" field.
func CancellationReasonLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCancellationReason, v))
}

// CancellationReasonContains applies the Contains predicate on the "cancellation_reason" field.
func CancellationReasonContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldCancellationReason, v))
}

// CancellationReasonHasPrefix applies the HasPrefix predicate on the "cancellation_reason" field.
func CancellationReasonHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldCancellationReason, v))
}

// CancellationReasonHasSuffix applies the HasSuffix predicate on the "cancellation_reason" field.
func CancellationReasonHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldCancellationReason, v))
}

// CancellationReasonIsNil applies the IsNil predicate on the "cancellation_reason" field.
func CancellationReasonIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldCancellationReason))
}

// CancellationReasonNotNil applies the NotNil predicate on the "cancellation_reason" field.
func CancellationReasonNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldCancellationReason))
}

// CancellationReasonEqualFold applies the EqualFold predicate on the "cancellation_reason" field.
func CancellationReasonEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldCancellationReason, v))
}

// CancellationReasonContainsFold applies the ContainsFold predicate on the "cancellation_reason" field.
func CancellationReasonContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldCancellationReason, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newOrderItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderStatusHistory applies the HasEdge predicate on the "order_status_history" edge.
func HasOrderStatusHistory() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusHistoryTable, OrderStatusHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderStatusHistoryWith applies the HasEdge predicate on the "order_status_history" edge with a given conditions (other predicates).
func HasOrderStatusHistoryWith(preds ...predicate.OrderStatusHistory) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newOrderStatusHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
