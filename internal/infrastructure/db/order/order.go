// Code generated by ent, DO NOT EDIT.

package order

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrderNumber holds the string denoting the order_number field in the database.
	FieldOrderNumber = "order_number"
	// FieldOrderType holds the string denoting the order_type field in the database.
	FieldOrderType = "order_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSubtotal holds the string denoting the subtotal field in the database.
	FieldSubtotal = "subtotal"
	// FieldTaxAmount holds the string denoting the tax_amount field in the database.
	FieldTaxAmount = "tax_amount"
	// FieldDiscountAmount holds the string denoting the discount_amount field in the database.
	FieldDiscountAmount = "discount_amount"
	// FieldShippingCost holds the string denoting the shipping_cost field in the database.
	FieldShippingCost = "shipping_cost"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldPaymentStatus holds the string denoting the payment_status field in the database.
	FieldPaymentStatus = "payment_status"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// FieldShippingAddress holds the string denoting the shipping_address field in the database.
	FieldShippingAddress = "shipping_address"
	// FieldBillingAddress holds the string denoting the billing_address field in the database.
	FieldBillingAddress = "billing_address"
	// FieldDeliveryMethod holds the string denoting the delivery_method field in the database.
	FieldDeliveryMethod = "delivery_method"
	// FieldExpectedDeliveryDate holds the string denoting the expected_delivery_date field in the database.
	FieldExpectedDeliveryDate = "expected_delivery_date"
	// FieldDeliveredAt holds the string denoting the delivered_at field in the database.
	FieldDeliveredAt = "delivered_at"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldCancellationReason holds the string denoting the cancellation_reason field in the database.
	FieldCancellationReason = "cancellation_reason"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"
	// EdgeOrderItems holds the string denoting the order_items edge name in mutations.
	EdgeOrderItems = "order_items"
	// EdgeOrderStatusHistory holds the string denoting the order_status_history edge name in mutations.
	EdgeOrderStatusHistory = "order_status_history"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "orders"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinics"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_orders"
	// PatientTable is the table that holds the patient relation/edge.
	PatientTable = "orders"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patients"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "patient_orders"
	// OrderItemsTable is the table that holds the order_items relation/edge.
	OrderItemsTable = "order_items"
	// OrderItemsInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	OrderItemsInverseTable = "order_items"
	// OrderItemsColumn is the table column denoting the order_items relation/edge.
	OrderItemsColumn = "order_order_items"
	// OrderStatusHistoryTable is the table that holds the order_status_history relation/edge.
	OrderStatusHistoryTable = "order_status_histories"
	// OrderStatusHistoryInverseTable is the table name for the OrderStatusHistory entity.
	// It exists in this package in order to avoid circular dependency with the "orderstatushistory" package.
	OrderStatusHistoryInverseTable = "order_status_histories"
	// OrderStatusHistoryColumn is the table column denoting the order_status_history relation/edge.
	OrderStatusHistoryColumn = "order_order_status_history"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldOrderNumber,
	FieldOrderType,
	FieldStatus,
	FieldSubtotal,
	FieldTaxAmount,
	FieldDiscountAmount,
	FieldShippingCost,
	FieldTotalAmount,
	FieldCurrency,
	FieldPaymentStatus,
	FieldPaymentMethod,
	FieldShippingAddress,
	FieldBillingAddress,
	FieldDeliveryMethod,
	FieldExpectedDeliveryDate,
	FieldDeliveredAt,
	FieldNotes,
	FieldCancellationReason,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "orders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"clinic_orders",
	"patient_orders",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSubtotal holds the default value on creation for the "subtotal" field.
	DefaultSubtotal float64
	// DefaultTaxAmount holds the default value on creation for the "tax_amount" field.
	DefaultTaxAmount float64
	// DefaultDiscountAmount holds the default value on creation for the "discount_amount" field.
	DefaultDiscountAmount float64
	// DefaultShippingCost holds the default value on creation for the "shipping_cost" field.
	DefaultShippingCost float64
	// DefaultTotalAmount holds the default value on creation for the "total_amount" field.
	DefaultTotalAmount float64
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderType defines the type for the "order_type" enum field.
type OrderType string

// OrderTypeMIXED is the default value of the OrderType enum.
const DefaultOrderType = OrderTypeMIXED

// OrderType values.
const (
	OrderTypePRODUCT_ONLY OrderType = "PRODUCT_ONLY"
	OrderTypeSERVICE_ONLY OrderType = "SERVICE_ONLY"
	OrderTypeMIXED        OrderType = "MIXED"
)

func (ot OrderType) String() string {
	return string(ot)
}

// OrderTypeValidator is a validator for the "order_type" field enum values. It is called by the builders before save.
func OrderTypeValidator(ot OrderType) error {
	switch ot {
	case OrderTypePRODUCT_ONLY, OrderTypeSERVICE_ONLY, OrderTypeMIXED:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for order_type field: %q", ot)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPENDING is the default value of the Status enum.
const DefaultStatus = StatusPENDING

// Status values.
const (
	StatusDRAFT      Status = "DRAFT"
	StatusPENDING    Status = "PENDING"
	StatusCONFIRMED  Status = "CONFIRMED"
	StatusPROCESSING Status = "PROCESSING"
	StatusREADY      Status = "READY"
	StatusCOMPLETED  Status = "COMPLETED"
	StatusCANCELLED  Status = "CANCELLED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDRAFT, StatusPENDING, StatusCONFIRMED, StatusPROCESSING, StatusREADY, StatusCOMPLETED, StatusCANCELLED:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for status field: %q", s)
	}
}

// PaymentStatus defines the type for the "payment_status" enum field.
type PaymentStatus string

// PaymentStatusPENDING is the default value of the PaymentStatus enum.
const DefaultPaymentStatus = PaymentStatusPENDING

// PaymentStatus values.
const (
	PaymentStatusPENDING   PaymentStatus = "PENDING"
	PaymentStatusPAID      PaymentStatus = "PAID"
	PaymentStatusPARTIAL   PaymentStatus = "PARTIAL"
	PaymentStatusREFUNDED  PaymentStatus = "REFUNDED"
	PaymentStatusCANCELLED PaymentStatus = "CANCELLED"
)

func (ps PaymentStatus) String() string {
	return string(ps)
}

// PaymentStatusValidator is a validator for the "payment_status" field enum values. It is called by the builders before save.
func PaymentStatusValidator(ps PaymentStatus) error {
	switch ps {
	case PaymentStatusPENDING, PaymentStatusPAID, PaymentStatusPARTIAL, PaymentStatusREFUNDED, PaymentStatusCANCELLED:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for payment_status field: %q", ps)
	}
}

// PaymentMethod defines the type for the "payment_method" enum field.
type PaymentMethod string

// PaymentMethod values.
const (
	PaymentMethodCASH           PaymentMethod = "CASH"
	PaymentMethodCREDIT_CARD    PaymentMethod = "CREDIT_CARD"
	PaymentMethodDEBIT_CARD     PaymentMethod = "DEBIT_CARD"
	PaymentMethodBANK_TRANSFER  PaymentMethod = "BANK_TRANSFER"
	PaymentMethodDIGITAL_WALLET PaymentMethod = "DIGITAL_WALLET"
)

func (pm PaymentMethod) String() string {
	return string(pm)
}

// PaymentMethodValidator is a validator for the "payment_method" field enum values. It is called by the builders before save.
func PaymentMethodValidator(pm PaymentMethod) error {
	switch pm {
	case PaymentMethodCASH, PaymentMethodCREDIT_CARD, PaymentMethodDEBIT_CARD, PaymentMethodBANK_TRANSFER, PaymentMethodDIGITAL_WALLET:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for payment_method field: %q", pm)
	}
}

// DeliveryMethod defines the type for the "delivery_method" enum field.
type DeliveryMethod string

// DeliveryMethodPICKUP is the default value of the DeliveryMethod enum.
const DefaultDeliveryMethod = DeliveryMethodPICKUP

// DeliveryMethod values.
const (
	DeliveryMethodPICKUP   DeliveryMethod = "PICKUP"
	DeliveryMethodDELIVERY DeliveryMethod = "DELIVERY"
	DeliveryMethodSHIPPING DeliveryMethod = "SHIPPING"
)

func (dm DeliveryMethod) String() string {
	return string(dm)
}

// DeliveryMethodValidator is a validator for the "delivery_method" field enum values. It is called by the builders before save.
func DeliveryMethodValidator(dm DeliveryMethod) error {
	switch dm {
	case DeliveryMethodPICKUP, DeliveryMethodDELIVERY, DeliveryMethodSHIPPING:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for delivery_method field: %q", dm)
	}
}

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrderNumber orders the results by the order_number field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByOrderType orders the results by the order_type field.
func ByOrderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySubtotal orders the results by the subtotal field.
func BySubtotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtotal, opts...).ToFunc()
}

// ByTaxAmount orders the results by the tax_amount field.
func ByTaxAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxAmount, opts...).ToFunc()
}

// ByDiscountAmount orders the results by the discount_amount field.
func ByDiscountAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountAmount, opts...).ToFunc()
}

// ByShippingCost orders the results by the shipping_cost field.
func ByShippingCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingCost, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByPaymentStatus orders the results by the payment_status field.
func ByPaymentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentStatus, opts...).ToFunc()
}

// ByPaymentMethod orders the results by the payment_method field.
func ByPaymentMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethod, opts...).ToFunc()
}

// ByDeliveryMethod orders the results by the delivery_method field.
func ByDeliveryMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryMethod, opts...).ToFunc()
}

// ByExpectedDeliveryDate orders the results by the expected_delivery_date field.
func ByExpectedDeliveryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectedDeliveryDate, opts...).ToFunc()
}

// ByDeliveredAt orders the results by the delivered_at field.
func ByDeliveredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveredAt, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCancellationReason orders the results by the cancellation_reason field.
func ByCancellationReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancellationReason, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// ByPatientField orders the results by patient field.
func ByPatientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderItemsCount orders the results by order_items count.
func ByOrderItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderItemsStep(), opts...)
	}
}

// ByOrderItems orders the results by order_items terms.
func ByOrderItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderStatusHistoryCount orders the results by order_status_history count.
func ByOrderStatusHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderStatusHistoryStep(), opts...)
	}
}

// ByOrderStatusHistory orders the results by order_status_history terms.
func ByOrderStatusHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStatusHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newPatientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
	)
}
func newOrderItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
	)
}
func newOrderStatusHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderStatusHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusHistoryTable, OrderStatusHistoryColumn),
	)
}
