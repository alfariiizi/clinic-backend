// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/doctor"
	"github.com/google/uuid"
)

// Doctor is the model entity for the Doctor schema.
type Doctor struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Specialization holds the value of the "specialization" field.
	Specialization string `json:"specialization,omitempty"`
	// LicenseNumber holds the value of the "license_number" field.
	LicenseNumber string `json:"license_number,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// Qualifications holds the value of the "qualifications" field.
	Qualifications []string `json:"qualifications,omitempty"`
	// weekly schedule
	Availability map[string]interface{} `json:"availability,omitempty"`
	// in minutes
	ConsultationDuration int `json:"consultation_duration,omitempty"`
	// ConsultationFee holds the value of the "consultation_fee" field.
	ConsultationFee float64 `json:"consultation_fee,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DoctorQuery when eager-loading is set.
	Edges          DoctorEdges `json:"edges"`
	clinic_doctors *uuid.UUID
	selectValues   sql.SelectValues
}

// DoctorEdges holds the relations/edges for other nodes in the graph.
type DoctorEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Appointments holds the value of the appointments edge.
	Appointments []*Appointment `json:"appointments,omitempty"`
	// Schedules holds the value of the schedules edge.
	Schedules []*DoctorSchedule `json:"schedules,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorEdges) ClinicOrErr() (*Clinic, error) {
	if e.Clinic != nil {
		return e.Clinic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: clinic.Label}
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// AppointmentsOrErr returns the Appointments value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) AppointmentsOrErr() ([]*Appointment, error) {
	if e.loadedTypes[1] {
		return e.Appointments, nil
	}
	return nil, &NotLoadedError{edge: "appointments"}
}

// SchedulesOrErr returns the Schedules value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) SchedulesOrErr() ([]*DoctorSchedule, error) {
	if e.loadedTypes[2] {
		return e.Schedules, nil
	}
	return nil, &NotLoadedError{edge: "schedules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Doctor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case doctor.FieldQualifications, doctor.FieldAvailability:
			values[i] = new([]byte)
		case doctor.FieldActive:
			values[i] = new(sql.NullBool)
		case doctor.FieldConsultationFee:
			values[i] = new(sql.NullFloat64)
		case doctor.FieldConsultationDuration:
			values[i] = new(sql.NullInt64)
		case doctor.FieldName, doctor.FieldSpecialization, doctor.FieldLicenseNumber, doctor.FieldEmail, doctor.FieldPhone, doctor.FieldBio:
			values[i] = new(sql.NullString)
		case doctor.FieldCreatedAt, doctor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case doctor.FieldID:
			values[i] = new(uuid.UUID)
		case doctor.ForeignKeys[0]: // clinic_doctors
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Doctor fields.
func (d *Doctor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case doctor.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case doctor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case doctor.FieldSpecialization:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field specialization", values[i])
			} else if value.Valid {
				d.Specialization = value.String
			}
		case doctor.FieldLicenseNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_number", values[i])
			} else if value.Valid {
				d.LicenseNumber = value.String
			}
		case doctor.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				d.Email = value.String
			}
		case doctor.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				d.Phone = value.String
			}
		case doctor.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				d.Bio = value.String
			}
		case doctor.FieldQualifications:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field qualifications", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Qualifications); err != nil {
					return fmt.Errorf("unmarshal field qualifications: %w", err)
				}
			}
		case doctor.FieldAvailability:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field availability", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Availability); err != nil {
					return fmt.Errorf("unmarshal field availability: %w", err)
				}
			}
		case doctor.FieldConsultationDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field consultation_duration", values[i])
			} else if value.Valid {
				d.ConsultationDuration = int(value.Int64)
			}
		case doctor.FieldConsultationFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field consultation_fee", values[i])
			} else if value.Valid {
				d.ConsultationFee = value.Float64
			}
		case doctor.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				d.Active = value.Bool
			}
		case doctor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case doctor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case doctor.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_doctors", values[i])
			} else if value.Valid {
				d.clinic_doctors = new(uuid.UUID)
				*d.clinic_doctors = *value.S.(*uuid.UUID)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Doctor.
// This includes values selected through modifiers, order, etc.
func (d *Doctor) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the Doctor entity.
func (d *Doctor) QueryClinic() *ClinicQuery {
	return NewDoctorClient(d.config).QueryClinic(d)
}

// QueryAppointments queries the "appointments" edge of the Doctor entity.
func (d *Doctor) QueryAppointments() *AppointmentQuery {
	return NewDoctorClient(d.config).QueryAppointments(d)
}

// QuerySchedules queries the "schedules" edge of the Doctor entity.
func (d *Doctor) QuerySchedules() *DoctorScheduleQuery {
	return NewDoctorClient(d.config).QuerySchedules(d)
}

// Update returns a builder for updating this Doctor.
// Note that you need to call Doctor.Unwrap() before calling this method if this Doctor
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Doctor) Update() *DoctorUpdateOne {
	return NewDoctorClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Doctor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Doctor) Unwrap() *Doctor {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("db: Doctor is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Doctor) String() string {
	var builder strings.Builder
	builder.WriteString("Doctor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("specialization=")
	builder.WriteString(d.Specialization)
	builder.WriteString(", ")
	builder.WriteString("license_number=")
	builder.WriteString(d.LicenseNumber)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(d.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(d.Phone)
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(d.Bio)
	builder.WriteString(", ")
	builder.WriteString("qualifications=")
	builder.WriteString(fmt.Sprintf("%v", d.Qualifications))
	builder.WriteString(", ")
	builder.WriteString("availability=")
	builder.WriteString(fmt.Sprintf("%v", d.Availability))
	builder.WriteString(", ")
	builder.WriteString("consultation_duration=")
	builder.WriteString(fmt.Sprintf("%v", d.ConsultationDuration))
	builder.WriteString(", ")
	builder.WriteString("consultation_fee=")
	builder.WriteString(fmt.Sprintf("%v", d.ConsultationFee))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", d.Active))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Doctors is a parsable slice of Doctor.
type Doctors []*Doctor
