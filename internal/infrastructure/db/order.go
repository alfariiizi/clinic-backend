// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/google/uuid"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OrderNumber holds the value of the "order_number" field.
	OrderNumber string `json:"order_number,omitempty"`
	// OrderType holds the value of the "order_type" field.
	OrderType order.OrderType `json:"order_type,omitempty"`
	// Status holds the value of the "status" field.
	Status order.Status `json:"status,omitempty"`
	// Subtotal holds the value of the "subtotal" field.
	Subtotal float64 `json:"subtotal,omitempty"`
	// TaxAmount holds the value of the "tax_amount" field.
	TaxAmount float64 `json:"tax_amount,omitempty"`
	// DiscountAmount holds the value of the "discount_amount" field.
	DiscountAmount float64 `json:"discount_amount,omitempty"`
	// ShippingCost holds the value of the "shipping_cost" field.
	ShippingCost float64 `json:"shipping_cost,omitempty"`
	// TotalAmount holds the value of the "total_amount" field.
	TotalAmount float64 `json:"total_amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// PaymentStatus holds the value of the "payment_status" field.
	PaymentStatus order.PaymentStatus `json:"payment_status,omitempty"`
	// PaymentMethod holds the value of the "payment_method" field.
	PaymentMethod order.PaymentMethod `json:"payment_method,omitempty"`
	// ShippingAddress holds the value of the "shipping_address" field.
	ShippingAddress map[string]interface{} `json:"shipping_address,omitempty"`
	// BillingAddress holds the value of the "billing_address" field.
	BillingAddress map[string]interface{} `json:"billing_address,omitempty"`
	// DeliveryMethod holds the value of the "delivery_method" field.
	DeliveryMethod order.DeliveryMethod `json:"delivery_method,omitempty"`
	// ExpectedDeliveryDate holds the value of the "expected_delivery_date" field.
	ExpectedDeliveryDate time.Time `json:"expected_delivery_date,omitempty"`
	// DeliveredAt holds the value of the "delivered_at" field.
	DeliveredAt time.Time `json:"delivered_at,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// CancellationReason holds the value of the "cancellation_reason" field.
	CancellationReason string `json:"cancellation_reason,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges          OrderEdges `json:"edges"`
	clinic_orders  *uuid.UUID
	patient_orders *uuid.UUID
	selectValues   sql.SelectValues
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItem `json:"order_items,omitempty"`
	// OrderStatusHistory holds the value of the order_status_history edge.
	OrderStatusHistory []*OrderStatusHistory `json:"order_status_history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) ClinicOrErr() (*Clinic, error) {
	if e.Clinic != nil {
		return e.Clinic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: clinic.Label}
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) PatientOrErr() (*Patient, error) {
	if e.Patient != nil {
		return e.Patient, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: patient.Label}
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[2] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// OrderStatusHistoryOrErr returns the OrderStatusHistory value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderStatusHistoryOrErr() ([]*OrderStatusHistory, error) {
	if e.loadedTypes[3] {
		return e.OrderStatusHistory, nil
	}
	return nil, &NotLoadedError{edge: "order_status_history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldShippingAddress, order.FieldBillingAddress:
			values[i] = new([]byte)
		case order.FieldSubtotal, order.FieldTaxAmount, order.FieldDiscountAmount, order.FieldShippingCost, order.FieldTotalAmount:
			values[i] = new(sql.NullFloat64)
		case order.FieldOrderNumber, order.FieldOrderType, order.FieldStatus, order.FieldCurrency, order.FieldPaymentStatus, order.FieldPaymentMethod, order.FieldDeliveryMethod, order.FieldNotes, order.FieldCancellationReason:
			values[i] = new(sql.NullString)
		case order.FieldExpectedDeliveryDate, order.FieldDeliveredAt, order.FieldCreatedAt, order.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case order.FieldID:
			values[i] = new(uuid.UUID)
		case order.ForeignKeys[0]: // clinic_orders
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case order.ForeignKeys[1]: // patient_orders
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case order.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_number", values[i])
			} else if value.Valid {
				o.OrderNumber = value.String
			}
		case order.FieldOrderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_type", values[i])
			} else if value.Valid {
				o.OrderType = order.OrderType(value.String)
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = order.Status(value.String)
			}
		case order.FieldSubtotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field subtotal", values[i])
			} else if value.Valid {
				o.Subtotal = value.Float64
			}
		case order.FieldTaxAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_amount", values[i])
			} else if value.Valid {
				o.TaxAmount = value.Float64
			}
		case order.FieldDiscountAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_amount", values[i])
			} else if value.Valid {
				o.DiscountAmount = value.Float64
			}
		case order.FieldShippingCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_cost", values[i])
			} else if value.Valid {
				o.ShippingCost = value.Float64
			}
		case order.FieldTotalAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[i])
			} else if value.Valid {
				o.TotalAmount = value.Float64
			}
		case order.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				o.Currency = value.String
			}
		case order.FieldPaymentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_status", values[i])
			} else if value.Valid {
				o.PaymentStatus = order.PaymentStatus(value.String)
			}
		case order.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				o.PaymentMethod = order.PaymentMethod(value.String)
			}
		case order.FieldShippingAddress:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_address", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.ShippingAddress); err != nil {
					return fmt.Errorf("unmarshal field shipping_address: %w", err)
				}
			}
		case order.FieldBillingAddress:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.BillingAddress); err != nil {
					return fmt.Errorf("unmarshal field billing_address: %w", err)
				}
			}
		case order.FieldDeliveryMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_method", values[i])
			} else if value.Valid {
				o.DeliveryMethod = order.DeliveryMethod(value.String)
			}
		case order.FieldExpectedDeliveryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expected_delivery_date", values[i])
			} else if value.Valid {
				o.ExpectedDeliveryDate = value.Time
			}
		case order.FieldDeliveredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_at", values[i])
			} else if value.Valid {
				o.DeliveredAt = value.Time
			}
		case order.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				o.Notes = value.String
			}
		case order.FieldCancellationReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cancellation_reason", values[i])
			} else if value.Valid {
				o.CancellationReason = value.String
			}
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case order.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_orders", values[i])
			} else if value.Valid {
				o.clinic_orders = new(uuid.UUID)
				*o.clinic_orders = *value.S.(*uuid.UUID)
			}
		case order.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field patient_orders", values[i])
			} else if value.Valid {
				o.patient_orders = new(uuid.UUID)
				*o.patient_orders = *value.S.(*uuid.UUID)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (o *Order) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the Order entity.
func (o *Order) QueryClinic() *ClinicQuery {
	return NewOrderClient(o.config).QueryClinic(o)
}

// QueryPatient queries the "patient" edge of the Order entity.
func (o *Order) QueryPatient() *PatientQuery {
	return NewOrderClient(o.config).QueryPatient(o)
}

// QueryOrderItems queries the "order_items" edge of the Order entity.
func (o *Order) QueryOrderItems() *OrderItemQuery {
	return NewOrderClient(o.config).QueryOrderItems(o)
}

// QueryOrderStatusHistory queries the "order_status_history" edge of the Order entity.
func (o *Order) QueryOrderStatusHistory() *OrderStatusHistoryQuery {
	return NewOrderClient(o.config).QueryOrderStatusHistory(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("db: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("order_number=")
	builder.WriteString(o.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("order_type=")
	builder.WriteString(fmt.Sprintf("%v", o.OrderType))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("subtotal=")
	builder.WriteString(fmt.Sprintf("%v", o.Subtotal))
	builder.WriteString(", ")
	builder.WriteString("tax_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.TaxAmount))
	builder.WriteString(", ")
	builder.WriteString("discount_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.DiscountAmount))
	builder.WriteString(", ")
	builder.WriteString("shipping_cost=")
	builder.WriteString(fmt.Sprintf("%v", o.ShippingCost))
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(o.Currency)
	builder.WriteString(", ")
	builder.WriteString("payment_status=")
	builder.WriteString(fmt.Sprintf("%v", o.PaymentStatus))
	builder.WriteString(", ")
	builder.WriteString("payment_method=")
	builder.WriteString(fmt.Sprintf("%v", o.PaymentMethod))
	builder.WriteString(", ")
	builder.WriteString("shipping_address=")
	builder.WriteString(fmt.Sprintf("%v", o.ShippingAddress))
	builder.WriteString(", ")
	builder.WriteString("billing_address=")
	builder.WriteString(fmt.Sprintf("%v", o.BillingAddress))
	builder.WriteString(", ")
	builder.WriteString("delivery_method=")
	builder.WriteString(fmt.Sprintf("%v", o.DeliveryMethod))
	builder.WriteString(", ")
	builder.WriteString("expected_delivery_date=")
	builder.WriteString(o.ExpectedDeliveryDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delivered_at=")
	builder.WriteString(o.DeliveredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(o.Notes)
	builder.WriteString(", ")
	builder.WriteString("cancellation_reason=")
	builder.WriteString(o.CancellationReason)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
