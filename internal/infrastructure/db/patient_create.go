// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/billingrecord"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/chatthread"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/clinic"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/document"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/patient"
	"github.com/google/uuid"
)

// PatientCreate is the builder for creating a Patient entity.
type PatientCreate struct {
	config
	mutation *PatientMutation
	hooks    []Hook
}

// SetWhatsappNumber sets the "whatsapp_number" field.
func (pc *PatientCreate) SetWhatsappNumber(s string) *PatientCreate {
	pc.mutation.SetWhatsappNumber(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PatientCreate) SetName(s string) *PatientCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *PatientCreate) SetNillableName(s *string) *PatientCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetEmail sets the "email" field.
func (pc *PatientCreate) SetEmail(s string) *PatientCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pc *PatientCreate) SetNillableEmail(s *string) *PatientCreate {
	if s != nil {
		pc.SetEmail(*s)
	}
	return pc
}

// SetPhone sets the "phone" field.
func (pc *PatientCreate) SetPhone(s string) *PatientCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePhone(s *string) *PatientCreate {
	if s != nil {
		pc.SetPhone(*s)
	}
	return pc
}

// SetBirthDate sets the "birth_date" field.
func (pc *PatientCreate) SetBirthDate(t time.Time) *PatientCreate {
	pc.mutation.SetBirthDate(t)
	return pc
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (pc *PatientCreate) SetNillableBirthDate(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetBirthDate(*t)
	}
	return pc
}

// SetGender sets the "gender" field.
func (pc *PatientCreate) SetGender(pa patient.Gender) *PatientCreate {
	pc.mutation.SetGender(pa)
	return pc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pc *PatientCreate) SetNillableGender(pa *patient.Gender) *PatientCreate {
	if pa != nil {
		pc.SetGender(*pa)
	}
	return pc
}

// SetAddress sets the "address" field.
func (pc *PatientCreate) SetAddress(s string) *PatientCreate {
	pc.mutation.SetAddress(s)
	return pc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pc *PatientCreate) SetNillableAddress(s *string) *PatientCreate {
	if s != nil {
		pc.SetAddress(*s)
	}
	return pc
}

// SetMedicalHistory sets the "medical_history" field.
func (pc *PatientCreate) SetMedicalHistory(m map[string]interface{}) *PatientCreate {
	pc.mutation.SetMedicalHistory(m)
	return pc
}

// SetAllergies sets the "allergies" field.
func (pc *PatientCreate) SetAllergies(s []string) *PatientCreate {
	pc.mutation.SetAllergies(s)
	return pc
}

// SetEmergencyContactName sets the "emergency_contact_name" field.
func (pc *PatientCreate) SetEmergencyContactName(s string) *PatientCreate {
	pc.mutation.SetEmergencyContactName(s)
	return pc
}

// SetNillableEmergencyContactName sets the "emergency_contact_name" field if the given value is not nil.
func (pc *PatientCreate) SetNillableEmergencyContactName(s *string) *PatientCreate {
	if s != nil {
		pc.SetEmergencyContactName(*s)
	}
	return pc
}

// SetEmergencyContactPhone sets the "emergency_contact_phone" field.
func (pc *PatientCreate) SetEmergencyContactPhone(s string) *PatientCreate {
	pc.mutation.SetEmergencyContactPhone(s)
	return pc
}

// SetNillableEmergencyContactPhone sets the "emergency_contact_phone" field if the given value is not nil.
func (pc *PatientCreate) SetNillableEmergencyContactPhone(s *string) *PatientCreate {
	if s != nil {
		pc.SetEmergencyContactPhone(*s)
	}
	return pc
}

// SetActive sets the "active" field.
func (pc *PatientCreate) SetActive(b bool) *PatientCreate {
	pc.mutation.SetActive(b)
	return pc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pc *PatientCreate) SetNillableActive(b *bool) *PatientCreate {
	if b != nil {
		pc.SetActive(*b)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PatientCreate) SetCreatedAt(t time.Time) *PatientCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PatientCreate) SetNillableCreatedAt(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PatientCreate) SetUpdatedAt(t time.Time) *PatientCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PatientCreate) SetNillableUpdatedAt(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PatientCreate) SetID(u uuid.UUID) *PatientCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PatientCreate) SetNillableID(u *uuid.UUID) *PatientCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetClinicID sets the "clinic" edge to the Clinic entity by ID.
func (pc *PatientCreate) SetClinicID(id uuid.UUID) *PatientCreate {
	pc.mutation.SetClinicID(id)
	return pc
}

// SetNillableClinicID sets the "clinic" edge to the Clinic entity by ID if the given value is not nil.
func (pc *PatientCreate) SetNillableClinicID(id *uuid.UUID) *PatientCreate {
	if id != nil {
		pc = pc.SetClinicID(*id)
	}
	return pc
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (pc *PatientCreate) SetClinic(c *Clinic) *PatientCreate {
	return pc.SetClinicID(c.ID)
}

// AddAppointmentIDs adds the "appointments" edge to the Appointment entity by IDs.
func (pc *PatientCreate) AddAppointmentIDs(ids ...uuid.UUID) *PatientCreate {
	pc.mutation.AddAppointmentIDs(ids...)
	return pc
}

// AddAppointments adds the "appointments" edges to the Appointment entity.
func (pc *PatientCreate) AddAppointments(a ...*Appointment) *PatientCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAppointmentIDs(ids...)
}

// AddChatThreadIDs adds the "chat_threads" edge to the ChatThread entity by IDs.
func (pc *PatientCreate) AddChatThreadIDs(ids ...uuid.UUID) *PatientCreate {
	pc.mutation.AddChatThreadIDs(ids...)
	return pc
}

// AddChatThreads adds the "chat_threads" edges to the ChatThread entity.
func (pc *PatientCreate) AddChatThreads(c ...*ChatThread) *PatientCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddChatThreadIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (pc *PatientCreate) AddDocumentIDs(ids ...uuid.UUID) *PatientCreate {
	pc.mutation.AddDocumentIDs(ids...)
	return pc
}

// AddDocuments adds the "documents" edges to the Document entity.
func (pc *PatientCreate) AddDocuments(d ...*Document) *PatientCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDocumentIDs(ids...)
}

// AddBillingRecordIDs adds the "billing_records" edge to the BillingRecord entity by IDs.
func (pc *PatientCreate) AddBillingRecordIDs(ids ...uuid.UUID) *PatientCreate {
	pc.mutation.AddBillingRecordIDs(ids...)
	return pc
}

// AddBillingRecords adds the "billing_records" edges to the BillingRecord entity.
func (pc *PatientCreate) AddBillingRecords(b ...*BillingRecord) *PatientCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddBillingRecordIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (pc *PatientCreate) AddOrderIDs(ids ...uuid.UUID) *PatientCreate {
	pc.mutation.AddOrderIDs(ids...)
	return pc
}

// AddOrders adds the "orders" edges to the Order entity.
func (pc *PatientCreate) AddOrders(o ...*Order) *PatientCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddOrderIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pc *PatientCreate) Mutation() *PatientMutation {
	return pc.mutation
}

// Save creates the Patient in the database.
func (pc *PatientCreate) Save(ctx context.Context) (*Patient, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientCreate) SaveX(ctx context.Context) *Patient {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PatientCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PatientCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PatientCreate) defaults() {
	if _, ok := pc.mutation.Active(); !ok {
		v := patient.DefaultActive
		pc.mutation.SetActive(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := patient.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := patient.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := patient.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PatientCreate) check() error {
	if _, ok := pc.mutation.WhatsappNumber(); !ok {
		return &ValidationError{Name: "whatsapp_number", err: errors.New(`db: missing required field "Patient.whatsapp_number"`)}
	}
	if v, ok := pc.mutation.Gender(); ok {
		if err := patient.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`db: validator failed for field "Patient.gender": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`db: missing required field "Patient.active"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Patient.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Patient.updated_at"`)}
	}
	return nil
}

func (pc *PatientCreate) sqlSave(ctx context.Context) (*Patient, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PatientCreate) createSpec() (*Patient, *sqlgraph.CreateSpec) {
	var (
		_node = &Patient{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(patient.Table, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.WhatsappNumber(); ok {
		_spec.SetField(patient.FieldWhatsappNumber, field.TypeString, value)
		_node.WhatsappNumber = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.SetField(patient.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(patient.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pc.mutation.BirthDate(); ok {
		_spec.SetField(patient.FieldBirthDate, field.TypeTime, value)
		_node.BirthDate = value
	}
	if value, ok := pc.mutation.Gender(); ok {
		_spec.SetField(patient.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := pc.mutation.Address(); ok {
		_spec.SetField(patient.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := pc.mutation.MedicalHistory(); ok {
		_spec.SetField(patient.FieldMedicalHistory, field.TypeJSON, value)
		_node.MedicalHistory = value
	}
	if value, ok := pc.mutation.Allergies(); ok {
		_spec.SetField(patient.FieldAllergies, field.TypeJSON, value)
		_node.Allergies = value
	}
	if value, ok := pc.mutation.EmergencyContactName(); ok {
		_spec.SetField(patient.FieldEmergencyContactName, field.TypeString, value)
		_node.EmergencyContactName = value
	}
	if value, ok := pc.mutation.EmergencyContactPhone(); ok {
		_spec.SetField(patient.FieldEmergencyContactPhone, field.TypeString, value)
		_node.EmergencyContactPhone = value
	}
	if value, ok := pc.mutation.Active(); ok {
		_spec.SetField(patient.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(patient.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(patient.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.ClinicTable,
			Columns: []string{patient.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clinic_patients = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AppointmentsTable,
			Columns: []string{patient.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ChatThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ChatThreadsTable,
			Columns: []string{patient.ChatThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatthread.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.DocumentsTable,
			Columns: []string{patient.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BillingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.BillingRecordsTable,
			Columns: []string{patient.BillingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.OrdersTable,
			Columns: []string{patient.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PatientCreateBulk is the builder for creating many Patient entities in bulk.
type PatientCreateBulk struct {
	config
	err      error
	builders []*PatientCreate
}

// Save creates the Patient entities in the database.
func (pcb *PatientCreateBulk) Save(ctx context.Context) ([]*Patient, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Patient, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PatientCreateBulk) SaveX(ctx context.Context) []*Patient {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PatientCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PatientCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
