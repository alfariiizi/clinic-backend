// Code generated by ent, DO NOT EDIT.

package chatthread

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLTE(FieldID, id))
}

// WhatsappThreadID applies equality check predicate on the "whatsapp_thread_id" field. It's identical to WhatsappThreadIDEQ.
func WhatsappThreadID(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldWhatsappThreadID, v))
}

// LastMessageAt applies equality check predicate on the "last_message_at" field. It's identical to LastMessageAtEQ.
func LastMessageAt(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldLastMessageAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldUpdatedAt, v))
}

// WhatsappThreadIDEQ applies the EQ predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDEQ(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDNEQ applies the NEQ predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDNEQ(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNEQ(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDIn applies the In predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDIn(vs ...string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldIn(FieldWhatsappThreadID, vs...))
}

// WhatsappThreadIDNotIn applies the NotIn predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDNotIn(vs ...string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNotIn(FieldWhatsappThreadID, vs...))
}

// WhatsappThreadIDGT applies the GT predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDGT(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGT(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDGTE applies the GTE predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDGTE(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGTE(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDLT applies the LT predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDLT(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLT(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDLTE applies the LTE predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDLTE(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLTE(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDContains applies the Contains predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDContains(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldContains(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDHasPrefix applies the HasPrefix predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDHasPrefix(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldHasPrefix(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDHasSuffix applies the HasSuffix predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDHasSuffix(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldHasSuffix(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDIsNil applies the IsNil predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDIsNil() predicate.ChatThread {
	return predicate.ChatThread(sql.FieldIsNull(FieldWhatsappThreadID))
}

// WhatsappThreadIDNotNil applies the NotNil predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDNotNil() predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNotNull(FieldWhatsappThreadID))
}

// WhatsappThreadIDEqualFold applies the EqualFold predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDEqualFold(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEqualFold(FieldWhatsappThreadID, v))
}

// WhatsappThreadIDContainsFold applies the ContainsFold predicate on the "whatsapp_thread_id" field.
func WhatsappThreadIDContainsFold(v string) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldContainsFold(FieldWhatsappThreadID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNotIn(FieldStatus, vs...))
}

// ContextIsNil applies the IsNil predicate on the "context" field.
func ContextIsNil() predicate.ChatThread {
	return predicate.ChatThread(sql.FieldIsNull(FieldContext))
}

// ContextNotNil applies the NotNil predicate on the "context" field.
func ContextNotNil() predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNotNull(FieldContext))
}

// LastMessageAtEQ applies the EQ predicate on the "last_message_at" field.
func LastMessageAtEQ(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldLastMessageAt, v))
}

// LastMessageAtNEQ applies the NEQ predicate on the "last_message_at" field.
func LastMessageAtNEQ(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNEQ(FieldLastMessageAt, v))
}

// LastMessageAtIn applies the In predicate on the "last_message_at" field.
func LastMessageAtIn(vs ...time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldIn(FieldLastMessageAt, vs...))
}

// LastMessageAtNotIn applies the NotIn predicate on the "last_message_at" field.
func LastMessageAtNotIn(vs ...time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNotIn(FieldLastMessageAt, vs...))
}

// LastMessageAtGT applies the GT predicate on the "last_message_at" field.
func LastMessageAtGT(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGT(FieldLastMessageAt, v))
}

// LastMessageAtGTE applies the GTE predicate on the "last_message_at" field.
func LastMessageAtGTE(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGTE(FieldLastMessageAt, v))
}

// LastMessageAtLT applies the LT predicate on the "last_message_at" field.
func LastMessageAtLT(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLT(FieldLastMessageAt, v))
}

// LastMessageAtLTE applies the LTE predicate on the "last_message_at" field.
func LastMessageAtLTE(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLTE(FieldLastMessageAt, v))
}

// LastMessageAtIsNil applies the IsNil predicate on the "last_message_at" field.
func LastMessageAtIsNil() predicate.ChatThread {
	return predicate.ChatThread(sql.FieldIsNull(FieldLastMessageAt))
}

// LastMessageAtNotNil applies the NotNil predicate on the "last_message_at" field.
func LastMessageAtNotNil() predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNotNull(FieldLastMessageAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ChatThread {
	return predicate.ChatThread(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.ChatThread {
	return predicate.ChatThread(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.ChatThread {
	return predicate.ChatThread(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.ChatThread {
	return predicate.ChatThread(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.ChatThread {
	return predicate.ChatThread(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.ChatThread {
	return predicate.ChatThread(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.ChatMessage) predicate.ChatThread {
	return predicate.ChatThread(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatThread) predicate.ChatThread {
	return predicate.ChatThread(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatThread) predicate.ChatThread {
	return predicate.ChatThread(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatThread) predicate.ChatThread {
	return predicate.ChatThread(sql.NotPredicates(p))
}
