// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/appointment"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/order"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/orderitem"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/service"
	"github.com/google/uuid"
)

// OrderItem is the model entity for the OrderItem schema.
type OrderItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ItemType holds the value of the "item_type" field.
	ItemType orderitem.ItemType `json:"item_type,omitempty"`
	// snapshot of name at time of order
	ItemName string `json:"item_name,omitempty"`
	// ItemDescription holds the value of the "item_description" field.
	ItemDescription string `json:"item_description,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice float64 `json:"unit_price,omitempty"`
	// DiscountAmount holds the value of the "discount_amount" field.
	DiscountAmount float64 `json:"discount_amount,omitempty"`
	// TotalPrice holds the value of the "total_price" field.
	TotalPrice float64 `json:"total_price,omitempty"`
	// snapshot of product/service data
	ItemMetadata map[string]interface{} `json:"item_metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderItemQuery when eager-loading is set.
	Edges                   OrderItemEdges `json:"edges"`
	appointment_order_items *uuid.UUID
	order_order_items       *uuid.UUID
	product_order_items     *uuid.UUID
	service_order_items     *uuid.UUID
	selectValues            sql.SelectValues
}

// OrderItemEdges holds the relations/edges for other nodes in the graph.
type OrderItemEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// Appointment holds the value of the appointment edge.
	Appointment *Appointment `json:"appointment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// AppointmentOrErr returns the Appointment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) AppointmentOrErr() (*Appointment, error) {
	if e.Appointment != nil {
		return e.Appointment, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: appointment.Label}
	}
	return nil, &NotLoadedError{edge: "appointment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderitem.FieldItemMetadata:
			values[i] = new([]byte)
		case orderitem.FieldUnitPrice, orderitem.FieldDiscountAmount, orderitem.FieldTotalPrice:
			values[i] = new(sql.NullFloat64)
		case orderitem.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case orderitem.FieldItemType, orderitem.FieldItemName, orderitem.FieldItemDescription:
			values[i] = new(sql.NullString)
		case orderitem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case orderitem.FieldID:
			values[i] = new(uuid.UUID)
		case orderitem.ForeignKeys[0]: // appointment_order_items
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case orderitem.ForeignKeys[1]: // order_order_items
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case orderitem.ForeignKeys[2]: // product_order_items
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case orderitem.ForeignKeys[3]: // service_order_items
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderItem fields.
func (oi *OrderItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oi.ID = *value
			}
		case orderitem.FieldItemType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_type", values[i])
			} else if value.Valid {
				oi.ItemType = orderitem.ItemType(value.String)
			}
		case orderitem.FieldItemName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_name", values[i])
			} else if value.Valid {
				oi.ItemName = value.String
			}
		case orderitem.FieldItemDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_description", values[i])
			} else if value.Valid {
				oi.ItemDescription = value.String
			}
		case orderitem.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				oi.Quantity = int(value.Int64)
			}
		case orderitem.FieldUnitPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value.Valid {
				oi.UnitPrice = value.Float64
			}
		case orderitem.FieldDiscountAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_amount", values[i])
			} else if value.Valid {
				oi.DiscountAmount = value.Float64
			}
		case orderitem.FieldTotalPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_price", values[i])
			} else if value.Valid {
				oi.TotalPrice = value.Float64
			}
		case orderitem.FieldItemMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field item_metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oi.ItemMetadata); err != nil {
					return fmt.Errorf("unmarshal field item_metadata: %w", err)
				}
			}
		case orderitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oi.CreatedAt = value.Time
			}
		case orderitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field appointment_order_items", values[i])
			} else if value.Valid {
				oi.appointment_order_items = new(uuid.UUID)
				*oi.appointment_order_items = *value.S.(*uuid.UUID)
			}
		case orderitem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field order_order_items", values[i])
			} else if value.Valid {
				oi.order_order_items = new(uuid.UUID)
				*oi.order_order_items = *value.S.(*uuid.UUID)
			}
		case orderitem.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field product_order_items", values[i])
			} else if value.Valid {
				oi.product_order_items = new(uuid.UUID)
				*oi.product_order_items = *value.S.(*uuid.UUID)
			}
		case orderitem.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field service_order_items", values[i])
			} else if value.Valid {
				oi.service_order_items = new(uuid.UUID)
				*oi.service_order_items = *value.S.(*uuid.UUID)
			}
		default:
			oi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderItem.
// This includes values selected through modifiers, order, etc.
func (oi *OrderItem) Value(name string) (ent.Value, error) {
	return oi.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderItem entity.
func (oi *OrderItem) QueryOrder() *OrderQuery {
	return NewOrderItemClient(oi.config).QueryOrder(oi)
}

// QueryProduct queries the "product" edge of the OrderItem entity.
func (oi *OrderItem) QueryProduct() *ProductQuery {
	return NewOrderItemClient(oi.config).QueryProduct(oi)
}

// QueryService queries the "service" edge of the OrderItem entity.
func (oi *OrderItem) QueryService() *ServiceQuery {
	return NewOrderItemClient(oi.config).QueryService(oi)
}

// QueryAppointment queries the "appointment" edge of the OrderItem entity.
func (oi *OrderItem) QueryAppointment() *AppointmentQuery {
	return NewOrderItemClient(oi.config).QueryAppointment(oi)
}

// Update returns a builder for updating this OrderItem.
// Note that you need to call OrderItem.Unwrap() before calling this method if this OrderItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (oi *OrderItem) Update() *OrderItemUpdateOne {
	return NewOrderItemClient(oi.config).UpdateOne(oi)
}

// Unwrap unwraps the OrderItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oi *OrderItem) Unwrap() *OrderItem {
	_tx, ok := oi.config.driver.(*txDriver)
	if !ok {
		panic("db: OrderItem is not a transactional entity")
	}
	oi.config.driver = _tx.drv
	return oi
}

// String implements the fmt.Stringer.
func (oi *OrderItem) String() string {
	var builder strings.Builder
	builder.WriteString("OrderItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oi.ID))
	builder.WriteString("item_type=")
	builder.WriteString(fmt.Sprintf("%v", oi.ItemType))
	builder.WriteString(", ")
	builder.WriteString("item_name=")
	builder.WriteString(oi.ItemName)
	builder.WriteString(", ")
	builder.WriteString("item_description=")
	builder.WriteString(oi.ItemDescription)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", oi.Quantity))
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", oi.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("discount_amount=")
	builder.WriteString(fmt.Sprintf("%v", oi.DiscountAmount))
	builder.WriteString(", ")
	builder.WriteString("total_price=")
	builder.WriteString(fmt.Sprintf("%v", oi.TotalPrice))
	builder.WriteString(", ")
	builder.WriteString("item_metadata=")
	builder.WriteString(fmt.Sprintf("%v", oi.ItemMetadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oi.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderItems is a parsable slice of OrderItem.
type OrderItems []*OrderItem
