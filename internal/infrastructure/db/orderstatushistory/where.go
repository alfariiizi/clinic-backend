// Code generated by ent, DO NOT EDIT.

package orderstatushistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldStatus, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldNotes, v))
}

// ChangedBy applies equality check predicate on the "changed_by" field. It's identical to ChangedByEQ.
func ChangedBy(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldChangedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContainsFold(FieldStatus, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContainsFold(FieldNotes, v))
}

// ChangedByEQ applies the EQ predicate on the "changed_by" field.
func ChangedByEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldChangedBy, v))
}

// ChangedByNEQ applies the NEQ predicate on the "changed_by" field.
func ChangedByNEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldChangedBy, v))
}

// ChangedByIn applies the In predicate on the "changed_by" field.
func ChangedByIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldChangedBy, vs...))
}

// ChangedByNotIn applies the NotIn predicate on the "changed_by" field.
func ChangedByNotIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldChangedBy, vs...))
}

// ChangedByGT applies the GT predicate on the "changed_by" field.
func ChangedByGT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldChangedBy, v))
}

// ChangedByGTE applies the GTE predicate on the "changed_by" field.
func ChangedByGTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldChangedBy, v))
}

// ChangedByLT applies the LT predicate on the "changed_by" field.
func ChangedByLT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldChangedBy, v))
}

// ChangedByLTE applies the LTE predicate on the "changed_by" field.
func ChangedByLTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldChangedBy, v))
}

// ChangedByContains applies the Contains predicate on the "changed_by" field.
func ChangedByContains(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContains(FieldChangedBy, v))
}

// ChangedByHasPrefix applies the HasPrefix predicate on the "changed_by" field.
func ChangedByHasPrefix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasPrefix(FieldChangedBy, v))
}

// ChangedByHasSuffix applies the HasSuffix predicate on the "changed_by" field.
func ChangedByHasSuffix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasSuffix(FieldChangedBy, v))
}

// ChangedByIsNil applies the IsNil predicate on the "changed_by" field.
func ChangedByIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldChangedBy))
}

// ChangedByNotNil applies the NotNil predicate on the "changed_by" field.
func ChangedByNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldChangedBy))
}

// ChangedByEqualFold applies the EqualFold predicate on the "changed_by" field.
func ChangedByEqualFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEqualFold(FieldChangedBy, v))
}

// ChangedByContainsFold applies the ContainsFold predicate on the "changed_by" field.
func ChangedByContainsFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContainsFold(FieldChangedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderStatusHistory) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderStatusHistory) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderStatusHistory) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.NotPredicates(p))
}
