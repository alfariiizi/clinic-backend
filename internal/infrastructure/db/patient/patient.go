// Code generated by ent, DO NOT EDIT.

package patient

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the patient type in the database.
	Label = "patient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWhatsappNumber holds the string denoting the whatsapp_number field in the database.
	FieldWhatsappNumber = "whatsapp_number"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldMedicalHistory holds the string denoting the medical_history field in the database.
	FieldMedicalHistory = "medical_history"
	// FieldAllergies holds the string denoting the allergies field in the database.
	FieldAllergies = "allergies"
	// FieldEmergencyContactName holds the string denoting the emergency_contact_name field in the database.
	FieldEmergencyContactName = "emergency_contact_name"
	// FieldEmergencyContactPhone holds the string denoting the emergency_contact_phone field in the database.
	FieldEmergencyContactPhone = "emergency_contact_phone"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgeAppointments holds the string denoting the appointments edge name in mutations.
	EdgeAppointments = "appointments"
	// EdgeChatThreads holds the string denoting the chat_threads edge name in mutations.
	EdgeChatThreads = "chat_threads"
	// EdgeDocuments holds the string denoting the documents edge name in mutations.
	EdgeDocuments = "documents"
	// EdgeBillingRecords holds the string denoting the billing_records edge name in mutations.
	EdgeBillingRecords = "billing_records"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// Table holds the table name of the patient in the database.
	Table = "patients"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "patients"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinics"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_patients"
	// AppointmentsTable is the table that holds the appointments relation/edge.
	AppointmentsTable = "appointments"
	// AppointmentsInverseTable is the table name for the Appointment entity.
	// It exists in this package in order to avoid circular dependency with the "appointment" package.
	AppointmentsInverseTable = "appointments"
	// AppointmentsColumn is the table column denoting the appointments relation/edge.
	AppointmentsColumn = "patient_appointments"
	// ChatThreadsTable is the table that holds the chat_threads relation/edge.
	ChatThreadsTable = "chat_threads"
	// ChatThreadsInverseTable is the table name for the ChatThread entity.
	// It exists in this package in order to avoid circular dependency with the "chatthread" package.
	ChatThreadsInverseTable = "chat_threads"
	// ChatThreadsColumn is the table column denoting the chat_threads relation/edge.
	ChatThreadsColumn = "patient_chat_threads"
	// DocumentsTable is the table that holds the documents relation/edge.
	DocumentsTable = "documents"
	// DocumentsInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentsInverseTable = "documents"
	// DocumentsColumn is the table column denoting the documents relation/edge.
	DocumentsColumn = "patient_documents"
	// BillingRecordsTable is the table that holds the billing_records relation/edge.
	BillingRecordsTable = "billing_records"
	// BillingRecordsInverseTable is the table name for the BillingRecord entity.
	// It exists in this package in order to avoid circular dependency with the "billingrecord" package.
	BillingRecordsInverseTable = "billing_records"
	// BillingRecordsColumn is the table column denoting the billing_records relation/edge.
	BillingRecordsColumn = "patient_billing_records"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "patient_orders"
)

// Columns holds all SQL columns for patient fields.
var Columns = []string{
	FieldID,
	FieldWhatsappNumber,
	FieldName,
	FieldEmail,
	FieldPhone,
	FieldBirthDate,
	FieldGender,
	FieldAddress,
	FieldMedicalHistory,
	FieldAllergies,
	FieldEmergencyContactName,
	FieldEmergencyContactPhone,
	FieldActive,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "patients"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"clinic_patients",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMALE   Gender = "MALE"
	GenderFEMALE Gender = "FEMALE"
	GenderOTHER  Gender = "OTHER"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMALE, GenderFEMALE, GenderOTHER:
		return nil
	default:
		return fmt.Errorf("patient: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the Patient queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWhatsappNumber orders the results by the whatsapp_number field.
func ByWhatsappNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhatsappNumber, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByEmergencyContactName orders the results by the emergency_contact_name field.
func ByEmergencyContactName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmergencyContactName, opts...).ToFunc()
}

// ByEmergencyContactPhone orders the results by the emergency_contact_phone field.
func ByEmergencyContactPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmergencyContactPhone, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// ByAppointmentsCount orders the results by appointments count.
func ByAppointmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppointmentsStep(), opts...)
	}
}

// ByAppointments orders the results by appointments terms.
func ByAppointments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppointmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChatThreadsCount orders the results by chat_threads count.
func ByChatThreadsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChatThreadsStep(), opts...)
	}
}

// ByChatThreads orders the results by chat_threads terms.
func ByChatThreads(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChatThreadsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocumentsCount orders the results by documents count.
func ByDocumentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentsStep(), opts...)
	}
}

// ByDocuments orders the results by documents terms.
func ByDocuments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBillingRecordsCount orders the results by billing_records count.
func ByBillingRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillingRecordsStep(), opts...)
	}
}

// ByBillingRecords orders the results by billing_records terms.
func ByBillingRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newAppointmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppointmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AppointmentsTable, AppointmentsColumn),
	)
}
func newChatThreadsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChatThreadsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChatThreadsTable, ChatThreadsColumn),
	)
}
func newDocumentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DocumentsTable, DocumentsColumn),
	)
}
func newBillingRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillingRecordsTable, BillingRecordsColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
