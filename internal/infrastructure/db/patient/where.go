// Code generated by ent, DO NOT EDIT.

package patient

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldID, id))
}

// WhatsappNumber applies equality check predicate on the "whatsapp_number" field. It's identical to WhatsappNumberEQ.
func WhatsappNumber(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldWhatsappNumber, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPhone, v))
}

// BirthDate applies equality check predicate on the "birth_date" field. It's identical to BirthDateEQ.
func BirthDate(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldBirthDate, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldAddress, v))
}

// EmergencyContactName applies equality check predicate on the "emergency_contact_name" field. It's identical to EmergencyContactNameEQ.
func EmergencyContactName(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldEmergencyContactName, v))
}

// EmergencyContactPhone applies equality check predicate on the "emergency_contact_phone" field. It's identical to EmergencyContactPhoneEQ.
func EmergencyContactPhone(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldEmergencyContactPhone, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldUpdatedAt, v))
}

// WhatsappNumberEQ applies the EQ predicate on the "whatsapp_number" field.
func WhatsappNumberEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldWhatsappNumber, v))
}

// WhatsappNumberNEQ applies the NEQ predicate on the "whatsapp_number" field.
func WhatsappNumberNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldWhatsappNumber, v))
}

// WhatsappNumberIn applies the In predicate on the "whatsapp_number" field.
func WhatsappNumberIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldWhatsappNumber, vs...))
}

// WhatsappNumberNotIn applies the NotIn predicate on the "whatsapp_number" field.
func WhatsappNumberNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldWhatsappNumber, vs...))
}

// WhatsappNumberGT applies the GT predicate on the "whatsapp_number" field.
func WhatsappNumberGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldWhatsappNumber, v))
}

// WhatsappNumberGTE applies the GTE predicate on the "whatsapp_number" field.
func WhatsappNumberGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldWhatsappNumber, v))
}

// WhatsappNumberLT applies the LT predicate on the "whatsapp_number" field.
func WhatsappNumberLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldWhatsappNumber, v))
}

// WhatsappNumberLTE applies the LTE predicate on the "whatsapp_number" field.
func WhatsappNumberLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldWhatsappNumber, v))
}

// WhatsappNumberContains applies the Contains predicate on the "whatsapp_number" field.
func WhatsappNumberContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldWhatsappNumber, v))
}

// WhatsappNumberHasPrefix applies the HasPrefix predicate on the "whatsapp_number" field.
func WhatsappNumberHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldWhatsappNumber, v))
}

// WhatsappNumberHasSuffix applies the HasSuffix predicate on the "whatsapp_number" field.
func WhatsappNumberHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldWhatsappNumber, v))
}

// WhatsappNumberEqualFold applies the EqualFold predicate on the "whatsapp_number" field.
func WhatsappNumberEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldWhatsappNumber, v))
}

// WhatsappNumberContainsFold applies the ContainsFold predicate on the "whatsapp_number" field.
func WhatsappNumberContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldWhatsappNumber, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPhone, v))
}

// BirthDateEQ applies the EQ predicate on the "birth_date" field.
func BirthDateEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldBirthDate, v))
}

// BirthDateNEQ applies the NEQ predicate on the "birth_date" field.
func BirthDateNEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldBirthDate, v))
}

// BirthDateIn applies the In predicate on the "birth_date" field.
func BirthDateIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldBirthDate, vs...))
}

// BirthDateNotIn applies the NotIn predicate on the "birth_date" field.
func BirthDateNotIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldBirthDate, vs...))
}

// BirthDateGT applies the GT predicate on the "birth_date" field.
func BirthDateGT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldBirthDate, v))
}

// BirthDateGTE applies the GTE predicate on the "birth_date" field.
func BirthDateGTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldBirthDate, v))
}

// BirthDateLT applies the LT predicate on the "birth_date" field.
func BirthDateLT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldBirthDate, v))
}

// BirthDateLTE applies the LTE predicate on the "birth_date" field.
func BirthDateLTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldBirthDate, v))
}

// BirthDateIsNil applies the IsNil predicate on the "birth_date" field.
func BirthDateIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldBirthDate))
}

// BirthDateNotNil applies the NotNil predicate on the "birth_date" field.
func BirthDateNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldBirthDate))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldGender, vs...))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldGender))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldAddress, v))
}

// MedicalHistoryIsNil applies the IsNil predicate on the "medical_history" field.
func MedicalHistoryIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldMedicalHistory))
}

// MedicalHistoryNotNil applies the NotNil predicate on the "medical_history" field.
func MedicalHistoryNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldMedicalHistory))
}

// AllergiesIsNil applies the IsNil predicate on the "allergies" field.
func AllergiesIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldAllergies))
}

// AllergiesNotNil applies the NotNil predicate on the "allergies" field.
func AllergiesNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldAllergies))
}

// EmergencyContactNameEQ applies the EQ predicate on the "emergency_contact_name" field.
func EmergencyContactNameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldEmergencyContactName, v))
}

// EmergencyContactNameNEQ applies the NEQ predicate on the "emergency_contact_name" field.
func EmergencyContactNameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldEmergencyContactName, v))
}

// EmergencyContactNameIn applies the In predicate on the "emergency_contact_name" field.
func EmergencyContactNameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldEmergencyContactName, vs...))
}

// EmergencyContactNameNotIn applies the NotIn predicate on the "emergency_contact_name" field.
func EmergencyContactNameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldEmergencyContactName, vs...))
}

// EmergencyContactNameGT applies the GT predicate on the "emergency_contact_name" field.
func EmergencyContactNameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldEmergencyContactName, v))
}

// EmergencyContactNameGTE applies the GTE predicate on the "emergency_contact_name" field.
func EmergencyContactNameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldEmergencyContactName, v))
}

// EmergencyContactNameLT applies the LT predicate on the "emergency_contact_name" field.
func EmergencyContactNameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldEmergencyContactName, v))
}

// EmergencyContactNameLTE applies the LTE predicate on the "emergency_contact_name" field.
func EmergencyContactNameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldEmergencyContactName, v))
}

// EmergencyContactNameContains applies the Contains predicate on the "emergency_contact_name" field.
func EmergencyContactNameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldEmergencyContactName, v))
}

// EmergencyContactNameHasPrefix applies the HasPrefix predicate on the "emergency_contact_name" field.
func EmergencyContactNameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldEmergencyContactName, v))
}

// EmergencyContactNameHasSuffix applies the HasSuffix predicate on the "emergency_contact_name" field.
func EmergencyContactNameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldEmergencyContactName, v))
}

// EmergencyContactNameIsNil applies the IsNil predicate on the "emergency_contact_name" field.
func EmergencyContactNameIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldEmergencyContactName))
}

// EmergencyContactNameNotNil applies the NotNil predicate on the "emergency_contact_name" field.
func EmergencyContactNameNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldEmergencyContactName))
}

// EmergencyContactNameEqualFold applies the EqualFold predicate on the "emergency_contact_name" field.
func EmergencyContactNameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldEmergencyContactName, v))
}

// EmergencyContactNameContainsFold applies the ContainsFold predicate on the "emergency_contact_name" field.
func EmergencyContactNameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldEmergencyContactName, v))
}

// EmergencyContactPhoneEQ applies the EQ predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneNEQ applies the NEQ predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneIn applies the In predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldEmergencyContactPhone, vs...))
}

// EmergencyContactPhoneNotIn applies the NotIn predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldEmergencyContactPhone, vs...))
}

// EmergencyContactPhoneGT applies the GT predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneGTE applies the GTE predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneLT applies the LT predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneLTE applies the LTE predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneContains applies the Contains predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneHasPrefix applies the HasPrefix predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneHasSuffix applies the HasSuffix predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneIsNil applies the IsNil predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldEmergencyContactPhone))
}

// EmergencyContactPhoneNotNil applies the NotNil predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldEmergencyContactPhone))
}

// EmergencyContactPhoneEqualFold applies the EqualFold predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldEmergencyContactPhone, v))
}

// EmergencyContactPhoneContainsFold applies the ContainsFold predicate on the "emergency_contact_phone" field.
func EmergencyContactPhoneContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldEmergencyContactPhone, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppointments applies the HasEdge predicate on the "appointments" edge.
func HasAppointments() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppointmentsTable, AppointmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentsWith applies the HasEdge predicate on the "appointments" edge with a given conditions (other predicates).
func HasAppointmentsWith(preds ...predicate.Appointment) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newAppointmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChatThreads applies the HasEdge predicate on the "chat_threads" edge.
func HasChatThreads() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChatThreadsTable, ChatThreadsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChatThreadsWith applies the HasEdge predicate on the "chat_threads" edge with a given conditions (other predicates).
func HasChatThreadsWith(preds ...predicate.ChatThread) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newChatThreadsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocuments applies the HasEdge predicate on the "documents" edge.
func HasDocuments() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DocumentsTable, DocumentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentsWith applies the HasEdge predicate on the "documents" edge with a given conditions (other predicates).
func HasDocumentsWith(preds ...predicate.Document) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBillingRecords applies the HasEdge predicate on the "billing_records" edge.
func HasBillingRecords() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillingRecordsTable, BillingRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillingRecordsWith applies the HasEdge predicate on the "billing_records" edge with a given conditions (other predicates).
func HasBillingRecordsWith(preds ...predicate.BillingRecord) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newBillingRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.NotPredicates(p))
}
